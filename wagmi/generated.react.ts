// Generated by @wagmi/cli@0.1.14 on 7/5/2023 at 12:36:01 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi"
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from "wagmi/actions"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ConfigStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const configStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IConfigStorage_BadArgs" },
  { type: "error", inputs: [], name: "IConfigStorage_BadLen" },
  { type: "error", inputs: [], name: "IConfigStorage_ExceedLimitSetting" },
  { type: "error", inputs: [], name: "IConfigStorage_InvalidAddress" },
  { type: "error", inputs: [], name: "IConfigStorage_InvalidAssetClass" },
  { type: "error", inputs: [], name: "IConfigStorage_InvalidValue" },
  { type: "error", inputs: [], name: "IConfigStorage_MaxFeeBps" },
  { type: "error", inputs: [], name: "IConfigStorage_NotAcceptedCollateral" },
  { type: "error", inputs: [], name: "IConfigStorage_NotAcceptedLiquidity" },
  { type: "error", inputs: [], name: "IConfigStorage_NotWhiteListed" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogAddAssetClassConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: "LogAddMarketConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_token", internalType: "address", type: "address", indexed: false },
      {
        name: "_config",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogAddOrUpdateHLPTokenConfigs",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false }],
    name: "LogDelistMarket",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "token", internalType: "address", type: "address", indexed: false }],
    name: "LogRemoveUnderlying",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogSetAssetClassConfigByIndex",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetAssetConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldCalculator", internalType: "address", type: "address", indexed: true },
      { name: "newCalculator", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetCalculator",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetCollateralTokenConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetConfigExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "enabled", internalType: "bool", type: "bool", indexed: false }],
    name: "LogSetDynamicEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldHlp", internalType: "address", type: "address", indexed: true },
      { name: "newHlp", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetHLP",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetHlpTokenConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogSetLiquidationConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldLiquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
        indexed: true,
      },
      {
        name: "newLiquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetLiquidityConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "bool", type: "bool", indexed: false },
      { name: "newValue", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetLiquidityEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: "LogSetMarketConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinimumPositionSize",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldOracle", internalType: "address", type: "address", indexed: true },
      { name: "newOracle", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetOracle",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPnlFactorBPS", internalType: "uint32", type: "uint32", indexed: false },
      { name: "newPnlFactorBPS", internalType: "uint32", type: "uint32", indexed: false },
    ],
    name: "LogSetPnlFactor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "contractAddress", internalType: "address", type: "address", indexed: true },
      { name: "executorAddress", internalType: "address", type: "address", indexed: false },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetServiceExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetSwapConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldToken", internalType: "address", type: "address", indexed: true },
      { name: "newToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetToken",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldHooks", internalType: "address[]", type: "address[]", indexed: false },
      { name: "newHooks", internalType: "address[]", type: "address[]", indexed: false },
    ],
    name: "LogSetTradeServiceHooks",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetTradingConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "BPS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_FEE_BPS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "addAssetClassConfig",
    outputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    name: "addMarketConfig",
    outputs: [{ name: "_newMarketIndex", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokens", internalType: "address[]", type: "address[]" },
      {
        name: "_configs",
        internalType: "struct IConfigStorage.HLPTokenConfig[]",
        type: "tuple[]",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "addOrUpdateAcceptedToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "allowedLiquidators",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "assetClassConfigs",
    outputs: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetCollateralTokenConfigs",
    outputs: [
      { name: "settleStrategy", internalType: "address", type: "address" },
      { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
      { name: "accepted", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetConfigs",
    outputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "assetId", internalType: "bytes32", type: "bytes32" },
      { name: "decimals", internalType: "uint8", type: "uint8" },
      { name: "isStableCoin", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetHlpTokenConfigs",
    outputs: [
      { name: "targetWeight", internalType: "uint256", type: "uint256" },
      { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
      { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
      { name: "accepted", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "calculator",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "collateralAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "configExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_marketIndex", internalType: "uint256", type: "uint256" }],
    name: "delistMarket",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
    name: "getAssetClassConfigByIndex",
    outputs: [
      {
        name: "_assetClassConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getAssetClassConfigsLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetId", internalType: "bytes32", type: "bytes32" }],
    name: "getAssetConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetConfigByToken",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetId", internalType: "bytes32", type: "bytes32" }],
    name: "getAssetHlpTokenConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetHlpTokenConfigByToken",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetTokenDecimal",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getCollateralTokenConfigs",
    outputs: [
      {
        name: "_collateralTokenConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCollateralTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getHlpAssetIds",
    outputs: [{ name: "", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getHlpTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidationConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
    name: "getMarketConfigByIndex",
    outputs: [
      {
        name: "_marketConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getMarketConfigs",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.MarketConfig[]",
        type: "tuple[]",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getMarketConfigsLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getTradeServiceHooks",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getTradingConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "hlp",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "hlpAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidationConfig",
    outputs: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidityConfig",
    outputs: [
      { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
      { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
      { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
      { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
      { name: "enabled", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "marketConfigs",
    outputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32" },
      { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
      { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
      { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
      { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
      { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
      { name: "assetClass", internalType: "uint8", type: "uint8" },
      { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
      { name: "active", internalType: "bool", type: "bool" },
      {
        name: "fundingRate",
        internalType: "struct IConfigStorage.FundingRate",
        type: "tuple",
        components: [
          { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
          { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minimumPositionSize",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "oracle",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pnlFactorBPS",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "removeAcceptedToken",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_index", internalType: "uint256", type: "uint256" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "setAssetClassConfigByIndex",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setAssetConfig",
    outputs: [
      {
        name: "_assetConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" },
      {
        name: "_newConfigs",
        internalType: "struct IConfigStorage.AssetConfig[]",
        type: "tuple[]",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setAssetConfigs",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_calculator", internalType: "address", type: "address" }],
    name: "setCalculator",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setCollateralTokenConfig",
    outputs: [
      {
        name: "_collateralTokenConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" },
      {
        name: "_newConfigs",
        internalType: "struct IConfigStorage.CollateralTokenConfig[]",
        type: "tuple[]",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setCollateralTokenConfigs",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setConfigExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_enabled", internalType: "bool", type: "bool" }],
    name: "setDynamicEnabled",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_hlp", internalType: "address", type: "address" }],
    name: "setHLP",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setHlpTokenConfig",
    outputs: [
      {
        name: "_hlpTokenConfig",
        internalType: "struct IConfigStorage.HLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "setLiquidationConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_liquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "hlpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "hlpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxHLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setLiquidityConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_enabled", internalType: "bool", type: "bool" }],
    name: "setLiquidityEnabled",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    name: "setMarketConfig",
    outputs: [
      {
        name: "_marketConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_minimumPositionSize", internalType: "uint256", type: "uint256" }],
    name: "setMinimumPositionSize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_oracle", internalType: "address", type: "address" }],
    name: "setOracle",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pnlFactorBPS", internalType: "uint32", type: "uint32" }],
    name: "setPnlFactor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_sglp", internalType: "address", type: "address" }],
    name: "setSGlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contractAddress", internalType: "address", type: "address" },
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contractAddresses", internalType: "address[]", type: "address[]" },
      { name: "_executorAddresses", internalType: "address[]", type: "address[]" },
      { name: "_isServiceExecutors", internalType: "bool[]", type: "bool[]" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
      },
    ],
    name: "setSwapConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newHooks", internalType: "address[]", type: "address[]" }],
    name: "setTradeServiceHooks",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "setTradingConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_weth", internalType: "address", type: "address" }],
    name: "setWeth",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "sglp",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "swapConfig",
    outputs: [
      { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "tokenAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "tradeServiceHooks",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradingConfig",
    outputs: [
      { name: "fundingInterval", internalType: "uint256", type: "uint256" },
      { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
      { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "maxPosition", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "validateAcceptedCollateral",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "validateAcceptedLiquidityToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_contractAddress", internalType: "address", type: "address" },
      { name: "_executorAddress", internalType: "address", type: "address" },
    ],
    name: "validateServiceExecutor",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CrossMarginHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crossMarginHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "HMXLib_WrongSubAccountId" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_BadAmount" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InCorrectValueTransfer" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_MismatchMsgValue" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NoOrder" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotOrderOwner" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotWNativeToken" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotWhitelisted" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_Unauthorized" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shouldUnwrap", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCancelWithdrawOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shouldUnwrap", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCreateWithdrawOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "primaryAccount", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogDepositCollateral",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shouldUnwrap", internalType: "bool", type: "bool", indexed: false },
      { name: "isSuccess", internalType: "bool", type: "bool", indexed: false },
      { name: "errMsg", internalType: "string", type: "string", indexed: false },
    ],
    name: "LogExecuteWithdrawOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogMaxExecutionChuck",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldCrossMarginService", internalType: "address", type: "address", indexed: true },
      { name: "newCrossMarginService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetCrossMarginService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: true },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "primaryAccount", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogWithdrawCollateral",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_orderIndex", internalType: "uint256", type: "uint256" }],
    name: "cancelWithdrawOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_tokenOut", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minAmountOut", internalType: "uint256", type: "uint256" },
    ],
    name: "convertSGlpCollateral",
    outputs: [{ name: "_amountOut", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_shouldUnwrap", internalType: "bool", type: "bool" },
    ],
    name: "createWithdrawCollateralOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "crossMarginService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
    ],
    name: "depositCollateral",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_endIndex", internalType: "uint256", type: "uint256" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_order",
        internalType: "struct ICrossMarginHandler.WithdrawOrder",
        type: "tuple",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "executeWithdrawOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActiveWithdrawOrders",
    outputs: [
      {
        name: "_withdrawOrder",
        internalType: "struct ICrossMarginHandler.WithdrawOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getExecutedWithdrawOrders",
    outputs: [
      {
        name: "_withdrawOrder",
        internalType: "struct ICrossMarginHandler.WithdrawOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getWithdrawOrderLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getWithdrawOrders",
    outputs: [
      {
        name: "_withdrawOrders",
        internalType: "struct ICrossMarginHandler.WithdrawOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_crossMarginService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionOrderFee", internalType: "uint256", type: "uint256" },
      { name: "_maxExecutionChuck", internalType: "uint256", type: "uint256" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "maxExecutionChuck",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionOrderFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextExecutionOrderIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_crossMarginService", internalType: "address", type: "address" }],
    name: "setCrossMarginService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_maxExecutionChuck", internalType: "uint256", type: "uint256" }],
    name: "setMaxExecutionChuck",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "subAccountExecutedWithdrawOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "token", internalType: "address", type: "address" },
      { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
      { name: "shouldUnwrap", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "withdrawOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "token", internalType: "address", type: "address" },
      { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "status", internalType: "enum ICrossMarginHandler.WithdrawOrderStatus", type: "uint8" },
      { name: "shouldUnwrap", internalType: "bool", type: "bool" },
    ],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGmxGlpManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGmxGlpManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_fundingAccount", internalType: "address", type: "address" },
      { name: "_account", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minUsdg", internalType: "uint256", type: "uint256" },
      { name: "_minGlp", internalType: "uint256", type: "uint256" },
    ],
    name: "addLiquidityForAccount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "useMaxPrice", internalType: "bool", type: "bool" }],
    name: "getAum",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "useMaxPrice", internalType: "bool", type: "bool" }],
    name: "getAumInUsdg",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getAums",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LimitTradeHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const limitTradeHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "HMXLib_WrongSubAccountId" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_BadCalldata" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_BadSizeDelta" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_BadSubAccountId" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_IncorrectValueTransfer" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidArraySize" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidPriceForExecution" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidSender" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_LimitOrderConvertToMarketOrder" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MarketIsClosed" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MarketOrderNoUpdate" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MaxExecutionFee" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NonExistentOrder" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NotWhitelisted" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_TriggerPriceAboveCurrentPrice" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_TriggerPriceBelowCurrentPrice" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_Unauthorized" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_UnknownOrderType" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_WrongSizeDelta" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCancelLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "acceptablePrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCreateLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogExecuteLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
      { name: "errMsg", internalType: "string", type: "string", indexed: false },
    ],
    name: "LogExecuteMarketOrderFail",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "sender", internalType: "address", type: "address", indexed: false },
      { name: "delegate", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetDelegate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "isActive", internalType: "bool", type: "bool", indexed: false }],
    name: "LogSetGuaranteeLimitPrice",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "bool", type: "bool", indexed: false },
      { name: "newValue", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetIsAllowAllExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint64", type: "uint64", indexed: false },
      { name: "newValue", internalType: "uint64", type: "uint64", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint32", type: "uint32", indexed: false },
      { name: "newValue", internalType: "uint32", type: "uint32", indexed: false },
    ],
    name: "LogSetMinExecutionTimestamp",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetTradeService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogUpdateLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "activeLimitOrdersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "activeMarketOrdersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "activeOrdersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_mainAccount", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_cmds", internalType: "enum ILimitTradeHandler.Command[]", type: "uint8[]" },
      { name: "_datas", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "batch",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_mainAccount", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
    ],
    name: "cancelOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_mainAccount", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "createOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "createOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "delegations",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "vars",
        internalType: "struct LimitTradeHandler.ExecuteOrderVars",
        type: "tuple",
        components: [
          {
            name: "order",
            internalType: "struct ILimitTradeHandler.LimitOrder",
            type: "tuple",
            components: [
              { name: "account", internalType: "address", type: "address" },
              { name: "tpToken", internalType: "address", type: "address" },
              { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
              { name: "reduceOnly", internalType: "bool", type: "bool" },
              { name: "sizeDelta", internalType: "int256", type: "int256" },
              { name: "subAccountId", internalType: "uint8", type: "uint8" },
              { name: "orderIndex", internalType: "uint256", type: "uint256" },
              { name: "marketIndex", internalType: "uint256", type: "uint256" },
              { name: "triggerPrice", internalType: "uint256", type: "uint256" },
              { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
              { name: "executionFee", internalType: "uint256", type: "uint256" },
              { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "subAccount", internalType: "address", type: "address" },
          { name: "positionId", internalType: "bytes32", type: "bytes32" },
          { name: "encodedVaas", internalType: "bytes32", type: "bytes32" },
          { name: "priceData", internalType: "bytes32[]", type: "bytes32[]" },
          { name: "publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
          { name: "feeReceiver", internalType: "address payable", type: "address" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "minPublishTime", internalType: "uint256", type: "uint256" },
          { name: "positionIsLong", internalType: "bool", type: "bool" },
          { name: "isNewPosition", internalType: "bool", type: "bool" },
          { name: "isMarketOrder", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
        ],
      },
    ],
    name: "executeLimitOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_accounts", internalType: "address[]", type: "address[]" },
      { name: "_subAccountIds", internalType: "uint8[]", type: "uint8[]" },
      { name: "_orderIndexes", internalType: "uint256[]", type: "uint256[]" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeOrders",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getAllActiveOrders",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getAllActiveOrdersBySubAccount",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getLimitActiveOrders",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getLimitActiveOrdersBySubAccount",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getMarketActiveOrders",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getMarketActiveOrdersBySubAccount",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_weth", internalType: "address", type: "address" },
      { name: "_tradeService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionFee", internalType: "uint64", type: "uint64" },
      { name: "_minExecutionTimestamp", internalType: "uint32", type: "uint32" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isAllowAllExecutor",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isGuaranteeLimitPrice",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "limitOrders",
    outputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "tpToken", internalType: "address", type: "address" },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "reduceOnly", internalType: "bool", type: "bool" },
      { name: "sizeDelta", internalType: "int256", type: "int256" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "orderIndex", internalType: "uint256", type: "uint256" },
      { name: "marketIndex", internalType: "uint256", type: "uint256" },
      { name: "triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "limitOrdersIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionFee",
    outputs: [{ name: "", internalType: "uint64", type: "uint64" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionTimestamp",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
    name: "multicall",
    outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "contract IEcoPyth", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_delegate", internalType: "address", type: "address" }],
    name: "setDelegate",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "isActive", internalType: "bool", type: "bool" }],
    name: "setGuaranteeLimitPrice",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint64", type: "uint64" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionTimestamp", internalType: "uint32", type: "uint32" }],
    name: "setMinExecutionTimestamp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_tradeService", internalType: "address", type: "address" }],
    name: "setTradeService",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradeService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_mainAccount", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "updateOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LiquidityHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const liquidityHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "ILiquidityHandler_InCorrectValueTransfer" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InsufficientRefund" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InvalidSender" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NoOrder" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotOrderOwner" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotWNativeToken" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotWhitelisted" },
  { type: "error", inputs: [], name: "ILiquidityHandler_Unauthorized" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isAdd", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCancelLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "tokenIn", internalType: "address", type: "address", indexed: true },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48", indexed: false },
    ],
    name: "LogCreateAddLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "tokenOut", internalType: "address", type: "address", indexed: true },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isNativeOut", internalType: "bool", type: "bool", indexed: false },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48", indexed: false },
    ],
    name: "LogCreateRemoveLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isAdd", internalType: "bool", type: "bool", indexed: false },
      { name: "actualOut", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogExecuteLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isNativeOut", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogRefund",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldHlpStaking", internalType: "address", type: "address", indexed: false },
      { name: "newHlpStaking", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetHlpStaking",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetLiquidityService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMaxExecutionChunk",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: false },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "accountExecutedLiquidityOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "minOut", internalType: "uint256", type: "uint256" },
      { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "token", internalType: "address", type: "address" },
      { name: "isAdd", internalType: "bool", type: "bool" },
      { name: "isNativeOut", internalType: "bool", type: "bool" },
      { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_orderIndex", internalType: "uint256", type: "uint256" }],
    name: "cancelLiquidityOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenIn", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
    ],
    name: "createAddLiquidityOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenIn", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
      { name: "_isSurge", internalType: "bool", type: "bool" },
    ],
    name: "createAddLiquidityOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenOut", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_isNativeOut", internalType: "bool", type: "bool" },
    ],
    name: "createRemoveLiquidityOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_order",
        internalType: "struct ILiquidityHandler.LiquidityOrder",
        type: "tuple",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
        ],
      },
    ],
    name: "executeLiquidity",
    outputs: [{ name: "_amountOut", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_endIndex", internalType: "uint256", type: "uint256" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActiveLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrders",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getExecutedLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrders",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityOrderLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrders",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "hlpStaking",
    outputs: [{ name: "", internalType: "contract ISurgeStaking", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_liquidityService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionOrderFee", internalType: "uint256", type: "uint256" },
      { name: "_maxExecutionChunk", internalType: "uint256", type: "uint256" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "liquidityOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "minOut", internalType: "uint256", type: "uint256" },
      { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "token", internalType: "address", type: "address" },
      { name: "isAdd", internalType: "bool", type: "bool" },
      { name: "isNativeOut", internalType: "bool", type: "bool" },
      { name: "status", internalType: "enum ILiquidityHandler.LiquidityOrderStatus", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidityService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "maxExecutionChunk",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionOrderFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextExecutionOrderIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_hlpStaking", internalType: "address", type: "address" }],
    name: "setHlpStaking",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newLiquidityService", internalType: "address", type: "address" }],
    name: "setLiquidityService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_maxExecutionChunk", internalType: "uint256", type: "uint256" }],
    name: "setMaxExecutionChunk",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockBalancerPool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockBalancerPoolABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getNormalizedWeights",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "getPoolId",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getSwapFeePercentage",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getVault",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "normalizedWeights",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_normalizedWeights", internalType: "uint256[]", type: "uint256[]" }],
    name: "setNormalizedWeights",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_swapFeePercentage", internalType: "uint256", type: "uint256" }],
    name: "setSwapFeePercentage",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_vault", internalType: "address", type: "address" }],
    name: "setVault",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "swapFeePercentage",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "vault",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockBalancerVault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockBalancerVaultABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "getPoolTokens",
    outputs: [
      { name: "tokens", internalType: "address[]", type: "address[]" },
      { name: "balances", internalType: "uint256[]", type: "uint256[]" },
      { name: "lastChangeBlock", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "poolBalances",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "poolTokens",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_poolTokens", internalType: "address[]", type: "address[]" },
      { name: "_poolBalances", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "setParams",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OracleMiddleware
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const oracleMiddlewareABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IOracleMiddleware_InvalidMarketStatus" },
  { type: "error", inputs: [], name: "IOracleMiddleware_InvalidValue" },
  { type: "error", inputs: [], name: "IOracleMiddleware_MarketStatusUndefined" },
  { type: "error", inputs: [], name: "IOracleMiddleware_OnlyUpdater" },
  { type: "error", inputs: [], name: "IOracleMiddleware_PriceStale" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPythAdapter", internalType: "address", type: "address", indexed: false },
      { name: "newPythAdapter", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetAdapter",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "_oldConfidenceThresholdE6", internalType: "uint32", type: "uint32", indexed: false },
      { name: "_newConfidenceThresholdE6", internalType: "uint32", type: "uint32", indexed: false },
      { name: "_oldTrustPriceAge", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_newTrustPriceAge", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_oldAdapter", internalType: "address", type: "address", indexed: false },
      { name: "_newAdapter", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetAssetPriceConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "_status", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "LogSetMarketStatus",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMaxTrustPriceAge",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_account", internalType: "address", type: "address", indexed: true },
      { name: "_isActive", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetUpdater",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetPriceConfigs",
    outputs: [
      { name: "trustPriceAge", internalType: "uint32", type: "uint32" },
      { name: "confidenceThresholdE6", internalType: "uint32", type: "uint32" },
      { name: "adapter", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "getLatestAdaptivePrice",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "getLatestAdaptivePriceWithMarketStatus",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "getLatestPrice",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "getLatestPriceWithMarketStatus",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_maxTrustPriceAge", internalType: "uint256", type: "uint256" }],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "isUpdater",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "marketStatus",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_confidenceThresholdE6", internalType: "uint32", type: "uint32" },
      { name: "_trustPriceAge", internalType: "uint32", type: "uint32" },
      { name: "_adapter", internalType: "address", type: "address" },
    ],
    name: "setAssetPriceConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_confidenceThresholdE6s", internalType: "uint32[]", type: "uint32[]" },
      { name: "_trustPriceAges", internalType: "uint32[]", type: "uint32[]" },
      { name: "_adapters", internalType: "address[]", type: "address[]" },
    ],
    name: "setAssetPriceConfigs",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
    name: "setMarketStatus",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_maxTrustPriceAge", internalType: "uint256", type: "uint256" }],
    name: "setMaxTrustPriceAge",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_statuses", internalType: "uint8[]", type: "uint8[]" },
    ],
    name: "setMultipleMarketStatus",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_isActive", internalType: "bool", type: "bool" },
    ],
    name: "setUpdater",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "unsafeGetLatestAdaptivePrice",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "unsafeGetLatestAdaptivePriceWithMarketStatus",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "unsafeGetLatestPrice",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "unsafeGetLatestPriceWithMarketStatus",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PerpStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IPerpStorage_BadLen" },
  { type: "error", inputs: [], name: "IPerpStorage_NotWhiteListed" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetServiceExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "assetClasses",
    outputs: [
      { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
      { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
      { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
      { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
      { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_isLong", internalType: "bool", type: "bool" },
      { name: "_size", internalType: "uint256", type: "uint256" },
    ],
    name: "decreasePositionSize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      { name: "_reserve", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseReserved",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActivePositionIds",
    outputs: [{ name: "_ids", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActivePositions",
    outputs: [
      {
        name: "_positions",
        internalType: "struct IPerpStorage.Position[]",
        type: "tuple[]",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActiveSubAccounts",
    outputs: [{ name: "_subAccounts", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetClassIndex", internalType: "uint256", type: "uint256" }],
    name: "getAssetClassByIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.AssetClass",
        type: "tuple",
        components: [
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
          { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getGlobalState",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.GlobalState",
        type: "tuple",
        components: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_marketIndex", internalType: "uint256", type: "uint256" }],
    name: "getMarketByIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.Market",
        type: "tuple",
        components: [
          { name: "longPositionSize", internalType: "uint256", type: "uint256" },
          { name: "longAccumSE", internalType: "uint256", type: "uint256" },
          { name: "longAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "shortAccumSE", internalType: "uint256", type: "uint256" },
          { name: "shortAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "currentFundingRate", internalType: "int256", type: "int256" },
          { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
          { name: "accumFundingLong", internalType: "int256", type: "int256" },
          { name: "accumFundingShort", internalType: "int256", type: "int256" },
          { name: "fundingAccrued", internalType: "int256", type: "int256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getNumberOfSubAccountPosition",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_positionId", internalType: "bytes32", type: "bytes32" }],
    name: "getPositionById",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.Position",
        type: "tuple",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getPositionBySubAccount",
    outputs: [
      {
        name: "_subAccountPositions",
        internalType: "struct IPerpStorage.Position[]",
        type: "tuple[]",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getPositionIds",
    outputs: [{ name: "_positionIds", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalState",
    outputs: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_isLong", internalType: "bool", type: "bool" },
      { name: "_size", internalType: "uint256", type: "uint256" },
    ],
    name: "increasePositionSize",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "markets",
    outputs: [
      { name: "longPositionSize", internalType: "uint256", type: "uint256" },
      { name: "longAccumSE", internalType: "uint256", type: "uint256" },
      { name: "longAccumS2E", internalType: "uint256", type: "uint256" },
      { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
      { name: "shortAccumSE", internalType: "uint256", type: "uint256" },
      { name: "shortAccumS2E", internalType: "uint256", type: "uint256" },
      { name: "currentFundingRate", internalType: "int256", type: "int256" },
      { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
      { name: "accumFundingLong", internalType: "int256", type: "int256" },
      { name: "accumFundingShort", internalType: "int256", type: "int256" },
      { name: "fundingAccrued", internalType: "int256", type: "int256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "positions",
    outputs: [
      { name: "primaryAccount", internalType: "address", type: "address" },
      { name: "marketIndex", internalType: "uint256", type: "uint256" },
      { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
      { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
      { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
      { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
      { name: "positionSizeE30", internalType: "int256", type: "int256" },
      { name: "realizedPnl", internalType: "int256", type: "int256" },
      { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_positionId", internalType: "bytes32", type: "bytes32" },
    ],
    name: "removePositionFromSubAccount",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_positionId", internalType: "bytes32", type: "bytes32" },
      {
        name: "position",
        internalType: "struct IPerpStorage.Position",
        type: "tuple",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "lastFundingAccrued", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "savePosition",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddresses", internalType: "address[]", type: "address[]" },
      { name: "_isServiceExecutors", internalType: "bool[]", type: "bool[]" },
    ],
    name: "setServiceExecutorBatch",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "subAccountBorrowingFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "subAccountPositionIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      {
        name: "_newAssetClass",
        internalType: "struct IPerpStorage.AssetClass",
        type: "tuple",
        components: [
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
          { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "updateAssetClass",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_newPositionSize", internalType: "uint256", type: "uint256" },
      { name: "_newAccumSE", internalType: "uint256", type: "uint256" },
      { name: "_newAccumS2E", internalType: "uint256", type: "uint256" },
    ],
    name: "updateGlobalLongMarketById",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_newPositionSize", internalType: "uint256", type: "uint256" },
      { name: "_newAccumSE", internalType: "uint256", type: "uint256" },
      { name: "_newAccumS2E", internalType: "uint256", type: "uint256" },
    ],
    name: "updateGlobalShortMarketById",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newGlobalState",
        internalType: "struct IPerpStorage.GlobalState",
        type: "tuple",
        components: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "updateGlobalState",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_market",
        internalType: "struct IPerpStorage.Market",
        type: "tuple",
        components: [
          { name: "longPositionSize", internalType: "uint256", type: "uint256" },
          { name: "longAccumSE", internalType: "uint256", type: "uint256" },
          { name: "longAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "shortAccumSE", internalType: "uint256", type: "uint256" },
          { name: "shortAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "currentFundingRate", internalType: "int256", type: "int256" },
          { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
          { name: "accumFundingLong", internalType: "int256", type: "int256" },
          { name: "accumFundingShort", internalType: "int256", type: "int256" },
          { name: "fundingAccrued", internalType: "int256", type: "int256" },
        ],
      },
    ],
    name: "updateMarket",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VaultStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vaultStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IVaultStorage_BadLen" },
  { type: "error", inputs: [], name: "IVaultStorage_Forbidden" },
  { type: "error", inputs: [], name: "IVaultStorage_HLPBalanceRemaining" },
  { type: "error", inputs: [], name: "IVaultStorage_InvalidAddress" },
  { type: "error", inputs: [], name: "IVaultStorage_NotWhiteListed" },
  { type: "error", inputs: [], name: "IVaultStorage_TargetNotContract" },
  { type: "error", inputs: [], name: "IVaultStorage_TraderBalanceRemaining" },
  { type: "error", inputs: [], name: "IVaultStorage_TraderTokenAlreadyExists" },
  { type: "error", inputs: [], name: "IVaultStorage_ZeroAddress" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetServiceExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "strategy", internalType: "address", type: "address", indexed: false },
      { name: "prevTarget", internalType: "address", type: "address", indexed: false },
      { name: "newTarget", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetStrategyAllowance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "strategy", internalType: "address", type: "address", indexed: false },
      { name: "prevFunctionSig", internalType: "bytes4", type: "bytes4", indexed: false },
      { name: "newFunctionSig", internalType: "bytes4", type: "bytes4", indexed: false },
    ],
    name: "LogSetStrategyFunctionSigAllowance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "balance", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetTraderBalance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_borrowingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addBorrowingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addFundingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_fundingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addFundingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addHLPLiquidity",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_value", internalType: "uint256", type: "uint256" }],
    name: "addHlpLiquidityDebtUSDE30",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_lossDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addLossDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_tradingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addTradingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_fundingFeeValue", internalType: "uint256", type: "uint256" },
    ],
    name: "borrowFundingFeeFromHlpToTrader",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "borrowingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_convertToken", internalType: "address", type: "address" },
      { name: "_targetToken", internalType: "address", type: "address" },
      { name: "_convertAmount", internalType: "uint256", type: "uint256" },
      { name: "_targetAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "convertFundingFeeReserveWithHLP",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
      { name: "_callData", internalType: "bytes", type: "bytes" },
    ],
    name: "cook",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseTraderBalance",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "devFees",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "fundingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "fundingFeeReserve",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getTraderTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalBorrowingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalFundingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalLossDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalTradingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "hlpLiquidity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "hlpLiquidityDebtUSDE30",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseTraderBalance",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "lossDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_devFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_hlpFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payBorrowingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromFundingFeeReserveToTrader",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromHlpToTrader",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromTraderToFundingFeeReserve",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromTraderToHlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "payHlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_totalProfitAmount", internalType: "uint256", type: "uint256" },
      { name: "_settlementFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payTraderProfit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_devFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_protocolFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payTradingFee",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "protocolFees",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "pullToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "pushToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "removeFundingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "removeHLPLiquidity",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_value", internalType: "uint256", type: "uint256" }],
    name: "removeHlpLiquidityDebtUSDE30",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_fundingFeeValue", internalType: "uint256", type: "uint256" },
    ],
    name: "repayFundingFeeDebtFromTraderToHlp",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddresses", internalType: "address[]", type: "address[]" },
      { name: "_isServiceExecutors", internalType: "bool[]", type: "bool[]" },
    ],
    name: "setServiceExecutorBatch",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_strategy", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
    ],
    name: "setStrategyAllowance",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_strategy", internalType: "address", type: "address" },
      { name: "_target", internalType: "bytes4", type: "bytes4" },
    ],
    name: "setStrategyFunctionSigAllowance",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "strategyAllowances",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "strategy", internalType: "address", type: "address" },
    ],
    name: "strategyFunctionSigAllowances",
    outputs: [{ name: "functionSig", internalType: "bytes4", type: "bytes4" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_borrowingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subBorrowingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_fundingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subFundingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_lossDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subLossDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_tradingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subTradingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "totalAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "traderBalances",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "traderTokens",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "tradingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
    ],
    name: "validateAddTraderToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
    ],
    name: "validateRemoveTraderToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_receiver", internalType: "address", type: "address" },
    ],
    name: "withdrawDevFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_receiver", internalType: "address", type: "address" },
    ],
    name: "withdrawFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "withdrawSurplusFromFundingFeeReserveToHLP",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link configStorageABI}__.
 */
export function useConfigStorage(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: configStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__.
 */
export function useConfigStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof configStorageABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof configStorageABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: configStorageABI, ...config } as UseContractReadConfig<
    typeof configStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"BPS"`.
 */
export function useConfigStorageBps<TSelectData = ReadContractResult<typeof configStorageABI, "BPS">>(
  config: Omit<UseContractReadConfig<typeof configStorageABI, "BPS", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "BPS", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "BPS",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"MAX_FEE_BPS"`.
 */
export function useConfigStorageMaxFeeBps<TSelectData = ReadContractResult<typeof configStorageABI, "MAX_FEE_BPS">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "MAX_FEE_BPS", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "MAX_FEE_BPS", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "MAX_FEE_BPS",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"allowedLiquidators"`.
 */
export function useConfigStorageAllowedLiquidators<
  TSelectData = ReadContractResult<typeof configStorageABI, "allowedLiquidators">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "allowedLiquidators", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "allowedLiquidators",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "allowedLiquidators", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"assetClassConfigs"`.
 */
export function useConfigStorageAssetClassConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "assetClassConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "assetClassConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "assetClassConfigs",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "assetClassConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"assetCollateralTokenConfigs"`.
 */
export function useConfigStorageAssetCollateralTokenConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "assetCollateralTokenConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "assetCollateralTokenConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "assetCollateralTokenConfigs",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "assetCollateralTokenConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"assetConfigs"`.
 */
export function useConfigStorageAssetConfigs<TSelectData = ReadContractResult<typeof configStorageABI, "assetConfigs">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "assetConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "assetConfigs", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "assetConfigs",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"assetHlpTokenConfigs"`.
 */
export function useConfigStorageAssetHlpTokenConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "assetHlpTokenConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "assetHlpTokenConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "assetHlpTokenConfigs",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "assetHlpTokenConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"calculator"`.
 */
export function useConfigStorageCalculator<TSelectData = ReadContractResult<typeof configStorageABI, "calculator">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "calculator", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "calculator", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "calculator",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"collateralAssetIds"`.
 */
export function useConfigStorageCollateralAssetIds<
  TSelectData = ReadContractResult<typeof configStorageABI, "collateralAssetIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "collateralAssetIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "collateralAssetIds",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "collateralAssetIds", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"configExecutors"`.
 */
export function useConfigStorageConfigExecutors<
  TSelectData = ReadContractResult<typeof configStorageABI, "configExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "configExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "configExecutors", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "configExecutors",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetClassConfigByIndex"`.
 */
export function useConfigStorageGetAssetClassConfigByIndex<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetClassConfigByIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetClassConfigByIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetClassConfigByIndex",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetClassConfigByIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetClassConfigsLength"`.
 */
export function useConfigStorageGetAssetClassConfigsLength<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetClassConfigsLength">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetClassConfigsLength", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetClassConfigsLength",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetClassConfigsLength", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetConfig"`.
 */
export function useConfigStorageGetAssetConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "getAssetConfig", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "getAssetConfig",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetConfigByToken"`.
 */
export function useConfigStorageGetAssetConfigByToken<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetConfigByToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetConfigByToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetConfigByToken",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetConfigByToken", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetHlpTokenConfig"`.
 */
export function useConfigStorageGetAssetHlpTokenConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetHlpTokenConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetHlpTokenConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetHlpTokenConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetHlpTokenConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetHlpTokenConfigByToken"`.
 */
export function useConfigStorageGetAssetHlpTokenConfigByToken<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetHlpTokenConfigByToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetHlpTokenConfigByToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetHlpTokenConfigByToken",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetHlpTokenConfigByToken", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetTokenDecimal"`.
 */
export function useConfigStorageGetAssetTokenDecimal<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetTokenDecimal">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetTokenDecimal", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetTokenDecimal",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetTokenDecimal", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getCollateralTokenConfigs"`.
 */
export function useConfigStorageGetCollateralTokenConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "getCollateralTokenConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getCollateralTokenConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getCollateralTokenConfigs",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getCollateralTokenConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getCollateralTokens"`.
 */
export function useConfigStorageGetCollateralTokens<
  TSelectData = ReadContractResult<typeof configStorageABI, "getCollateralTokens">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getCollateralTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getCollateralTokens",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getCollateralTokens", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getHlpAssetIds"`.
 */
export function useConfigStorageGetHlpAssetIds<
  TSelectData = ReadContractResult<typeof configStorageABI, "getHlpAssetIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getHlpAssetIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "getHlpAssetIds", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "getHlpAssetIds",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getHlpTokens"`.
 */
export function useConfigStorageGetHlpTokens<TSelectData = ReadContractResult<typeof configStorageABI, "getHlpTokens">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getHlpTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "getHlpTokens", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "getHlpTokens",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getLiquidationConfig"`.
 */
export function useConfigStorageGetLiquidationConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getLiquidationConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getLiquidationConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getLiquidationConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getLiquidationConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getLiquidityConfig"`.
 */
export function useConfigStorageGetLiquidityConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getLiquidityConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getLiquidityConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getLiquidityConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getLiquidityConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getMarketConfigByIndex"`.
 */
export function useConfigStorageGetMarketConfigByIndex<
  TSelectData = ReadContractResult<typeof configStorageABI, "getMarketConfigByIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getMarketConfigByIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getMarketConfigByIndex",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getMarketConfigByIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getMarketConfigs"`.
 */
export function useConfigStorageGetMarketConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "getMarketConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getMarketConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getMarketConfigs",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getMarketConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getMarketConfigsLength"`.
 */
export function useConfigStorageGetMarketConfigsLength<
  TSelectData = ReadContractResult<typeof configStorageABI, "getMarketConfigsLength">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getMarketConfigsLength", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getMarketConfigsLength",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getMarketConfigsLength", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getTradeServiceHooks"`.
 */
export function useConfigStorageGetTradeServiceHooks<
  TSelectData = ReadContractResult<typeof configStorageABI, "getTradeServiceHooks">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getTradeServiceHooks", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getTradeServiceHooks",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getTradeServiceHooks", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getTradingConfig"`.
 */
export function useConfigStorageGetTradingConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getTradingConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getTradingConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getTradingConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getTradingConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"hlp"`.
 */
export function useConfigStorageHlp<TSelectData = ReadContractResult<typeof configStorageABI, "hlp">>(
  config: Omit<UseContractReadConfig<typeof configStorageABI, "hlp", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "hlp", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "hlp",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"hlpAssetIds"`.
 */
export function useConfigStorageHlpAssetIds<TSelectData = ReadContractResult<typeof configStorageABI, "hlpAssetIds">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "hlpAssetIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "hlpAssetIds", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "hlpAssetIds",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"liquidationConfig"`.
 */
export function useConfigStorageLiquidationConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "liquidationConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "liquidationConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "liquidationConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "liquidationConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"liquidityConfig"`.
 */
export function useConfigStorageLiquidityConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "liquidityConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "liquidityConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "liquidityConfig", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "liquidityConfig",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"marketConfigs"`.
 */
export function useConfigStorageMarketConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "marketConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "marketConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "marketConfigs", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "marketConfigs",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"minimumPositionSize"`.
 */
export function useConfigStorageMinimumPositionSize<
  TSelectData = ReadContractResult<typeof configStorageABI, "minimumPositionSize">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "minimumPositionSize", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "minimumPositionSize",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "minimumPositionSize", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"oracle"`.
 */
export function useConfigStorageOracle<TSelectData = ReadContractResult<typeof configStorageABI, "oracle">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "oracle", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "oracle", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "oracle",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"owner"`.
 */
export function useConfigStorageOwner<TSelectData = ReadContractResult<typeof configStorageABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"pnlFactorBPS"`.
 */
export function useConfigStoragePnlFactorBps<TSelectData = ReadContractResult<typeof configStorageABI, "pnlFactorBPS">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "pnlFactorBPS", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "pnlFactorBPS", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "pnlFactorBPS",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"serviceExecutors"`.
 */
export function useConfigStorageServiceExecutors<
  TSelectData = ReadContractResult<typeof configStorageABI, "serviceExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "serviceExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "serviceExecutors",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "serviceExecutors", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"sglp"`.
 */
export function useConfigStorageSglp<TSelectData = ReadContractResult<typeof configStorageABI, "sglp">>(
  config: Omit<UseContractReadConfig<typeof configStorageABI, "sglp", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "sglp", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "sglp",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"swapConfig"`.
 */
export function useConfigStorageSwapConfig<TSelectData = ReadContractResult<typeof configStorageABI, "swapConfig">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "swapConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "swapConfig", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "swapConfig",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"tokenAssetIds"`.
 */
export function useConfigStorageTokenAssetIds<
  TSelectData = ReadContractResult<typeof configStorageABI, "tokenAssetIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "tokenAssetIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "tokenAssetIds", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "tokenAssetIds",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"tradeServiceHooks"`.
 */
export function useConfigStorageTradeServiceHooks<
  TSelectData = ReadContractResult<typeof configStorageABI, "tradeServiceHooks">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "tradeServiceHooks", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "tradeServiceHooks",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "tradeServiceHooks", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"tradingConfig"`.
 */
export function useConfigStorageTradingConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "tradingConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "tradingConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "tradingConfig", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "tradingConfig",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"treasury"`.
 */
export function useConfigStorageTreasury<TSelectData = ReadContractResult<typeof configStorageABI, "treasury">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "treasury", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "treasury", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "treasury",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"validateAcceptedCollateral"`.
 */
export function useConfigStorageValidateAcceptedCollateral<
  TSelectData = ReadContractResult<typeof configStorageABI, "validateAcceptedCollateral">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "validateAcceptedCollateral", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "validateAcceptedCollateral",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "validateAcceptedCollateral", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"validateAcceptedLiquidityToken"`.
 */
export function useConfigStorageValidateAcceptedLiquidityToken<
  TSelectData = ReadContractResult<typeof configStorageABI, "validateAcceptedLiquidityToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "validateAcceptedLiquidityToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "validateAcceptedLiquidityToken",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "validateAcceptedLiquidityToken", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"validateServiceExecutor"`.
 */
export function useConfigStorageValidateServiceExecutor<
  TSelectData = ReadContractResult<typeof configStorageABI, "validateServiceExecutor">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "validateServiceExecutor", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "validateServiceExecutor",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "validateServiceExecutor", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"weth"`.
 */
export function useConfigStorageWeth<TSelectData = ReadContractResult<typeof configStorageABI, "weth">>(
  config: Omit<UseContractReadConfig<typeof configStorageABI, "weth", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "weth", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "weth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__.
 */
export function useConfigStorageWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof configStorageABI, string>["abi"], TFunctionName>
    : UseContractWriteConfig<TMode, typeof configStorageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, TFunctionName>({ abi: configStorageABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addAssetClassConfig"`.
 */
export function useConfigStorageAddAssetClassConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "addAssetClassConfig">["abi"],
        "addAssetClassConfig"
      > & { functionName?: "addAssetClassConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "addAssetClassConfig"> & {
        abi?: never
        functionName?: "addAssetClassConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "addAssetClassConfig">({
    abi: configStorageABI,
    functionName: "addAssetClassConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addMarketConfig"`.
 */
export function useConfigStorageAddMarketConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "addMarketConfig">["abi"],
        "addMarketConfig"
      > & { functionName?: "addMarketConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "addMarketConfig"> & {
        abi?: never
        functionName?: "addMarketConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "addMarketConfig">({
    abi: configStorageABI,
    functionName: "addMarketConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addOrUpdateAcceptedToken"`.
 */
export function useConfigStorageAddOrUpdateAcceptedToken<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "addOrUpdateAcceptedToken">["abi"],
        "addOrUpdateAcceptedToken"
      > & { functionName?: "addOrUpdateAcceptedToken" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "addOrUpdateAcceptedToken"> & {
        abi?: never
        functionName?: "addOrUpdateAcceptedToken"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "addOrUpdateAcceptedToken">({
    abi: configStorageABI,
    functionName: "addOrUpdateAcceptedToken",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"delistMarket"`.
 */
export function useConfigStorageDelistMarket<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "delistMarket">["abi"],
        "delistMarket"
      > & { functionName?: "delistMarket" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "delistMarket"> & {
        abi?: never
        functionName?: "delistMarket"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "delistMarket">({
    abi: configStorageABI,
    functionName: "delistMarket",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"initialize"`.
 */
export function useConfigStorageInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "initialize"> & {
        abi?: never
        functionName?: "initialize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "initialize">({
    abi: configStorageABI,
    functionName: "initialize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"removeAcceptedToken"`.
 */
export function useConfigStorageRemoveAcceptedToken<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "removeAcceptedToken">["abi"],
        "removeAcceptedToken"
      > & { functionName?: "removeAcceptedToken" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "removeAcceptedToken"> & {
        abi?: never
        functionName?: "removeAcceptedToken"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "removeAcceptedToken">({
    abi: configStorageABI,
    functionName: "removeAcceptedToken",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useConfigStorageRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "renounceOwnership">["abi"],
        "renounceOwnership"
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "renounceOwnership"> & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "renounceOwnership">({
    abi: configStorageABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetClassConfigByIndex"`.
 */
export function useConfigStorageSetAssetClassConfigByIndex<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setAssetClassConfigByIndex">["abi"],
        "setAssetClassConfigByIndex"
      > & { functionName?: "setAssetClassConfigByIndex" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setAssetClassConfigByIndex"> & {
        abi?: never
        functionName?: "setAssetClassConfigByIndex"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setAssetClassConfigByIndex">({
    abi: configStorageABI,
    functionName: "setAssetClassConfigByIndex",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetConfig"`.
 */
export function useConfigStorageSetAssetConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setAssetConfig">["abi"],
        "setAssetConfig"
      > & { functionName?: "setAssetConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setAssetConfig"> & {
        abi?: never
        functionName?: "setAssetConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setAssetConfig">({
    abi: configStorageABI,
    functionName: "setAssetConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetConfigs"`.
 */
export function useConfigStorageSetAssetConfigs<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setAssetConfigs">["abi"],
        "setAssetConfigs"
      > & { functionName?: "setAssetConfigs" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setAssetConfigs"> & {
        abi?: never
        functionName?: "setAssetConfigs"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setAssetConfigs">({
    abi: configStorageABI,
    functionName: "setAssetConfigs",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCalculator"`.
 */
export function useConfigStorageSetCalculator<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setCalculator">["abi"],
        "setCalculator"
      > & { functionName?: "setCalculator" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setCalculator"> & {
        abi?: never
        functionName?: "setCalculator"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setCalculator">({
    abi: configStorageABI,
    functionName: "setCalculator",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCollateralTokenConfig"`.
 */
export function useConfigStorageSetCollateralTokenConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setCollateralTokenConfig">["abi"],
        "setCollateralTokenConfig"
      > & { functionName?: "setCollateralTokenConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setCollateralTokenConfig"> & {
        abi?: never
        functionName?: "setCollateralTokenConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setCollateralTokenConfig">({
    abi: configStorageABI,
    functionName: "setCollateralTokenConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCollateralTokenConfigs"`.
 */
export function useConfigStorageSetCollateralTokenConfigs<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setCollateralTokenConfigs">["abi"],
        "setCollateralTokenConfigs"
      > & { functionName?: "setCollateralTokenConfigs" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setCollateralTokenConfigs"> & {
        abi?: never
        functionName?: "setCollateralTokenConfigs"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setCollateralTokenConfigs">({
    abi: configStorageABI,
    functionName: "setCollateralTokenConfigs",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setConfigExecutor"`.
 */
export function useConfigStorageSetConfigExecutor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setConfigExecutor">["abi"],
        "setConfigExecutor"
      > & { functionName?: "setConfigExecutor" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setConfigExecutor"> & {
        abi?: never
        functionName?: "setConfigExecutor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setConfigExecutor">({
    abi: configStorageABI,
    functionName: "setConfigExecutor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setDynamicEnabled"`.
 */
export function useConfigStorageSetDynamicEnabled<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setDynamicEnabled">["abi"],
        "setDynamicEnabled"
      > & { functionName?: "setDynamicEnabled" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setDynamicEnabled"> & {
        abi?: never
        functionName?: "setDynamicEnabled"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setDynamicEnabled">({
    abi: configStorageABI,
    functionName: "setDynamicEnabled",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setHLP"`.
 */
export function useConfigStorageSetHlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof configStorageABI, "setHLP">["abi"], "setHLP"> & {
        functionName?: "setHLP"
      }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setHLP"> & {
        abi?: never
        functionName?: "setHLP"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setHLP">({
    abi: configStorageABI,
    functionName: "setHLP",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setHlpTokenConfig"`.
 */
export function useConfigStorageSetHlpTokenConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setHlpTokenConfig">["abi"],
        "setHlpTokenConfig"
      > & { functionName?: "setHlpTokenConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setHlpTokenConfig"> & {
        abi?: never
        functionName?: "setHlpTokenConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setHlpTokenConfig">({
    abi: configStorageABI,
    functionName: "setHlpTokenConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidationConfig"`.
 */
export function useConfigStorageSetLiquidationConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setLiquidationConfig">["abi"],
        "setLiquidationConfig"
      > & { functionName?: "setLiquidationConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setLiquidationConfig"> & {
        abi?: never
        functionName?: "setLiquidationConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setLiquidationConfig">({
    abi: configStorageABI,
    functionName: "setLiquidationConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidityConfig"`.
 */
export function useConfigStorageSetLiquidityConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setLiquidityConfig">["abi"],
        "setLiquidityConfig"
      > & { functionName?: "setLiquidityConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setLiquidityConfig"> & {
        abi?: never
        functionName?: "setLiquidityConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setLiquidityConfig">({
    abi: configStorageABI,
    functionName: "setLiquidityConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidityEnabled"`.
 */
export function useConfigStorageSetLiquidityEnabled<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setLiquidityEnabled">["abi"],
        "setLiquidityEnabled"
      > & { functionName?: "setLiquidityEnabled" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setLiquidityEnabled"> & {
        abi?: never
        functionName?: "setLiquidityEnabled"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setLiquidityEnabled">({
    abi: configStorageABI,
    functionName: "setLiquidityEnabled",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setMarketConfig"`.
 */
export function useConfigStorageSetMarketConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setMarketConfig">["abi"],
        "setMarketConfig"
      > & { functionName?: "setMarketConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setMarketConfig"> & {
        abi?: never
        functionName?: "setMarketConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setMarketConfig">({
    abi: configStorageABI,
    functionName: "setMarketConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setMinimumPositionSize"`.
 */
export function useConfigStorageSetMinimumPositionSize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setMinimumPositionSize">["abi"],
        "setMinimumPositionSize"
      > & { functionName?: "setMinimumPositionSize" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setMinimumPositionSize"> & {
        abi?: never
        functionName?: "setMinimumPositionSize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setMinimumPositionSize">({
    abi: configStorageABI,
    functionName: "setMinimumPositionSize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setOracle"`.
 */
export function useConfigStorageSetOracle<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setOracle">["abi"],
        "setOracle"
      > & { functionName?: "setOracle" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setOracle"> & {
        abi?: never
        functionName?: "setOracle"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setOracle">({
    abi: configStorageABI,
    functionName: "setOracle",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPnlFactor"`.
 */
export function useConfigStorageSetPnlFactor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setPnlFactor">["abi"],
        "setPnlFactor"
      > & { functionName?: "setPnlFactor" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setPnlFactor"> & {
        abi?: never
        functionName?: "setPnlFactor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setPnlFactor">({
    abi: configStorageABI,
    functionName: "setPnlFactor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setSGlp"`.
 */
export function useConfigStorageSetSGlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setSGlp">["abi"],
        "setSGlp"
      > & { functionName?: "setSGlp" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setSGlp"> & {
        abi?: never
        functionName?: "setSGlp"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setSGlp">({
    abi: configStorageABI,
    functionName: "setSGlp",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setServiceExecutor"`.
 */
export function useConfigStorageSetServiceExecutor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setServiceExecutor">["abi"],
        "setServiceExecutor"
      > & { functionName?: "setServiceExecutor" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setServiceExecutor"> & {
        abi?: never
        functionName?: "setServiceExecutor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setServiceExecutor">({
    abi: configStorageABI,
    functionName: "setServiceExecutor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function useConfigStorageSetServiceExecutors<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setServiceExecutors">["abi"],
        "setServiceExecutors"
      > & { functionName?: "setServiceExecutors" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setServiceExecutors"> & {
        abi?: never
        functionName?: "setServiceExecutors"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setServiceExecutors">({
    abi: configStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setSwapConfig"`.
 */
export function useConfigStorageSetSwapConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setSwapConfig">["abi"],
        "setSwapConfig"
      > & { functionName?: "setSwapConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setSwapConfig"> & {
        abi?: never
        functionName?: "setSwapConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setSwapConfig">({
    abi: configStorageABI,
    functionName: "setSwapConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setTradeServiceHooks"`.
 */
export function useConfigStorageSetTradeServiceHooks<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setTradeServiceHooks">["abi"],
        "setTradeServiceHooks"
      > & { functionName?: "setTradeServiceHooks" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setTradeServiceHooks"> & {
        abi?: never
        functionName?: "setTradeServiceHooks"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setTradeServiceHooks">({
    abi: configStorageABI,
    functionName: "setTradeServiceHooks",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setTradingConfig"`.
 */
export function useConfigStorageSetTradingConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setTradingConfig">["abi"],
        "setTradingConfig"
      > & { functionName?: "setTradingConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setTradingConfig"> & {
        abi?: never
        functionName?: "setTradingConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setTradingConfig">({
    abi: configStorageABI,
    functionName: "setTradingConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setWeth"`.
 */
export function useConfigStorageSetWeth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setWeth">["abi"],
        "setWeth"
      > & { functionName?: "setWeth" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setWeth"> & {
        abi?: never
        functionName?: "setWeth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setWeth">({
    abi: configStorageABI,
    functionName: "setWeth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useConfigStorageTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "transferOwnership">({
    abi: configStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__.
 */
export function usePrepareConfigStorageWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof configStorageABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: configStorageABI, ...config } as UsePrepareContractWriteConfig<
    typeof configStorageABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addAssetClassConfig"`.
 */
export function usePrepareConfigStorageAddAssetClassConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "addAssetClassConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "addAssetClassConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "addAssetClassConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addMarketConfig"`.
 */
export function usePrepareConfigStorageAddMarketConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "addMarketConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "addMarketConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "addMarketConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addOrUpdateAcceptedToken"`.
 */
export function usePrepareConfigStorageAddOrUpdateAcceptedToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "addOrUpdateAcceptedToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "addOrUpdateAcceptedToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "addOrUpdateAcceptedToken">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"delistMarket"`.
 */
export function usePrepareConfigStorageDelistMarket(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "delistMarket">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "delistMarket",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "delistMarket">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareConfigStorageInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "initialize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"removeAcceptedToken"`.
 */
export function usePrepareConfigStorageRemoveAcceptedToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "removeAcceptedToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "removeAcceptedToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "removeAcceptedToken">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareConfigStorageRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetClassConfigByIndex"`.
 */
export function usePrepareConfigStorageSetAssetClassConfigByIndex(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetClassConfigByIndex">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setAssetClassConfigByIndex",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetClassConfigByIndex">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetConfig"`.
 */
export function usePrepareConfigStorageSetAssetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setAssetConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetConfigs"`.
 */
export function usePrepareConfigStorageSetAssetConfigs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetConfigs">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setAssetConfigs",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetConfigs">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCalculator"`.
 */
export function usePrepareConfigStorageSetCalculator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setCalculator">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setCalculator",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setCalculator">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCollateralTokenConfig"`.
 */
export function usePrepareConfigStorageSetCollateralTokenConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setCollateralTokenConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setCollateralTokenConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setCollateralTokenConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCollateralTokenConfigs"`.
 */
export function usePrepareConfigStorageSetCollateralTokenConfigs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setCollateralTokenConfigs">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setCollateralTokenConfigs",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setCollateralTokenConfigs">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setConfigExecutor"`.
 */
export function usePrepareConfigStorageSetConfigExecutor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setConfigExecutor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setConfigExecutor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setConfigExecutor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setDynamicEnabled"`.
 */
export function usePrepareConfigStorageSetDynamicEnabled(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setDynamicEnabled">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setDynamicEnabled",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setDynamicEnabled">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setHLP"`.
 */
export function usePrepareConfigStorageSetHlp(
  config: Omit<UsePrepareContractWriteConfig<typeof configStorageABI, "setHLP">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setHLP",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setHLP">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setHlpTokenConfig"`.
 */
export function usePrepareConfigStorageSetHlpTokenConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setHlpTokenConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setHlpTokenConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setHlpTokenConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidationConfig"`.
 */
export function usePrepareConfigStorageSetLiquidationConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidationConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setLiquidationConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidationConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidityConfig"`.
 */
export function usePrepareConfigStorageSetLiquidityConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidityConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setLiquidityConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidityConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidityEnabled"`.
 */
export function usePrepareConfigStorageSetLiquidityEnabled(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidityEnabled">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setLiquidityEnabled",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidityEnabled">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setMarketConfig"`.
 */
export function usePrepareConfigStorageSetMarketConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setMarketConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setMarketConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setMarketConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setMinimumPositionSize"`.
 */
export function usePrepareConfigStorageSetMinimumPositionSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setMinimumPositionSize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setMinimumPositionSize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setMinimumPositionSize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setOracle"`.
 */
export function usePrepareConfigStorageSetOracle(
  config: Omit<UsePrepareContractWriteConfig<typeof configStorageABI, "setOracle">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setOracle",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setOracle">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPnlFactor"`.
 */
export function usePrepareConfigStorageSetPnlFactor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setPnlFactor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setPnlFactor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setPnlFactor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setSGlp"`.
 */
export function usePrepareConfigStorageSetSGlp(
  config: Omit<UsePrepareContractWriteConfig<typeof configStorageABI, "setSGlp">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setSGlp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setSGlp">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setServiceExecutor"`.
 */
export function usePrepareConfigStorageSetServiceExecutor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setServiceExecutor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setServiceExecutor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setServiceExecutor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function usePrepareConfigStorageSetServiceExecutors(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setServiceExecutors">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setServiceExecutors">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setSwapConfig"`.
 */
export function usePrepareConfigStorageSetSwapConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setSwapConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setSwapConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setSwapConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setTradeServiceHooks"`.
 */
export function usePrepareConfigStorageSetTradeServiceHooks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setTradeServiceHooks">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setTradeServiceHooks",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setTradeServiceHooks">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setTradingConfig"`.
 */
export function usePrepareConfigStorageSetTradingConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setTradingConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setTradingConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setTradingConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setWeth"`.
 */
export function usePrepareConfigStorageSetWeth(
  config: Omit<UsePrepareContractWriteConfig<typeof configStorageABI, "setWeth">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setWeth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setWeth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareConfigStorageTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "transferOwnership">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__.
 */
export function useConfigStorageEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof configStorageABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, ...config } as UseContractEventConfig<
    typeof configStorageABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"Initialized"`.
 */
export function useConfigStorageInitializedEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "Initialized">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "Initialized", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "Initialized"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogAddAssetClassConfig"`.
 */
export function useConfigStorageLogAddAssetClassConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogAddAssetClassConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogAddAssetClassConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogAddAssetClassConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogAddMarketConfig"`.
 */
export function useConfigStorageLogAddMarketConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogAddMarketConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogAddMarketConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogAddMarketConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogAddOrUpdateHLPTokenConfigs"`.
 */
export function useConfigStorageLogAddOrUpdateHlpTokenConfigsEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogAddOrUpdateHLPTokenConfigs">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogAddOrUpdateHLPTokenConfigs",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogAddOrUpdateHLPTokenConfigs">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogDelistMarket"`.
 */
export function useConfigStorageLogDelistMarketEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogDelistMarket">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogDelistMarket", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogDelistMarket"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogRemoveUnderlying"`.
 */
export function useConfigStorageLogRemoveUnderlyingEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogRemoveUnderlying">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogRemoveUnderlying",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogRemoveUnderlying">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetAssetClassConfigByIndex"`.
 */
export function useConfigStorageLogSetAssetClassConfigByIndexEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetAssetClassConfigByIndex">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetAssetClassConfigByIndex",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetAssetClassConfigByIndex">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetAssetConfig"`.
 */
export function useConfigStorageLogSetAssetConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetAssetConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetAssetConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetAssetConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetCalculator"`.
 */
export function useConfigStorageLogSetCalculatorEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetCalculator">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetCalculator", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetCalculator"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetCollateralTokenConfig"`.
 */
export function useConfigStorageLogSetCollateralTokenConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetCollateralTokenConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetCollateralTokenConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetCollateralTokenConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetConfigExecutor"`.
 */
export function useConfigStorageLogSetConfigExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetConfigExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetConfigExecutor",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetConfigExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetDynamicEnabled"`.
 */
export function useConfigStorageLogSetDynamicEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetDynamicEnabled">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetDynamicEnabled",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetDynamicEnabled">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetHLP"`.
 */
export function useConfigStorageLogSetHlpEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetHLP">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetHLP", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetHLP"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetHlpTokenConfig"`.
 */
export function useConfigStorageLogSetHlpTokenConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetHlpTokenConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetHlpTokenConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetHlpTokenConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetLiquidationConfig"`.
 */
export function useConfigStorageLogSetLiquidationConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetLiquidationConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetLiquidationConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetLiquidationConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetLiquidityConfig"`.
 */
export function useConfigStorageLogSetLiquidityConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetLiquidityConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetLiquidityConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetLiquidityConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetLiquidityEnabled"`.
 */
export function useConfigStorageLogSetLiquidityEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetLiquidityEnabled">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetLiquidityEnabled",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetLiquidityEnabled">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetMarketConfig"`.
 */
export function useConfigStorageLogSetMarketConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetMarketConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetMarketConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetMarketConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetMinimumPositionSize"`.
 */
export function useConfigStorageLogSetMinimumPositionSizeEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetMinimumPositionSize">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetMinimumPositionSize",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetMinimumPositionSize">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetOracle"`.
 */
export function useConfigStorageLogSetOracleEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetOracle">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetOracle", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetOracle"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetPnlFactor"`.
 */
export function useConfigStorageLogSetPnlFactorEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetPnlFactor">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetPnlFactor", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetPnlFactor"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetServiceExecutor"`.
 */
export function useConfigStorageLogSetServiceExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetServiceExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetServiceExecutor",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetServiceExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetSwapConfig"`.
 */
export function useConfigStorageLogSetSwapConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetSwapConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetSwapConfig", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetSwapConfig"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetToken"`.
 */
export function useConfigStorageLogSetTokenEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetToken">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetToken", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetToken"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetTradeServiceHooks"`.
 */
export function useConfigStorageLogSetTradeServiceHooksEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetTradeServiceHooks">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetTradeServiceHooks",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetTradeServiceHooks">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetTradingConfig"`.
 */
export function useConfigStorageLogSetTradingConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetTradingConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetTradingConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetTradingConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useConfigStorageOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function useCrossMarginHandler(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: crossMarginHandlerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function useCrossMarginHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof crossMarginHandlerABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: crossMarginHandlerABI, ...config } as UseContractReadConfig<
    typeof crossMarginHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"crossMarginService"`.
 */
export function useCrossMarginHandlerCrossMarginService<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "crossMarginService">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "crossMarginService", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "crossMarginService",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "crossMarginService", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"getActiveWithdrawOrders"`.
 */
export function useCrossMarginHandlerGetActiveWithdrawOrders<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "getActiveWithdrawOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "getActiveWithdrawOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "getActiveWithdrawOrders",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "getActiveWithdrawOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"getExecutedWithdrawOrders"`.
 */
export function useCrossMarginHandlerGetExecutedWithdrawOrders<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "getExecutedWithdrawOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "getExecutedWithdrawOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "getExecutedWithdrawOrders",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "getExecutedWithdrawOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"getWithdrawOrderLength"`.
 */
export function useCrossMarginHandlerGetWithdrawOrderLength<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "getWithdrawOrderLength">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "getWithdrawOrderLength", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "getWithdrawOrderLength",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "getWithdrawOrderLength", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"getWithdrawOrders"`.
 */
export function useCrossMarginHandlerGetWithdrawOrders<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "getWithdrawOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "getWithdrawOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "getWithdrawOrders",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "getWithdrawOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"maxExecutionChuck"`.
 */
export function useCrossMarginHandlerMaxExecutionChuck<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "maxExecutionChuck">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "maxExecutionChuck", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "maxExecutionChuck",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "maxExecutionChuck", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"minExecutionOrderFee"`.
 */
export function useCrossMarginHandlerMinExecutionOrderFee<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "minExecutionOrderFee">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "minExecutionOrderFee", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "minExecutionOrderFee",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "minExecutionOrderFee", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"nextExecutionOrderIndex"`.
 */
export function useCrossMarginHandlerNextExecutionOrderIndex<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "nextExecutionOrderIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "nextExecutionOrderIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "nextExecutionOrderIndex",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "nextExecutionOrderIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"orderExecutors"`.
 */
export function useCrossMarginHandlerOrderExecutors<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "orderExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "orderExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "orderExecutors",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "orderExecutors", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"owner"`.
 */
export function useCrossMarginHandlerOwner<TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: crossMarginHandlerABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof crossMarginHandlerABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"pyth"`.
 */
export function useCrossMarginHandlerPyth<TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "pyth">>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "pyth", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: crossMarginHandlerABI, functionName: "pyth", ...config } as UseContractReadConfig<
    typeof crossMarginHandlerABI,
    "pyth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"subAccountExecutedWithdrawOrders"`.
 */
export function useCrossMarginHandlerSubAccountExecutedWithdrawOrders<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "subAccountExecutedWithdrawOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "subAccountExecutedWithdrawOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "subAccountExecutedWithdrawOrders",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "subAccountExecutedWithdrawOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"withdrawOrders"`.
 */
export function useCrossMarginHandlerWithdrawOrders<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "withdrawOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "withdrawOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "withdrawOrders",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "withdrawOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function useCrossMarginHandlerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, TFunctionName>({
    abi: crossMarginHandlerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"cancelWithdrawOrder"`.
 */
export function useCrossMarginHandlerCancelWithdrawOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "cancelWithdrawOrder">["abi"],
        "cancelWithdrawOrder"
      > & { functionName?: "cancelWithdrawOrder" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "cancelWithdrawOrder"> & {
        abi?: never
        functionName?: "cancelWithdrawOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "cancelWithdrawOrder">({
    abi: crossMarginHandlerABI,
    functionName: "cancelWithdrawOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"convertSGlpCollateral"`.
 */
export function useCrossMarginHandlerConvertSGlpCollateral<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "convertSGlpCollateral">["abi"],
        "convertSGlpCollateral"
      > & { functionName?: "convertSGlpCollateral" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "convertSGlpCollateral"> & {
        abi?: never
        functionName?: "convertSGlpCollateral"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "convertSGlpCollateral">({
    abi: crossMarginHandlerABI,
    functionName: "convertSGlpCollateral",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"createWithdrawCollateralOrder"`.
 */
export function useCrossMarginHandlerCreateWithdrawCollateralOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "createWithdrawCollateralOrder">["abi"],
        "createWithdrawCollateralOrder"
      > & { functionName?: "createWithdrawCollateralOrder" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "createWithdrawCollateralOrder"> & {
        abi?: never
        functionName?: "createWithdrawCollateralOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "createWithdrawCollateralOrder">({
    abi: crossMarginHandlerABI,
    functionName: "createWithdrawCollateralOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useCrossMarginHandlerDepositCollateral<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "depositCollateral">["abi"],
        "depositCollateral"
      > & { functionName?: "depositCollateral" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "depositCollateral"> & {
        abi?: never
        functionName?: "depositCollateral"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "depositCollateral">({
    abi: crossMarginHandlerABI,
    functionName: "depositCollateral",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"executeOrder"`.
 */
export function useCrossMarginHandlerExecuteOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "executeOrder">["abi"],
        "executeOrder"
      > & { functionName?: "executeOrder" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "executeOrder"> & {
        abi?: never
        functionName?: "executeOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "executeOrder">({
    abi: crossMarginHandlerABI,
    functionName: "executeOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"executeWithdrawOrder"`.
 */
export function useCrossMarginHandlerExecuteWithdrawOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "executeWithdrawOrder">["abi"],
        "executeWithdrawOrder"
      > & { functionName?: "executeWithdrawOrder" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "executeWithdrawOrder"> & {
        abi?: never
        functionName?: "executeWithdrawOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "executeWithdrawOrder">({
    abi: crossMarginHandlerABI,
    functionName: "executeWithdrawOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"initialize"`.
 */
export function useCrossMarginHandlerInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "initialize"> & {
        abi?: never
        functionName?: "initialize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "initialize">({
    abi: crossMarginHandlerABI,
    functionName: "initialize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useCrossMarginHandlerRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "renounceOwnership">["abi"],
        "renounceOwnership"
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "renounceOwnership"> & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "renounceOwnership">({
    abi: crossMarginHandlerABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setCrossMarginService"`.
 */
export function useCrossMarginHandlerSetCrossMarginService<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "setCrossMarginService">["abi"],
        "setCrossMarginService"
      > & { functionName?: "setCrossMarginService" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "setCrossMarginService"> & {
        abi?: never
        functionName?: "setCrossMarginService"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "setCrossMarginService">({
    abi: crossMarginHandlerABI,
    functionName: "setCrossMarginService",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setMaxExecutionChuck"`.
 */
export function useCrossMarginHandlerSetMaxExecutionChuck<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "setMaxExecutionChuck">["abi"],
        "setMaxExecutionChuck"
      > & { functionName?: "setMaxExecutionChuck" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "setMaxExecutionChuck"> & {
        abi?: never
        functionName?: "setMaxExecutionChuck"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "setMaxExecutionChuck">({
    abi: crossMarginHandlerABI,
    functionName: "setMaxExecutionChuck",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function useCrossMarginHandlerSetMinExecutionFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "setMinExecutionFee">["abi"],
        "setMinExecutionFee"
      > & { functionName?: "setMinExecutionFee" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "setMinExecutionFee"> & {
        abi?: never
        functionName?: "setMinExecutionFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "setMinExecutionFee">({
    abi: crossMarginHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function useCrossMarginHandlerSetOrderExecutor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "setOrderExecutor">["abi"],
        "setOrderExecutor"
      > & { functionName?: "setOrderExecutor" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "setOrderExecutor"> & {
        abi?: never
        functionName?: "setOrderExecutor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "setOrderExecutor">({
    abi: crossMarginHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function useCrossMarginHandlerSetPyth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "setPyth">["abi"],
        "setPyth"
      > & { functionName?: "setPyth" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "setPyth"> & {
        abi?: never
        functionName?: "setPyth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "setPyth">({
    abi: crossMarginHandlerABI,
    functionName: "setPyth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCrossMarginHandlerTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "transferOwnership">({
    abi: crossMarginHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function usePrepareCrossMarginHandlerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: crossMarginHandlerABI, ...config } as UsePrepareContractWriteConfig<
    typeof crossMarginHandlerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"cancelWithdrawOrder"`.
 */
export function usePrepareCrossMarginHandlerCancelWithdrawOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "cancelWithdrawOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "cancelWithdrawOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "cancelWithdrawOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"convertSGlpCollateral"`.
 */
export function usePrepareCrossMarginHandlerConvertSGlpCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "convertSGlpCollateral">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "convertSGlpCollateral",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "convertSGlpCollateral">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"createWithdrawCollateralOrder"`.
 */
export function usePrepareCrossMarginHandlerCreateWithdrawCollateralOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "createWithdrawCollateralOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "createWithdrawCollateralOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "createWithdrawCollateralOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareCrossMarginHandlerDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "depositCollateral">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "depositCollateral",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "depositCollateral">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"executeOrder"`.
 */
export function usePrepareCrossMarginHandlerExecuteOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "executeOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "executeOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "executeOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"executeWithdrawOrder"`.
 */
export function usePrepareCrossMarginHandlerExecuteWithdrawOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "executeWithdrawOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "executeWithdrawOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "executeWithdrawOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareCrossMarginHandlerInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "initialize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareCrossMarginHandlerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setCrossMarginService"`.
 */
export function usePrepareCrossMarginHandlerSetCrossMarginService(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setCrossMarginService">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "setCrossMarginService",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setCrossMarginService">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setMaxExecutionChuck"`.
 */
export function usePrepareCrossMarginHandlerSetMaxExecutionChuck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setMaxExecutionChuck">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "setMaxExecutionChuck",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setMaxExecutionChuck">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function usePrepareCrossMarginHandlerSetMinExecutionFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setMinExecutionFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setMinExecutionFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function usePrepareCrossMarginHandlerSetOrderExecutor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setOrderExecutor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setOrderExecutor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function usePrepareCrossMarginHandlerSetPyth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setPyth">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "setPyth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setPyth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCrossMarginHandlerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "transferOwnership">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function useCrossMarginHandlerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof crossMarginHandlerABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: crossMarginHandlerABI, ...config } as UseContractEventConfig<
    typeof crossMarginHandlerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"Initialized"`.
 */
export function useCrossMarginHandlerInitializedEvent(
  config: Omit<UseContractEventConfig<typeof crossMarginHandlerABI, "Initialized">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: crossMarginHandlerABI, eventName: "Initialized", ...config } as UseContractEventConfig<
    typeof crossMarginHandlerABI,
    "Initialized"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogCancelWithdrawOrder"`.
 */
export function useCrossMarginHandlerLogCancelWithdrawOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogCancelWithdrawOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogCancelWithdrawOrder",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogCancelWithdrawOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogCreateWithdrawOrder"`.
 */
export function useCrossMarginHandlerLogCreateWithdrawOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogCreateWithdrawOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogCreateWithdrawOrder",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogCreateWithdrawOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogDepositCollateral"`.
 */
export function useCrossMarginHandlerLogDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogDepositCollateral">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogDepositCollateral",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogDepositCollateral">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogExecuteWithdrawOrder"`.
 */
export function useCrossMarginHandlerLogExecuteWithdrawOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogExecuteWithdrawOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogExecuteWithdrawOrder",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogExecuteWithdrawOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogMaxExecutionChuck"`.
 */
export function useCrossMarginHandlerLogMaxExecutionChuckEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogMaxExecutionChuck">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogMaxExecutionChuck",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogMaxExecutionChuck">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogSetCrossMarginService"`.
 */
export function useCrossMarginHandlerLogSetCrossMarginServiceEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetCrossMarginService">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogSetCrossMarginService",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetCrossMarginService">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogSetMinExecutionFee"`.
 */
export function useCrossMarginHandlerLogSetMinExecutionFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetMinExecutionFee">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogSetMinExecutionFee",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetMinExecutionFee">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogSetOrderExecutor"`.
 */
export function useCrossMarginHandlerLogSetOrderExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetOrderExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogSetOrderExecutor",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetOrderExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogSetPyth"`.
 */
export function useCrossMarginHandlerLogSetPythEvent(
  config: Omit<UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetPyth">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: crossMarginHandlerABI, eventName: "LogSetPyth", ...config } as UseContractEventConfig<
    typeof crossMarginHandlerABI,
    "LogSetPyth"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogWithdrawCollateral"`.
 */
export function useCrossMarginHandlerLogWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogWithdrawCollateral">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogWithdrawCollateral",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogWithdrawCollateral">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCrossMarginHandlerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iGmxGlpManagerABI}__.
 */
export function useIGmxGlpManager(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: iGmxGlpManagerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGmxGlpManagerABI}__.
 */
export function useIGmxGlpManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iGmxGlpManagerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof iGmxGlpManagerABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: iGmxGlpManagerABI, ...config } as UseContractReadConfig<
    typeof iGmxGlpManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGmxGlpManagerABI}__ and `functionName` set to `"getAum"`.
 */
export function useIGmxGlpManagerGetAum<TSelectData = ReadContractResult<typeof iGmxGlpManagerABI, "getAum">>(
  config: Omit<
    UseContractReadConfig<typeof iGmxGlpManagerABI, "getAum", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: iGmxGlpManagerABI, functionName: "getAum", ...config } as UseContractReadConfig<
    typeof iGmxGlpManagerABI,
    "getAum",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGmxGlpManagerABI}__ and `functionName` set to `"getAumInUsdg"`.
 */
export function useIGmxGlpManagerGetAumInUsdg<
  TSelectData = ReadContractResult<typeof iGmxGlpManagerABI, "getAumInUsdg">,
>(
  config: Omit<
    UseContractReadConfig<typeof iGmxGlpManagerABI, "getAumInUsdg", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: iGmxGlpManagerABI, functionName: "getAumInUsdg", ...config } as UseContractReadConfig<
    typeof iGmxGlpManagerABI,
    "getAumInUsdg",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGmxGlpManagerABI}__ and `functionName` set to `"getAums"`.
 */
export function useIGmxGlpManagerGetAums<TSelectData = ReadContractResult<typeof iGmxGlpManagerABI, "getAums">>(
  config: Omit<
    UseContractReadConfig<typeof iGmxGlpManagerABI, "getAums", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: iGmxGlpManagerABI, functionName: "getAums", ...config } as UseContractReadConfig<
    typeof iGmxGlpManagerABI,
    "getAums",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGmxGlpManagerABI}__.
 */
export function useIGmxGlpManagerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof iGmxGlpManagerABI, string>["abi"], TFunctionName>
    : UseContractWriteConfig<TMode, typeof iGmxGlpManagerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGmxGlpManagerABI, TFunctionName>({ abi: iGmxGlpManagerABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGmxGlpManagerABI}__ and `functionName` set to `"addLiquidityForAccount"`.
 */
export function useIGmxGlpManagerAddLiquidityForAccount<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iGmxGlpManagerABI, "addLiquidityForAccount">["abi"],
        "addLiquidityForAccount"
      > & { functionName?: "addLiquidityForAccount" }
    : UseContractWriteConfig<TMode, typeof iGmxGlpManagerABI, "addLiquidityForAccount"> & {
        abi?: never
        functionName?: "addLiquidityForAccount"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iGmxGlpManagerABI, "addLiquidityForAccount">({
    abi: iGmxGlpManagerABI,
    functionName: "addLiquidityForAccount",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGmxGlpManagerABI}__.
 */
export function usePrepareIGmxGlpManagerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iGmxGlpManagerABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: iGmxGlpManagerABI, ...config } as UsePrepareContractWriteConfig<
    typeof iGmxGlpManagerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGmxGlpManagerABI}__ and `functionName` set to `"addLiquidityForAccount"`.
 */
export function usePrepareIGmxGlpManagerAddLiquidityForAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGmxGlpManagerABI, "addLiquidityForAccount">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGmxGlpManagerABI,
    functionName: "addLiquidityForAccount",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGmxGlpManagerABI, "addLiquidityForAccount">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function useLimitTradeHandler(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: limitTradeHandlerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function useLimitTradeHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof limitTradeHandlerABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: limitTradeHandlerABI, ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"activeLimitOrdersCount"`.
 */
export function useLimitTradeHandlerActiveLimitOrdersCount<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "activeLimitOrdersCount">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "activeLimitOrdersCount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "activeLimitOrdersCount",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "activeLimitOrdersCount", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"activeMarketOrdersCount"`.
 */
export function useLimitTradeHandlerActiveMarketOrdersCount<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "activeMarketOrdersCount">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "activeMarketOrdersCount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "activeMarketOrdersCount",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "activeMarketOrdersCount", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"activeOrdersCount"`.
 */
export function useLimitTradeHandlerActiveOrdersCount<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "activeOrdersCount">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "activeOrdersCount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "activeOrdersCount",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "activeOrdersCount", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"delegations"`.
 */
export function useLimitTradeHandlerDelegations<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "delegations">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "delegations", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: limitTradeHandlerABI, functionName: "delegations", ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    "delegations",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"getAllActiveOrders"`.
 */
export function useLimitTradeHandlerGetAllActiveOrders<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "getAllActiveOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "getAllActiveOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "getAllActiveOrders",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "getAllActiveOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"getAllActiveOrdersBySubAccount"`.
 */
export function useLimitTradeHandlerGetAllActiveOrdersBySubAccount<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "getAllActiveOrdersBySubAccount">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "getAllActiveOrdersBySubAccount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "getAllActiveOrdersBySubAccount",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "getAllActiveOrdersBySubAccount", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"getLimitActiveOrders"`.
 */
export function useLimitTradeHandlerGetLimitActiveOrders<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "getLimitActiveOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "getLimitActiveOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "getLimitActiveOrders",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "getLimitActiveOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"getLimitActiveOrdersBySubAccount"`.
 */
export function useLimitTradeHandlerGetLimitActiveOrdersBySubAccount<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "getLimitActiveOrdersBySubAccount">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "getLimitActiveOrdersBySubAccount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "getLimitActiveOrdersBySubAccount",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "getLimitActiveOrdersBySubAccount", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"getMarketActiveOrders"`.
 */
export function useLimitTradeHandlerGetMarketActiveOrders<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "getMarketActiveOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "getMarketActiveOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "getMarketActiveOrders",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "getMarketActiveOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"getMarketActiveOrdersBySubAccount"`.
 */
export function useLimitTradeHandlerGetMarketActiveOrdersBySubAccount<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "getMarketActiveOrdersBySubAccount">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "getMarketActiveOrdersBySubAccount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "getMarketActiveOrdersBySubAccount",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "getMarketActiveOrdersBySubAccount", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"isAllowAllExecutor"`.
 */
export function useLimitTradeHandlerIsAllowAllExecutor<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "isAllowAllExecutor">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "isAllowAllExecutor", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "isAllowAllExecutor",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "isAllowAllExecutor", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"isGuaranteeLimitPrice"`.
 */
export function useLimitTradeHandlerIsGuaranteeLimitPrice<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "isGuaranteeLimitPrice">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "isGuaranteeLimitPrice", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "isGuaranteeLimitPrice",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "isGuaranteeLimitPrice", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"limitOrders"`.
 */
export function useLimitTradeHandlerLimitOrders<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "limitOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "limitOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: limitTradeHandlerABI, functionName: "limitOrders", ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    "limitOrders",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"limitOrdersIndex"`.
 */
export function useLimitTradeHandlerLimitOrdersIndex<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "limitOrdersIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "limitOrdersIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "limitOrdersIndex",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "limitOrdersIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"minExecutionFee"`.
 */
export function useLimitTradeHandlerMinExecutionFee<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "minExecutionFee">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "minExecutionFee", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "minExecutionFee",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "minExecutionFee", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"minExecutionTimestamp"`.
 */
export function useLimitTradeHandlerMinExecutionTimestamp<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "minExecutionTimestamp">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "minExecutionTimestamp", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "minExecutionTimestamp",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "minExecutionTimestamp", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"orderExecutors"`.
 */
export function useLimitTradeHandlerOrderExecutors<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "orderExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "orderExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "orderExecutors",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "orderExecutors", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"owner"`.
 */
export function useLimitTradeHandlerOwner<TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: limitTradeHandlerABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"pyth"`.
 */
export function useLimitTradeHandlerPyth<TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "pyth">>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "pyth", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: limitTradeHandlerABI, functionName: "pyth", ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    "pyth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"tradeService"`.
 */
export function useLimitTradeHandlerTradeService<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "tradeService">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "tradeService", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "tradeService",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "tradeService", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"weth"`.
 */
export function useLimitTradeHandlerWeth<TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "weth">>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "weth", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: limitTradeHandlerABI, functionName: "weth", ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    "weth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function useLimitTradeHandlerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, TFunctionName>({
    abi: limitTradeHandlerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"batch"`.
 */
export function useLimitTradeHandlerBatch<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "batch">["abi"],
        "batch"
      > & { functionName?: "batch" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "batch"> & {
        abi?: never
        functionName?: "batch"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "batch">({
    abi: limitTradeHandlerABI,
    functionName: "batch",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"cancelOrder"`.
 */
export function useLimitTradeHandlerCancelOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "cancelOrder">["abi"],
        "cancelOrder"
      > & { functionName?: "cancelOrder" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "cancelOrder"> & {
        abi?: never
        functionName?: "cancelOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "cancelOrder">({
    abi: limitTradeHandlerABI,
    functionName: "cancelOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"createOrder"`.
 */
export function useLimitTradeHandlerCreateOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "createOrder">["abi"],
        "createOrder"
      > & { functionName?: "createOrder" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "createOrder"> & {
        abi?: never
        functionName?: "createOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "createOrder">({
    abi: limitTradeHandlerABI,
    functionName: "createOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"executeLimitOrder"`.
 */
export function useLimitTradeHandlerExecuteLimitOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "executeLimitOrder">["abi"],
        "executeLimitOrder"
      > & { functionName?: "executeLimitOrder" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "executeLimitOrder"> & {
        abi?: never
        functionName?: "executeLimitOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "executeLimitOrder">({
    abi: limitTradeHandlerABI,
    functionName: "executeLimitOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"executeOrders"`.
 */
export function useLimitTradeHandlerExecuteOrders<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "executeOrders">["abi"],
        "executeOrders"
      > & { functionName?: "executeOrders" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "executeOrders"> & {
        abi?: never
        functionName?: "executeOrders"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "executeOrders">({
    abi: limitTradeHandlerABI,
    functionName: "executeOrders",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"initialize"`.
 */
export function useLimitTradeHandlerInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "initialize"> & {
        abi?: never
        functionName?: "initialize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "initialize">({
    abi: limitTradeHandlerABI,
    functionName: "initialize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"multicall"`.
 */
export function useLimitTradeHandlerMulticall<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "multicall">["abi"],
        "multicall"
      > & { functionName?: "multicall" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "multicall"> & {
        abi?: never
        functionName?: "multicall"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "multicall">({
    abi: limitTradeHandlerABI,
    functionName: "multicall",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useLimitTradeHandlerRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "renounceOwnership">["abi"],
        "renounceOwnership"
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "renounceOwnership"> & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "renounceOwnership">({
    abi: limitTradeHandlerABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setDelegate"`.
 */
export function useLimitTradeHandlerSetDelegate<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setDelegate">["abi"],
        "setDelegate"
      > & { functionName?: "setDelegate" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setDelegate"> & {
        abi?: never
        functionName?: "setDelegate"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setDelegate">({
    abi: limitTradeHandlerABI,
    functionName: "setDelegate",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setGuaranteeLimitPrice"`.
 */
export function useLimitTradeHandlerSetGuaranteeLimitPrice<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setGuaranteeLimitPrice">["abi"],
        "setGuaranteeLimitPrice"
      > & { functionName?: "setGuaranteeLimitPrice" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setGuaranteeLimitPrice"> & {
        abi?: never
        functionName?: "setGuaranteeLimitPrice"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setGuaranteeLimitPrice">({
    abi: limitTradeHandlerABI,
    functionName: "setGuaranteeLimitPrice",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function useLimitTradeHandlerSetMinExecutionFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setMinExecutionFee">["abi"],
        "setMinExecutionFee"
      > & { functionName?: "setMinExecutionFee" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setMinExecutionFee"> & {
        abi?: never
        functionName?: "setMinExecutionFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setMinExecutionFee">({
    abi: limitTradeHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setMinExecutionTimestamp"`.
 */
export function useLimitTradeHandlerSetMinExecutionTimestamp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setMinExecutionTimestamp">["abi"],
        "setMinExecutionTimestamp"
      > & { functionName?: "setMinExecutionTimestamp" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setMinExecutionTimestamp"> & {
        abi?: never
        functionName?: "setMinExecutionTimestamp"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setMinExecutionTimestamp">({
    abi: limitTradeHandlerABI,
    functionName: "setMinExecutionTimestamp",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function useLimitTradeHandlerSetOrderExecutor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setOrderExecutor">["abi"],
        "setOrderExecutor"
      > & { functionName?: "setOrderExecutor" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setOrderExecutor"> & {
        abi?: never
        functionName?: "setOrderExecutor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setOrderExecutor">({
    abi: limitTradeHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function useLimitTradeHandlerSetPyth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setPyth">["abi"],
        "setPyth"
      > & { functionName?: "setPyth" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setPyth"> & {
        abi?: never
        functionName?: "setPyth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setPyth">({
    abi: limitTradeHandlerABI,
    functionName: "setPyth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setTradeService"`.
 */
export function useLimitTradeHandlerSetTradeService<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setTradeService">["abi"],
        "setTradeService"
      > & { functionName?: "setTradeService" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setTradeService"> & {
        abi?: never
        functionName?: "setTradeService"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setTradeService">({
    abi: limitTradeHandlerABI,
    functionName: "setTradeService",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useLimitTradeHandlerTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "transferOwnership">({
    abi: limitTradeHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"updateOrder"`.
 */
export function useLimitTradeHandlerUpdateOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "updateOrder">["abi"],
        "updateOrder"
      > & { functionName?: "updateOrder" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "updateOrder"> & {
        abi?: never
        functionName?: "updateOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "updateOrder">({
    abi: limitTradeHandlerABI,
    functionName: "updateOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function usePrepareLimitTradeHandlerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: limitTradeHandlerABI, ...config } as UsePrepareContractWriteConfig<
    typeof limitTradeHandlerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"batch"`.
 */
export function usePrepareLimitTradeHandlerBatch(
  config: Omit<UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "batch">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "batch",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "batch">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"cancelOrder"`.
 */
export function usePrepareLimitTradeHandlerCancelOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "cancelOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "cancelOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "cancelOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"createOrder"`.
 */
export function usePrepareLimitTradeHandlerCreateOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "createOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "createOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "createOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"executeLimitOrder"`.
 */
export function usePrepareLimitTradeHandlerExecuteLimitOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "executeLimitOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "executeLimitOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "executeLimitOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"executeOrders"`.
 */
export function usePrepareLimitTradeHandlerExecuteOrders(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "executeOrders">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "executeOrders",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "executeOrders">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareLimitTradeHandlerInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "initialize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareLimitTradeHandlerMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "multicall">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "multicall",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "multicall">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareLimitTradeHandlerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setDelegate"`.
 */
export function usePrepareLimitTradeHandlerSetDelegate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setDelegate">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setDelegate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setDelegate">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setGuaranteeLimitPrice"`.
 */
export function usePrepareLimitTradeHandlerSetGuaranteeLimitPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setGuaranteeLimitPrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setGuaranteeLimitPrice",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setGuaranteeLimitPrice">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function usePrepareLimitTradeHandlerSetMinExecutionFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setMinExecutionFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setMinExecutionFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setMinExecutionTimestamp"`.
 */
export function usePrepareLimitTradeHandlerSetMinExecutionTimestamp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setMinExecutionTimestamp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setMinExecutionTimestamp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setMinExecutionTimestamp">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function usePrepareLimitTradeHandlerSetOrderExecutor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setOrderExecutor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setOrderExecutor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function usePrepareLimitTradeHandlerSetPyth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setPyth">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setPyth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setPyth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setTradeService"`.
 */
export function usePrepareLimitTradeHandlerSetTradeService(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setTradeService">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setTradeService",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setTradeService">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareLimitTradeHandlerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "transferOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"updateOrder"`.
 */
export function usePrepareLimitTradeHandlerUpdateOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "updateOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "updateOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "updateOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function useLimitTradeHandlerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof limitTradeHandlerABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: limitTradeHandlerABI, ...config } as UseContractEventConfig<
    typeof limitTradeHandlerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"Initialized"`.
 */
export function useLimitTradeHandlerInitializedEvent(
  config: Omit<UseContractEventConfig<typeof limitTradeHandlerABI, "Initialized">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: limitTradeHandlerABI, eventName: "Initialized", ...config } as UseContractEventConfig<
    typeof limitTradeHandlerABI,
    "Initialized"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogCancelLimitOrder"`.
 */
export function useLimitTradeHandlerLogCancelLimitOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogCancelLimitOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogCancelLimitOrder",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogCancelLimitOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogCreateLimitOrder"`.
 */
export function useLimitTradeHandlerLogCreateLimitOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogCreateLimitOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogCreateLimitOrder",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogCreateLimitOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogExecuteLimitOrder"`.
 */
export function useLimitTradeHandlerLogExecuteLimitOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogExecuteLimitOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogExecuteLimitOrder",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogExecuteLimitOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogExecuteMarketOrderFail"`.
 */
export function useLimitTradeHandlerLogExecuteMarketOrderFailEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogExecuteMarketOrderFail">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogExecuteMarketOrderFail",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogExecuteMarketOrderFail">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetDelegate"`.
 */
export function useLimitTradeHandlerLogSetDelegateEvent(
  config: Omit<UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetDelegate">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetDelegate",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetDelegate">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetGuaranteeLimitPrice"`.
 */
export function useLimitTradeHandlerLogSetGuaranteeLimitPriceEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetGuaranteeLimitPrice">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetGuaranteeLimitPrice",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetGuaranteeLimitPrice">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetIsAllowAllExecutor"`.
 */
export function useLimitTradeHandlerLogSetIsAllowAllExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetIsAllowAllExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetIsAllowAllExecutor",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetIsAllowAllExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetMinExecutionFee"`.
 */
export function useLimitTradeHandlerLogSetMinExecutionFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetMinExecutionFee">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetMinExecutionFee",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetMinExecutionFee">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetMinExecutionTimestamp"`.
 */
export function useLimitTradeHandlerLogSetMinExecutionTimestampEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetMinExecutionTimestamp">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetMinExecutionTimestamp",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetMinExecutionTimestamp">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetOrderExecutor"`.
 */
export function useLimitTradeHandlerLogSetOrderExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetOrderExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetOrderExecutor",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetOrderExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetPyth"`.
 */
export function useLimitTradeHandlerLogSetPythEvent(
  config: Omit<UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetPyth">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: limitTradeHandlerABI, eventName: "LogSetPyth", ...config } as UseContractEventConfig<
    typeof limitTradeHandlerABI,
    "LogSetPyth"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetTradeService"`.
 */
export function useLimitTradeHandlerLogSetTradeServiceEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetTradeService">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetTradeService",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetTradeService">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogUpdateLimitOrder"`.
 */
export function useLimitTradeHandlerLogUpdateLimitOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogUpdateLimitOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogUpdateLimitOrder",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogUpdateLimitOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useLimitTradeHandlerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function useLiquidityHandler(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: liquidityHandlerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function useLiquidityHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof liquidityHandlerABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: liquidityHandlerABI, ...config } as UseContractReadConfig<
    typeof liquidityHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"accountExecutedLiquidityOrders"`.
 */
export function useLiquidityHandlerAccountExecutedLiquidityOrders<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "accountExecutedLiquidityOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "accountExecutedLiquidityOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "accountExecutedLiquidityOrders",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "accountExecutedLiquidityOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"getActiveLiquidityOrders"`.
 */
export function useLiquidityHandlerGetActiveLiquidityOrders<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "getActiveLiquidityOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "getActiveLiquidityOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "getActiveLiquidityOrders",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "getActiveLiquidityOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"getExecutedLiquidityOrders"`.
 */
export function useLiquidityHandlerGetExecutedLiquidityOrders<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "getExecutedLiquidityOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "getExecutedLiquidityOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "getExecutedLiquidityOrders",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "getExecutedLiquidityOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"getLiquidityOrderLength"`.
 */
export function useLiquidityHandlerGetLiquidityOrderLength<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "getLiquidityOrderLength">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "getLiquidityOrderLength", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "getLiquidityOrderLength",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "getLiquidityOrderLength", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"getLiquidityOrders"`.
 */
export function useLiquidityHandlerGetLiquidityOrders<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "getLiquidityOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "getLiquidityOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "getLiquidityOrders",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "getLiquidityOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"hlpStaking"`.
 */
export function useLiquidityHandlerHlpStaking<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "hlpStaking">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "hlpStaking", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: liquidityHandlerABI, functionName: "hlpStaking", ...config } as UseContractReadConfig<
    typeof liquidityHandlerABI,
    "hlpStaking",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"liquidityOrders"`.
 */
export function useLiquidityHandlerLiquidityOrders<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "liquidityOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "liquidityOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "liquidityOrders",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "liquidityOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"liquidityService"`.
 */
export function useLiquidityHandlerLiquidityService<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "liquidityService">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "liquidityService", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "liquidityService",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "liquidityService", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"maxExecutionChunk"`.
 */
export function useLiquidityHandlerMaxExecutionChunk<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "maxExecutionChunk">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "maxExecutionChunk", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "maxExecutionChunk",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "maxExecutionChunk", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"minExecutionOrderFee"`.
 */
export function useLiquidityHandlerMinExecutionOrderFee<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "minExecutionOrderFee">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "minExecutionOrderFee", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "minExecutionOrderFee",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "minExecutionOrderFee", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"nextExecutionOrderIndex"`.
 */
export function useLiquidityHandlerNextExecutionOrderIndex<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "nextExecutionOrderIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "nextExecutionOrderIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "nextExecutionOrderIndex",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "nextExecutionOrderIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"orderExecutors"`.
 */
export function useLiquidityHandlerOrderExecutors<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "orderExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "orderExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "orderExecutors",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "orderExecutors", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"owner"`.
 */
export function useLiquidityHandlerOwner<TSelectData = ReadContractResult<typeof liquidityHandlerABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: liquidityHandlerABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof liquidityHandlerABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"pyth"`.
 */
export function useLiquidityHandlerPyth<TSelectData = ReadContractResult<typeof liquidityHandlerABI, "pyth">>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "pyth", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: liquidityHandlerABI, functionName: "pyth", ...config } as UseContractReadConfig<
    typeof liquidityHandlerABI,
    "pyth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function useLiquidityHandlerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, TFunctionName>({
    abi: liquidityHandlerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"cancelLiquidityOrder"`.
 */
export function useLiquidityHandlerCancelLiquidityOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "cancelLiquidityOrder">["abi"],
        "cancelLiquidityOrder"
      > & { functionName?: "cancelLiquidityOrder" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "cancelLiquidityOrder"> & {
        abi?: never
        functionName?: "cancelLiquidityOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "cancelLiquidityOrder">({
    abi: liquidityHandlerABI,
    functionName: "cancelLiquidityOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"createAddLiquidityOrder"`.
 */
export function useLiquidityHandlerCreateAddLiquidityOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "createAddLiquidityOrder">["abi"],
        "createAddLiquidityOrder"
      > & { functionName?: "createAddLiquidityOrder" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "createAddLiquidityOrder"> & {
        abi?: never
        functionName?: "createAddLiquidityOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "createAddLiquidityOrder">({
    abi: liquidityHandlerABI,
    functionName: "createAddLiquidityOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"createRemoveLiquidityOrder"`.
 */
export function useLiquidityHandlerCreateRemoveLiquidityOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "createRemoveLiquidityOrder">["abi"],
        "createRemoveLiquidityOrder"
      > & { functionName?: "createRemoveLiquidityOrder" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "createRemoveLiquidityOrder"> & {
        abi?: never
        functionName?: "createRemoveLiquidityOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "createRemoveLiquidityOrder">({
    abi: liquidityHandlerABI,
    functionName: "createRemoveLiquidityOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"executeLiquidity"`.
 */
export function useLiquidityHandlerExecuteLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "executeLiquidity">["abi"],
        "executeLiquidity"
      > & { functionName?: "executeLiquidity" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "executeLiquidity"> & {
        abi?: never
        functionName?: "executeLiquidity"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "executeLiquidity">({
    abi: liquidityHandlerABI,
    functionName: "executeLiquidity",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"executeOrder"`.
 */
export function useLiquidityHandlerExecuteOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "executeOrder">["abi"],
        "executeOrder"
      > & { functionName?: "executeOrder" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "executeOrder"> & {
        abi?: never
        functionName?: "executeOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "executeOrder">({
    abi: liquidityHandlerABI,
    functionName: "executeOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"initialize"`.
 */
export function useLiquidityHandlerInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "initialize"> & {
        abi?: never
        functionName?: "initialize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "initialize">({
    abi: liquidityHandlerABI,
    functionName: "initialize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useLiquidityHandlerRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "renounceOwnership">["abi"],
        "renounceOwnership"
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "renounceOwnership"> & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "renounceOwnership">({
    abi: liquidityHandlerABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setHlpStaking"`.
 */
export function useLiquidityHandlerSetHlpStaking<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setHlpStaking">["abi"],
        "setHlpStaking"
      > & { functionName?: "setHlpStaking" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setHlpStaking"> & {
        abi?: never
        functionName?: "setHlpStaking"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setHlpStaking">({
    abi: liquidityHandlerABI,
    functionName: "setHlpStaking",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setLiquidityService"`.
 */
export function useLiquidityHandlerSetLiquidityService<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setLiquidityService">["abi"],
        "setLiquidityService"
      > & { functionName?: "setLiquidityService" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setLiquidityService"> & {
        abi?: never
        functionName?: "setLiquidityService"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setLiquidityService">({
    abi: liquidityHandlerABI,
    functionName: "setLiquidityService",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setMaxExecutionChunk"`.
 */
export function useLiquidityHandlerSetMaxExecutionChunk<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setMaxExecutionChunk">["abi"],
        "setMaxExecutionChunk"
      > & { functionName?: "setMaxExecutionChunk" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setMaxExecutionChunk"> & {
        abi?: never
        functionName?: "setMaxExecutionChunk"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setMaxExecutionChunk">({
    abi: liquidityHandlerABI,
    functionName: "setMaxExecutionChunk",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function useLiquidityHandlerSetMinExecutionFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setMinExecutionFee">["abi"],
        "setMinExecutionFee"
      > & { functionName?: "setMinExecutionFee" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setMinExecutionFee"> & {
        abi?: never
        functionName?: "setMinExecutionFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setMinExecutionFee">({
    abi: liquidityHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function useLiquidityHandlerSetOrderExecutor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setOrderExecutor">["abi"],
        "setOrderExecutor"
      > & { functionName?: "setOrderExecutor" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setOrderExecutor"> & {
        abi?: never
        functionName?: "setOrderExecutor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setOrderExecutor">({
    abi: liquidityHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function useLiquidityHandlerSetPyth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setPyth">["abi"],
        "setPyth"
      > & { functionName?: "setPyth" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setPyth"> & {
        abi?: never
        functionName?: "setPyth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setPyth">({
    abi: liquidityHandlerABI,
    functionName: "setPyth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useLiquidityHandlerTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "transferOwnership">({
    abi: liquidityHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function usePrepareLiquidityHandlerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof liquidityHandlerABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: liquidityHandlerABI, ...config } as UsePrepareContractWriteConfig<
    typeof liquidityHandlerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"cancelLiquidityOrder"`.
 */
export function usePrepareLiquidityHandlerCancelLiquidityOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "cancelLiquidityOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "cancelLiquidityOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "cancelLiquidityOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"createAddLiquidityOrder"`.
 */
export function usePrepareLiquidityHandlerCreateAddLiquidityOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "createAddLiquidityOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "createAddLiquidityOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "createAddLiquidityOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"createRemoveLiquidityOrder"`.
 */
export function usePrepareLiquidityHandlerCreateRemoveLiquidityOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "createRemoveLiquidityOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "createRemoveLiquidityOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "createRemoveLiquidityOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"executeLiquidity"`.
 */
export function usePrepareLiquidityHandlerExecuteLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "executeLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "executeLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "executeLiquidity">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"executeOrder"`.
 */
export function usePrepareLiquidityHandlerExecuteOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "executeOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "executeOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "executeOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareLiquidityHandlerInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "initialize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareLiquidityHandlerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setHlpStaking"`.
 */
export function usePrepareLiquidityHandlerSetHlpStaking(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setHlpStaking">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setHlpStaking",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setHlpStaking">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setLiquidityService"`.
 */
export function usePrepareLiquidityHandlerSetLiquidityService(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setLiquidityService">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setLiquidityService",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setLiquidityService">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setMaxExecutionChunk"`.
 */
export function usePrepareLiquidityHandlerSetMaxExecutionChunk(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setMaxExecutionChunk">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setMaxExecutionChunk",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setMaxExecutionChunk">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function usePrepareLiquidityHandlerSetMinExecutionFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setMinExecutionFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setMinExecutionFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function usePrepareLiquidityHandlerSetOrderExecutor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setOrderExecutor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setOrderExecutor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function usePrepareLiquidityHandlerSetPyth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setPyth">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setPyth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setPyth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareLiquidityHandlerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "transferOwnership">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function useLiquidityHandlerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof liquidityHandlerABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: liquidityHandlerABI, ...config } as UseContractEventConfig<
    typeof liquidityHandlerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"Initialized"`.
 */
export function useLiquidityHandlerInitializedEvent(
  config: Omit<UseContractEventConfig<typeof liquidityHandlerABI, "Initialized">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: liquidityHandlerABI, eventName: "Initialized", ...config } as UseContractEventConfig<
    typeof liquidityHandlerABI,
    "Initialized"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogCancelLiquidityOrder"`.
 */
export function useLiquidityHandlerLogCancelLiquidityOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogCancelLiquidityOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogCancelLiquidityOrder",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogCancelLiquidityOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogCreateAddLiquidityOrder"`.
 */
export function useLiquidityHandlerLogCreateAddLiquidityOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogCreateAddLiquidityOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogCreateAddLiquidityOrder",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogCreateAddLiquidityOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogCreateRemoveLiquidityOrder"`.
 */
export function useLiquidityHandlerLogCreateRemoveLiquidityOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogCreateRemoveLiquidityOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogCreateRemoveLiquidityOrder",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogCreateRemoveLiquidityOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogExecuteLiquidityOrder"`.
 */
export function useLiquidityHandlerLogExecuteLiquidityOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogExecuteLiquidityOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogExecuteLiquidityOrder",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogExecuteLiquidityOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogRefund"`.
 */
export function useLiquidityHandlerLogRefundEvent(
  config: Omit<UseContractEventConfig<typeof liquidityHandlerABI, "LogRefund">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: liquidityHandlerABI, eventName: "LogRefund", ...config } as UseContractEventConfig<
    typeof liquidityHandlerABI,
    "LogRefund"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetHlpStaking"`.
 */
export function useLiquidityHandlerLogSetHlpStakingEvent(
  config: Omit<UseContractEventConfig<typeof liquidityHandlerABI, "LogSetHlpStaking">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogSetHlpStaking",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogSetHlpStaking">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetLiquidityService"`.
 */
export function useLiquidityHandlerLogSetLiquidityServiceEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogSetLiquidityService">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogSetLiquidityService",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogSetLiquidityService">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetMaxExecutionChunk"`.
 */
export function useLiquidityHandlerLogSetMaxExecutionChunkEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogSetMaxExecutionChunk">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogSetMaxExecutionChunk",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogSetMaxExecutionChunk">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetMinExecutionFee"`.
 */
export function useLiquidityHandlerLogSetMinExecutionFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogSetMinExecutionFee">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogSetMinExecutionFee",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogSetMinExecutionFee">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetOrderExecutor"`.
 */
export function useLiquidityHandlerLogSetOrderExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogSetOrderExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogSetOrderExecutor",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogSetOrderExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetPyth"`.
 */
export function useLiquidityHandlerLogSetPythEvent(
  config: Omit<UseContractEventConfig<typeof liquidityHandlerABI, "LogSetPyth">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: liquidityHandlerABI, eventName: "LogSetPyth", ...config } as UseContractEventConfig<
    typeof liquidityHandlerABI,
    "LogSetPyth"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useLiquidityHandlerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockBalancerPoolABI}__.
 */
export function useMockBalancerPool(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: mockBalancerPoolABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerPoolABI}__.
 */
export function useMockBalancerPoolRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockBalancerPoolABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof mockBalancerPoolABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: mockBalancerPoolABI, ...config } as UseContractReadConfig<
    typeof mockBalancerPoolABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"getNormalizedWeights"`.
 */
export function useMockBalancerPoolGetNormalizedWeights<
  TSelectData = ReadContractResult<typeof mockBalancerPoolABI, "getNormalizedWeights">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerPoolABI, "getNormalizedWeights", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockBalancerPoolABI,
    functionName: "getNormalizedWeights",
    ...config,
  } as UseContractReadConfig<typeof mockBalancerPoolABI, "getNormalizedWeights", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"getPoolId"`.
 */
export function useMockBalancerPoolGetPoolId<TSelectData = ReadContractResult<typeof mockBalancerPoolABI, "getPoolId">>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerPoolABI, "getPoolId", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: mockBalancerPoolABI, functionName: "getPoolId", ...config } as UseContractReadConfig<
    typeof mockBalancerPoolABI,
    "getPoolId",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"getSwapFeePercentage"`.
 */
export function useMockBalancerPoolGetSwapFeePercentage<
  TSelectData = ReadContractResult<typeof mockBalancerPoolABI, "getSwapFeePercentage">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerPoolABI, "getSwapFeePercentage", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockBalancerPoolABI,
    functionName: "getSwapFeePercentage",
    ...config,
  } as UseContractReadConfig<typeof mockBalancerPoolABI, "getSwapFeePercentage", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"getVault"`.
 */
export function useMockBalancerPoolGetVault<TSelectData = ReadContractResult<typeof mockBalancerPoolABI, "getVault">>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerPoolABI, "getVault", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: mockBalancerPoolABI, functionName: "getVault", ...config } as UseContractReadConfig<
    typeof mockBalancerPoolABI,
    "getVault",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"normalizedWeights"`.
 */
export function useMockBalancerPoolNormalizedWeights<
  TSelectData = ReadContractResult<typeof mockBalancerPoolABI, "normalizedWeights">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerPoolABI, "normalizedWeights", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockBalancerPoolABI,
    functionName: "normalizedWeights",
    ...config,
  } as UseContractReadConfig<typeof mockBalancerPoolABI, "normalizedWeights", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"swapFeePercentage"`.
 */
export function useMockBalancerPoolSwapFeePercentage<
  TSelectData = ReadContractResult<typeof mockBalancerPoolABI, "swapFeePercentage">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerPoolABI, "swapFeePercentage", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockBalancerPoolABI,
    functionName: "swapFeePercentage",
    ...config,
  } as UseContractReadConfig<typeof mockBalancerPoolABI, "swapFeePercentage", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"vault"`.
 */
export function useMockBalancerPoolVault<TSelectData = ReadContractResult<typeof mockBalancerPoolABI, "vault">>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerPoolABI, "vault", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: mockBalancerPoolABI, functionName: "vault", ...config } as UseContractReadConfig<
    typeof mockBalancerPoolABI,
    "vault",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBalancerPoolABI}__.
 */
export function useMockBalancerPoolWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBalancerPoolABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof mockBalancerPoolABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBalancerPoolABI, TFunctionName>({
    abi: mockBalancerPoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"setNormalizedWeights"`.
 */
export function useMockBalancerPoolSetNormalizedWeights<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBalancerPoolABI, "setNormalizedWeights">["abi"],
        "setNormalizedWeights"
      > & { functionName?: "setNormalizedWeights" }
    : UseContractWriteConfig<TMode, typeof mockBalancerPoolABI, "setNormalizedWeights"> & {
        abi?: never
        functionName?: "setNormalizedWeights"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBalancerPoolABI, "setNormalizedWeights">({
    abi: mockBalancerPoolABI,
    functionName: "setNormalizedWeights",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function useMockBalancerPoolSetSwapFeePercentage<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBalancerPoolABI, "setSwapFeePercentage">["abi"],
        "setSwapFeePercentage"
      > & { functionName?: "setSwapFeePercentage" }
    : UseContractWriteConfig<TMode, typeof mockBalancerPoolABI, "setSwapFeePercentage"> & {
        abi?: never
        functionName?: "setSwapFeePercentage"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBalancerPoolABI, "setSwapFeePercentage">({
    abi: mockBalancerPoolABI,
    functionName: "setSwapFeePercentage",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"setVault"`.
 */
export function useMockBalancerPoolSetVault<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBalancerPoolABI, "setVault">["abi"],
        "setVault"
      > & { functionName?: "setVault" }
    : UseContractWriteConfig<TMode, typeof mockBalancerPoolABI, "setVault"> & {
        abi?: never
        functionName?: "setVault"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBalancerPoolABI, "setVault">({
    abi: mockBalancerPoolABI,
    functionName: "setVault",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBalancerPoolABI}__.
 */
export function usePrepareMockBalancerPoolWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof mockBalancerPoolABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: mockBalancerPoolABI, ...config } as UsePrepareContractWriteConfig<
    typeof mockBalancerPoolABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"setNormalizedWeights"`.
 */
export function usePrepareMockBalancerPoolSetNormalizedWeights(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBalancerPoolABI, "setNormalizedWeights">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBalancerPoolABI,
    functionName: "setNormalizedWeights",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBalancerPoolABI, "setNormalizedWeights">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"setSwapFeePercentage"`.
 */
export function usePrepareMockBalancerPoolSetSwapFeePercentage(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBalancerPoolABI, "setSwapFeePercentage">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBalancerPoolABI,
    functionName: "setSwapFeePercentage",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBalancerPoolABI, "setSwapFeePercentage">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBalancerPoolABI}__ and `functionName` set to `"setVault"`.
 */
export function usePrepareMockBalancerPoolSetVault(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBalancerPoolABI, "setVault">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBalancerPoolABI,
    functionName: "setVault",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBalancerPoolABI, "setVault">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockBalancerVaultABI}__.
 */
export function useMockBalancerVault(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: mockBalancerVaultABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerVaultABI}__.
 */
export function useMockBalancerVaultRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockBalancerVaultABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof mockBalancerVaultABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: mockBalancerVaultABI, ...config } as UseContractReadConfig<
    typeof mockBalancerVaultABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerVaultABI}__ and `functionName` set to `"getPoolTokens"`.
 */
export function useMockBalancerVaultGetPoolTokens<
  TSelectData = ReadContractResult<typeof mockBalancerVaultABI, "getPoolTokens">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerVaultABI, "getPoolTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockBalancerVaultABI,
    functionName: "getPoolTokens",
    ...config,
  } as UseContractReadConfig<typeof mockBalancerVaultABI, "getPoolTokens", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerVaultABI}__ and `functionName` set to `"poolBalances"`.
 */
export function useMockBalancerVaultPoolBalances<
  TSelectData = ReadContractResult<typeof mockBalancerVaultABI, "poolBalances">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerVaultABI, "poolBalances", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockBalancerVaultABI,
    functionName: "poolBalances",
    ...config,
  } as UseContractReadConfig<typeof mockBalancerVaultABI, "poolBalances", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockBalancerVaultABI}__ and `functionName` set to `"poolTokens"`.
 */
export function useMockBalancerVaultPoolTokens<
  TSelectData = ReadContractResult<typeof mockBalancerVaultABI, "poolTokens">,
>(
  config: Omit<
    UseContractReadConfig<typeof mockBalancerVaultABI, "poolTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: mockBalancerVaultABI, functionName: "poolTokens", ...config } as UseContractReadConfig<
    typeof mockBalancerVaultABI,
    "poolTokens",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBalancerVaultABI}__.
 */
export function useMockBalancerVaultWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBalancerVaultABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof mockBalancerVaultABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBalancerVaultABI, TFunctionName>({
    abi: mockBalancerVaultABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockBalancerVaultABI}__ and `functionName` set to `"setParams"`.
 */
export function useMockBalancerVaultSetParams<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockBalancerVaultABI, "setParams">["abi"],
        "setParams"
      > & { functionName?: "setParams" }
    : UseContractWriteConfig<TMode, typeof mockBalancerVaultABI, "setParams"> & {
        abi?: never
        functionName?: "setParams"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockBalancerVaultABI, "setParams">({
    abi: mockBalancerVaultABI,
    functionName: "setParams",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBalancerVaultABI}__.
 */
export function usePrepareMockBalancerVaultWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof mockBalancerVaultABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: mockBalancerVaultABI, ...config } as UsePrepareContractWriteConfig<
    typeof mockBalancerVaultABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockBalancerVaultABI}__ and `functionName` set to `"setParams"`.
 */
export function usePrepareMockBalancerVaultSetParams(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockBalancerVaultABI, "setParams">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockBalancerVaultABI,
    functionName: "setParams",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockBalancerVaultABI, "setParams">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link oracleMiddlewareABI}__.
 */
export function useOracleMiddleware(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: oracleMiddlewareABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__.
 */
export function useOracleMiddlewareRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof oracleMiddlewareABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: oracleMiddlewareABI, ...config } as UseContractReadConfig<
    typeof oracleMiddlewareABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"assetPriceConfigs"`.
 */
export function useOracleMiddlewareAssetPriceConfigs<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "assetPriceConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "assetPriceConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: oracleMiddlewareABI,
    functionName: "assetPriceConfigs",
    ...config,
  } as UseContractReadConfig<typeof oracleMiddlewareABI, "assetPriceConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"getLatestAdaptivePrice"`.
 */
export function useOracleMiddlewareGetLatestAdaptivePrice<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "getLatestAdaptivePrice">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "getLatestAdaptivePrice", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: oracleMiddlewareABI,
    functionName: "getLatestAdaptivePrice",
    ...config,
  } as UseContractReadConfig<typeof oracleMiddlewareABI, "getLatestAdaptivePrice", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"getLatestAdaptivePriceWithMarketStatus"`.
 */
export function useOracleMiddlewareGetLatestAdaptivePriceWithMarketStatus<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "getLatestAdaptivePriceWithMarketStatus">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "getLatestAdaptivePriceWithMarketStatus", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: oracleMiddlewareABI,
    functionName: "getLatestAdaptivePriceWithMarketStatus",
    ...config,
  } as UseContractReadConfig<typeof oracleMiddlewareABI, "getLatestAdaptivePriceWithMarketStatus", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"getLatestPrice"`.
 */
export function useOracleMiddlewareGetLatestPrice<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "getLatestPrice">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "getLatestPrice", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: oracleMiddlewareABI,
    functionName: "getLatestPrice",
    ...config,
  } as UseContractReadConfig<typeof oracleMiddlewareABI, "getLatestPrice", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"getLatestPriceWithMarketStatus"`.
 */
export function useOracleMiddlewareGetLatestPriceWithMarketStatus<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "getLatestPriceWithMarketStatus">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "getLatestPriceWithMarketStatus", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: oracleMiddlewareABI,
    functionName: "getLatestPriceWithMarketStatus",
    ...config,
  } as UseContractReadConfig<typeof oracleMiddlewareABI, "getLatestPriceWithMarketStatus", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"isUpdater"`.
 */
export function useOracleMiddlewareIsUpdater<TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "isUpdater">>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "isUpdater", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: oracleMiddlewareABI, functionName: "isUpdater", ...config } as UseContractReadConfig<
    typeof oracleMiddlewareABI,
    "isUpdater",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"marketStatus"`.
 */
export function useOracleMiddlewareMarketStatus<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "marketStatus">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "marketStatus", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: oracleMiddlewareABI, functionName: "marketStatus", ...config } as UseContractReadConfig<
    typeof oracleMiddlewareABI,
    "marketStatus",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"owner"`.
 */
export function useOracleMiddlewareOwner<TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: oracleMiddlewareABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof oracleMiddlewareABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"unsafeGetLatestAdaptivePrice"`.
 */
export function useOracleMiddlewareUnsafeGetLatestAdaptivePrice<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "unsafeGetLatestAdaptivePrice">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "unsafeGetLatestAdaptivePrice", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: oracleMiddlewareABI,
    functionName: "unsafeGetLatestAdaptivePrice",
    ...config,
  } as UseContractReadConfig<typeof oracleMiddlewareABI, "unsafeGetLatestAdaptivePrice", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"unsafeGetLatestAdaptivePriceWithMarketStatus"`.
 */
export function useOracleMiddlewareUnsafeGetLatestAdaptivePriceWithMarketStatus<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "unsafeGetLatestAdaptivePriceWithMarketStatus">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "unsafeGetLatestAdaptivePriceWithMarketStatus", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: oracleMiddlewareABI,
    functionName: "unsafeGetLatestAdaptivePriceWithMarketStatus",
    ...config,
  } as UseContractReadConfig<typeof oracleMiddlewareABI, "unsafeGetLatestAdaptivePriceWithMarketStatus", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"unsafeGetLatestPrice"`.
 */
export function useOracleMiddlewareUnsafeGetLatestPrice<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "unsafeGetLatestPrice">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "unsafeGetLatestPrice", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: oracleMiddlewareABI,
    functionName: "unsafeGetLatestPrice",
    ...config,
  } as UseContractReadConfig<typeof oracleMiddlewareABI, "unsafeGetLatestPrice", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"unsafeGetLatestPriceWithMarketStatus"`.
 */
export function useOracleMiddlewareUnsafeGetLatestPriceWithMarketStatus<
  TSelectData = ReadContractResult<typeof oracleMiddlewareABI, "unsafeGetLatestPriceWithMarketStatus">,
>(
  config: Omit<
    UseContractReadConfig<typeof oracleMiddlewareABI, "unsafeGetLatestPriceWithMarketStatus", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: oracleMiddlewareABI,
    functionName: "unsafeGetLatestPriceWithMarketStatus",
    ...config,
  } as UseContractReadConfig<typeof oracleMiddlewareABI, "unsafeGetLatestPriceWithMarketStatus", TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__.
 */
export function useOracleMiddlewareWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, TFunctionName>({
    abi: oracleMiddlewareABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"initialize"`.
 */
export function useOracleMiddlewareInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, "initialize"> & {
        abi?: never
        functionName?: "initialize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, "initialize">({
    abi: oracleMiddlewareABI,
    functionName: "initialize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOracleMiddlewareRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, "renounceOwnership">["abi"],
        "renounceOwnership"
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, "renounceOwnership"> & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, "renounceOwnership">({
    abi: oracleMiddlewareABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setAssetPriceConfig"`.
 */
export function useOracleMiddlewareSetAssetPriceConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, "setAssetPriceConfig">["abi"],
        "setAssetPriceConfig"
      > & { functionName?: "setAssetPriceConfig" }
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, "setAssetPriceConfig"> & {
        abi?: never
        functionName?: "setAssetPriceConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, "setAssetPriceConfig">({
    abi: oracleMiddlewareABI,
    functionName: "setAssetPriceConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setAssetPriceConfigs"`.
 */
export function useOracleMiddlewareSetAssetPriceConfigs<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, "setAssetPriceConfigs">["abi"],
        "setAssetPriceConfigs"
      > & { functionName?: "setAssetPriceConfigs" }
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, "setAssetPriceConfigs"> & {
        abi?: never
        functionName?: "setAssetPriceConfigs"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, "setAssetPriceConfigs">({
    abi: oracleMiddlewareABI,
    functionName: "setAssetPriceConfigs",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setMarketStatus"`.
 */
export function useOracleMiddlewareSetMarketStatus<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, "setMarketStatus">["abi"],
        "setMarketStatus"
      > & { functionName?: "setMarketStatus" }
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, "setMarketStatus"> & {
        abi?: never
        functionName?: "setMarketStatus"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, "setMarketStatus">({
    abi: oracleMiddlewareABI,
    functionName: "setMarketStatus",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setMaxTrustPriceAge"`.
 */
export function useOracleMiddlewareSetMaxTrustPriceAge<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, "setMaxTrustPriceAge">["abi"],
        "setMaxTrustPriceAge"
      > & { functionName?: "setMaxTrustPriceAge" }
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, "setMaxTrustPriceAge"> & {
        abi?: never
        functionName?: "setMaxTrustPriceAge"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, "setMaxTrustPriceAge">({
    abi: oracleMiddlewareABI,
    functionName: "setMaxTrustPriceAge",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setMultipleMarketStatus"`.
 */
export function useOracleMiddlewareSetMultipleMarketStatus<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, "setMultipleMarketStatus">["abi"],
        "setMultipleMarketStatus"
      > & { functionName?: "setMultipleMarketStatus" }
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, "setMultipleMarketStatus"> & {
        abi?: never
        functionName?: "setMultipleMarketStatus"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, "setMultipleMarketStatus">({
    abi: oracleMiddlewareABI,
    functionName: "setMultipleMarketStatus",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setUpdater"`.
 */
export function useOracleMiddlewareSetUpdater<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, "setUpdater">["abi"],
        "setUpdater"
      > & { functionName?: "setUpdater" }
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, "setUpdater"> & {
        abi?: never
        functionName?: "setUpdater"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, "setUpdater">({
    abi: oracleMiddlewareABI,
    functionName: "setUpdater",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOracleMiddlewareTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof oracleMiddlewareABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof oracleMiddlewareABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof oracleMiddlewareABI, "transferOwnership">({
    abi: oracleMiddlewareABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__.
 */
export function usePrepareOracleMiddlewareWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: oracleMiddlewareABI, ...config } as UsePrepareContractWriteConfig<
    typeof oracleMiddlewareABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareOracleMiddlewareInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "initialize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: oracleMiddlewareABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "initialize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOracleMiddlewareRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: oracleMiddlewareABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setAssetPriceConfig"`.
 */
export function usePrepareOracleMiddlewareSetAssetPriceConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setAssetPriceConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: oracleMiddlewareABI,
    functionName: "setAssetPriceConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setAssetPriceConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setAssetPriceConfigs"`.
 */
export function usePrepareOracleMiddlewareSetAssetPriceConfigs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setAssetPriceConfigs">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: oracleMiddlewareABI,
    functionName: "setAssetPriceConfigs",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setAssetPriceConfigs">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setMarketStatus"`.
 */
export function usePrepareOracleMiddlewareSetMarketStatus(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setMarketStatus">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: oracleMiddlewareABI,
    functionName: "setMarketStatus",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setMarketStatus">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setMaxTrustPriceAge"`.
 */
export function usePrepareOracleMiddlewareSetMaxTrustPriceAge(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setMaxTrustPriceAge">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: oracleMiddlewareABI,
    functionName: "setMaxTrustPriceAge",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setMaxTrustPriceAge">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setMultipleMarketStatus"`.
 */
export function usePrepareOracleMiddlewareSetMultipleMarketStatus(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setMultipleMarketStatus">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: oracleMiddlewareABI,
    functionName: "setMultipleMarketStatus",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setMultipleMarketStatus">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"setUpdater"`.
 */
export function usePrepareOracleMiddlewareSetUpdater(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setUpdater">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: oracleMiddlewareABI,
    functionName: "setUpdater",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "setUpdater">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOracleMiddlewareTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: oracleMiddlewareABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof oracleMiddlewareABI, "transferOwnership">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oracleMiddlewareABI}__.
 */
export function useOracleMiddlewareEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof oracleMiddlewareABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: oracleMiddlewareABI, ...config } as UseContractEventConfig<
    typeof oracleMiddlewareABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `eventName` set to `"Initialized"`.
 */
export function useOracleMiddlewareInitializedEvent(
  config: Omit<UseContractEventConfig<typeof oracleMiddlewareABI, "Initialized">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: oracleMiddlewareABI, eventName: "Initialized", ...config } as UseContractEventConfig<
    typeof oracleMiddlewareABI,
    "Initialized"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `eventName` set to `"LogSetAdapter"`.
 */
export function useOracleMiddlewareLogSetAdapterEvent(
  config: Omit<UseContractEventConfig<typeof oracleMiddlewareABI, "LogSetAdapter">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: oracleMiddlewareABI, eventName: "LogSetAdapter", ...config } as UseContractEventConfig<
    typeof oracleMiddlewareABI,
    "LogSetAdapter"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `eventName` set to `"LogSetAssetPriceConfig"`.
 */
export function useOracleMiddlewareLogSetAssetPriceConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof oracleMiddlewareABI, "LogSetAssetPriceConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: oracleMiddlewareABI,
    eventName: "LogSetAssetPriceConfig",
    ...config,
  } as UseContractEventConfig<typeof oracleMiddlewareABI, "LogSetAssetPriceConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `eventName` set to `"LogSetMarketStatus"`.
 */
export function useOracleMiddlewareLogSetMarketStatusEvent(
  config: Omit<
    UseContractEventConfig<typeof oracleMiddlewareABI, "LogSetMarketStatus">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: oracleMiddlewareABI,
    eventName: "LogSetMarketStatus",
    ...config,
  } as UseContractEventConfig<typeof oracleMiddlewareABI, "LogSetMarketStatus">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `eventName` set to `"LogSetMaxTrustPriceAge"`.
 */
export function useOracleMiddlewareLogSetMaxTrustPriceAgeEvent(
  config: Omit<
    UseContractEventConfig<typeof oracleMiddlewareABI, "LogSetMaxTrustPriceAge">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: oracleMiddlewareABI,
    eventName: "LogSetMaxTrustPriceAge",
    ...config,
  } as UseContractEventConfig<typeof oracleMiddlewareABI, "LogSetMaxTrustPriceAge">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `eventName` set to `"LogSetUpdater"`.
 */
export function useOracleMiddlewareLogSetUpdaterEvent(
  config: Omit<UseContractEventConfig<typeof oracleMiddlewareABI, "LogSetUpdater">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: oracleMiddlewareABI, eventName: "LogSetUpdater", ...config } as UseContractEventConfig<
    typeof oracleMiddlewareABI,
    "LogSetUpdater"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link oracleMiddlewareABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOracleMiddlewareOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof oracleMiddlewareABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: oracleMiddlewareABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof oracleMiddlewareABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePerpStorage(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: perpStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePerpStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof perpStorageABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof perpStorageABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: perpStorageABI, ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"assetClasses"`.
 */
export function usePerpStorageAssetClasses<TSelectData = ReadContractResult<typeof perpStorageABI, "assetClasses">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "assetClasses", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "assetClasses", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "assetClasses",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getActivePositionIds"`.
 */
export function usePerpStorageGetActivePositionIds<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getActivePositionIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getActivePositionIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getActivePositionIds",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getActivePositionIds", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getActivePositions"`.
 */
export function usePerpStorageGetActivePositions<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getActivePositions">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getActivePositions", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getActivePositions",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getActivePositions", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getActiveSubAccounts"`.
 */
export function usePerpStorageGetActiveSubAccounts<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getActiveSubAccounts">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getActiveSubAccounts", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getActiveSubAccounts",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getActiveSubAccounts", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getAssetClassByIndex"`.
 */
export function usePerpStorageGetAssetClassByIndex<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getAssetClassByIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getAssetClassByIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getAssetClassByIndex",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getAssetClassByIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getGlobalState"`.
 */
export function usePerpStorageGetGlobalState<TSelectData = ReadContractResult<typeof perpStorageABI, "getGlobalState">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getGlobalState", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "getGlobalState", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "getGlobalState",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getMarketByIndex"`.
 */
export function usePerpStorageGetMarketByIndex<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getMarketByIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getMarketByIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "getMarketByIndex", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "getMarketByIndex",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getNumberOfSubAccountPosition"`.
 */
export function usePerpStorageGetNumberOfSubAccountPosition<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getNumberOfSubAccountPosition">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getNumberOfSubAccountPosition", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getNumberOfSubAccountPosition",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getNumberOfSubAccountPosition", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getPositionById"`.
 */
export function usePerpStorageGetPositionById<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getPositionById">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getPositionById", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "getPositionById", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "getPositionById",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getPositionBySubAccount"`.
 */
export function usePerpStorageGetPositionBySubAccount<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getPositionBySubAccount">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getPositionBySubAccount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getPositionBySubAccount",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getPositionBySubAccount", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getPositionIds"`.
 */
export function usePerpStorageGetPositionIds<TSelectData = ReadContractResult<typeof perpStorageABI, "getPositionIds">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getPositionIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "getPositionIds", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "getPositionIds",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"globalState"`.
 */
export function usePerpStorageGlobalState<TSelectData = ReadContractResult<typeof perpStorageABI, "globalState">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "globalState", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "globalState", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "globalState",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"markets"`.
 */
export function usePerpStorageMarkets<TSelectData = ReadContractResult<typeof perpStorageABI, "markets">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "markets", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "markets", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "markets",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"owner"`.
 */
export function usePerpStorageOwner<TSelectData = ReadContractResult<typeof perpStorageABI, "owner">>(
  config: Omit<UseContractReadConfig<typeof perpStorageABI, "owner", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"positions"`.
 */
export function usePerpStoragePositions<TSelectData = ReadContractResult<typeof perpStorageABI, "positions">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "positions", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "positions", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "positions",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"serviceExecutors"`.
 */
export function usePerpStorageServiceExecutors<
  TSelectData = ReadContractResult<typeof perpStorageABI, "serviceExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "serviceExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "serviceExecutors", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "serviceExecutors",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"subAccountBorrowingFee"`.
 */
export function usePerpStorageSubAccountBorrowingFee<
  TSelectData = ReadContractResult<typeof perpStorageABI, "subAccountBorrowingFee">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "subAccountBorrowingFee", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "subAccountBorrowingFee",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "subAccountBorrowingFee", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"subAccountPositionIds"`.
 */
export function usePerpStorageSubAccountPositionIds<
  TSelectData = ReadContractResult<typeof perpStorageABI, "subAccountPositionIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "subAccountPositionIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "subAccountPositionIds",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "subAccountPositionIds", TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePerpStorageWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof perpStorageABI, string>["abi"], TFunctionName>
    : UseContractWriteConfig<TMode, typeof perpStorageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, TFunctionName>({ abi: perpStorageABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreasePositionSize"`.
 */
export function usePerpStorageDecreasePositionSize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "decreasePositionSize">["abi"],
        "decreasePositionSize"
      > & { functionName?: "decreasePositionSize" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "decreasePositionSize"> & {
        abi?: never
        functionName?: "decreasePositionSize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "decreasePositionSize">({
    abi: perpStorageABI,
    functionName: "decreasePositionSize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreaseReserved"`.
 */
export function usePerpStorageDecreaseReserved<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "decreaseReserved">["abi"],
        "decreaseReserved"
      > & { functionName?: "decreaseReserved" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "decreaseReserved"> & {
        abi?: never
        functionName?: "decreaseReserved"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "decreaseReserved">({
    abi: perpStorageABI,
    functionName: "decreaseReserved",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"increasePositionSize"`.
 */
export function usePerpStorageIncreasePositionSize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "increasePositionSize">["abi"],
        "increasePositionSize"
      > & { functionName?: "increasePositionSize" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "increasePositionSize"> & {
        abi?: never
        functionName?: "increasePositionSize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "increasePositionSize">({
    abi: perpStorageABI,
    functionName: "increasePositionSize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"initialize"`.
 */
export function usePerpStorageInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "initialize"> & {
        abi?: never
        functionName?: "initialize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "initialize">({
    abi: perpStorageABI,
    functionName: "initialize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"removePositionFromSubAccount"`.
 */
export function usePerpStorageRemovePositionFromSubAccount<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "removePositionFromSubAccount">["abi"],
        "removePositionFromSubAccount"
      > & { functionName?: "removePositionFromSubAccount" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "removePositionFromSubAccount"> & {
        abi?: never
        functionName?: "removePositionFromSubAccount"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "removePositionFromSubAccount">({
    abi: perpStorageABI,
    functionName: "removePositionFromSubAccount",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePerpStorageRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "renounceOwnership">["abi"],
        "renounceOwnership"
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "renounceOwnership"> & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "renounceOwnership">({
    abi: perpStorageABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"savePosition"`.
 */
export function usePerpStorageSavePosition<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "savePosition">["abi"],
        "savePosition"
      > & { functionName?: "savePosition" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "savePosition"> & {
        abi?: never
        functionName?: "savePosition"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "savePosition">({
    abi: perpStorageABI,
    functionName: "savePosition",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"setServiceExecutorBatch"`.
 */
export function usePerpStorageSetServiceExecutorBatch<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "setServiceExecutorBatch">["abi"],
        "setServiceExecutorBatch"
      > & { functionName?: "setServiceExecutorBatch" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "setServiceExecutorBatch"> & {
        abi?: never
        functionName?: "setServiceExecutorBatch"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "setServiceExecutorBatch">({
    abi: perpStorageABI,
    functionName: "setServiceExecutorBatch",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function usePerpStorageSetServiceExecutors<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "setServiceExecutors">["abi"],
        "setServiceExecutors"
      > & { functionName?: "setServiceExecutors" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "setServiceExecutors"> & {
        abi?: never
        functionName?: "setServiceExecutors"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "setServiceExecutors">({
    abi: perpStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePerpStorageTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "transferOwnership">({
    abi: perpStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateAssetClass"`.
 */
export function usePerpStorageUpdateAssetClass<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateAssetClass">["abi"],
        "updateAssetClass"
      > & { functionName?: "updateAssetClass" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateAssetClass"> & {
        abi?: never
        functionName?: "updateAssetClass"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateAssetClass">({
    abi: perpStorageABI,
    functionName: "updateAssetClass",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalLongMarketById"`.
 */
export function usePerpStorageUpdateGlobalLongMarketById<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateGlobalLongMarketById">["abi"],
        "updateGlobalLongMarketById"
      > & { functionName?: "updateGlobalLongMarketById" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateGlobalLongMarketById"> & {
        abi?: never
        functionName?: "updateGlobalLongMarketById"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateGlobalLongMarketById">({
    abi: perpStorageABI,
    functionName: "updateGlobalLongMarketById",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalShortMarketById"`.
 */
export function usePerpStorageUpdateGlobalShortMarketById<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateGlobalShortMarketById">["abi"],
        "updateGlobalShortMarketById"
      > & { functionName?: "updateGlobalShortMarketById" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateGlobalShortMarketById"> & {
        abi?: never
        functionName?: "updateGlobalShortMarketById"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateGlobalShortMarketById">({
    abi: perpStorageABI,
    functionName: "updateGlobalShortMarketById",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalState"`.
 */
export function usePerpStorageUpdateGlobalState<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateGlobalState">["abi"],
        "updateGlobalState"
      > & { functionName?: "updateGlobalState" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateGlobalState"> & {
        abi?: never
        functionName?: "updateGlobalState"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateGlobalState">({
    abi: perpStorageABI,
    functionName: "updateGlobalState",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateMarket"`.
 */
export function usePerpStorageUpdateMarket<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateMarket">["abi"],
        "updateMarket"
      > & { functionName?: "updateMarket" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateMarket"> & {
        abi?: never
        functionName?: "updateMarket"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateMarket">({
    abi: perpStorageABI,
    functionName: "updateMarket",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePreparePerpStorageWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof perpStorageABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: perpStorageABI, ...config } as UsePrepareContractWriteConfig<
    typeof perpStorageABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreasePositionSize"`.
 */
export function usePreparePerpStorageDecreasePositionSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "decreasePositionSize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "decreasePositionSize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "decreasePositionSize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreaseReserved"`.
 */
export function usePreparePerpStorageDecreaseReserved(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "decreaseReserved">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "decreaseReserved",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "decreaseReserved">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"increasePositionSize"`.
 */
export function usePreparePerpStorageIncreasePositionSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "increasePositionSize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "increasePositionSize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "increasePositionSize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"initialize"`.
 */
export function usePreparePerpStorageInitialize(
  config: Omit<UsePrepareContractWriteConfig<typeof perpStorageABI, "initialize">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "initialize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"removePositionFromSubAccount"`.
 */
export function usePreparePerpStorageRemovePositionFromSubAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "removePositionFromSubAccount">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "removePositionFromSubAccount",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "removePositionFromSubAccount">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePreparePerpStorageRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"savePosition"`.
 */
export function usePreparePerpStorageSavePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "savePosition">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "savePosition",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "savePosition">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"setServiceExecutorBatch"`.
 */
export function usePreparePerpStorageSetServiceExecutorBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "setServiceExecutorBatch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "setServiceExecutorBatch",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "setServiceExecutorBatch">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function usePreparePerpStorageSetServiceExecutors(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "setServiceExecutors">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "setServiceExecutors">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePerpStorageTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "transferOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateAssetClass"`.
 */
export function usePreparePerpStorageUpdateAssetClass(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateAssetClass">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateAssetClass",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateAssetClass">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalLongMarketById"`.
 */
export function usePreparePerpStorageUpdateGlobalLongMarketById(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalLongMarketById">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateGlobalLongMarketById",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalLongMarketById">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalShortMarketById"`.
 */
export function usePreparePerpStorageUpdateGlobalShortMarketById(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalShortMarketById">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateGlobalShortMarketById",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalShortMarketById">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalState"`.
 */
export function usePreparePerpStorageUpdateGlobalState(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalState">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateGlobalState",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalState">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateMarket"`.
 */
export function usePreparePerpStorageUpdateMarket(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateMarket">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateMarket",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateMarket">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePerpStorageEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof perpStorageABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: perpStorageABI, ...config } as UseContractEventConfig<
    typeof perpStorageABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link perpStorageABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePerpStorageInitializedEvent(
  config: Omit<UseContractEventConfig<typeof perpStorageABI, "Initialized">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: perpStorageABI, eventName: "Initialized", ...config } as UseContractEventConfig<
    typeof perpStorageABI,
    "Initialized"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link perpStorageABI}__ and `eventName` set to `"LogSetServiceExecutor"`.
 */
export function usePerpStorageLogSetServiceExecutorEvent(
  config: Omit<UseContractEventConfig<typeof perpStorageABI, "LogSetServiceExecutor">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: perpStorageABI,
    eventName: "LogSetServiceExecutor",
    ...config,
  } as UseContractEventConfig<typeof perpStorageABI, "LogSetServiceExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link perpStorageABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePerpStorageOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof perpStorageABI, "OwnershipTransferred">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: perpStorageABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof perpStorageABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function useVaultStorage(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: vaultStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function useVaultStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vaultStorageABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof vaultStorageABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: vaultStorageABI, ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"borrowingFeeDebt"`.
 */
export function useVaultStorageBorrowingFeeDebt<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "borrowingFeeDebt">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "borrowingFeeDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "borrowingFeeDebt", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "borrowingFeeDebt",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"devFees"`.
 */
export function useVaultStorageDevFees<TSelectData = ReadContractResult<typeof vaultStorageABI, "devFees">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "devFees", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "devFees", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "devFees",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"fundingFeeDebt"`.
 */
export function useVaultStorageFundingFeeDebt<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "fundingFeeDebt">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "fundingFeeDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "fundingFeeDebt", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "fundingFeeDebt",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"fundingFeeReserve"`.
 */
export function useVaultStorageFundingFeeReserve<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "fundingFeeReserve">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "fundingFeeReserve", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "fundingFeeReserve",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "fundingFeeReserve", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"getTraderTokens"`.
 */
export function useVaultStorageGetTraderTokens<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "getTraderTokens">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "getTraderTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "getTraderTokens", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "getTraderTokens",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"globalBorrowingFeeDebt"`.
 */
export function useVaultStorageGlobalBorrowingFeeDebt<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "globalBorrowingFeeDebt">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "globalBorrowingFeeDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "globalBorrowingFeeDebt",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "globalBorrowingFeeDebt", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"globalFundingFeeDebt"`.
 */
export function useVaultStorageGlobalFundingFeeDebt<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "globalFundingFeeDebt">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "globalFundingFeeDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "globalFundingFeeDebt",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "globalFundingFeeDebt", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"globalLossDebt"`.
 */
export function useVaultStorageGlobalLossDebt<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "globalLossDebt">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "globalLossDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "globalLossDebt", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "globalLossDebt",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"globalTradingFeeDebt"`.
 */
export function useVaultStorageGlobalTradingFeeDebt<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "globalTradingFeeDebt">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "globalTradingFeeDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "globalTradingFeeDebt",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "globalTradingFeeDebt", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"hlpLiquidity"`.
 */
export function useVaultStorageHlpLiquidity<TSelectData = ReadContractResult<typeof vaultStorageABI, "hlpLiquidity">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "hlpLiquidity", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "hlpLiquidity", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "hlpLiquidity",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"hlpLiquidityDebtUSDE30"`.
 */
export function useVaultStorageHlpLiquidityDebtUsde30<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "hlpLiquidityDebtUSDE30">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "hlpLiquidityDebtUSDE30", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "hlpLiquidityDebtUSDE30",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "hlpLiquidityDebtUSDE30", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"lossDebt"`.
 */
export function useVaultStorageLossDebt<TSelectData = ReadContractResult<typeof vaultStorageABI, "lossDebt">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "lossDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "lossDebt", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "lossDebt",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"owner"`.
 */
export function useVaultStorageOwner<TSelectData = ReadContractResult<typeof vaultStorageABI, "owner">>(
  config: Omit<UseContractReadConfig<typeof vaultStorageABI, "owner", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"protocolFees"`.
 */
export function useVaultStorageProtocolFees<TSelectData = ReadContractResult<typeof vaultStorageABI, "protocolFees">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "protocolFees", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "protocolFees", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "protocolFees",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"serviceExecutors"`.
 */
export function useVaultStorageServiceExecutors<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "serviceExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "serviceExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "serviceExecutors", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "serviceExecutors",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"strategyAllowances"`.
 */
export function useVaultStorageStrategyAllowances<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "strategyAllowances">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "strategyAllowances", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "strategyAllowances",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "strategyAllowances", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"strategyFunctionSigAllowances"`.
 */
export function useVaultStorageStrategyFunctionSigAllowances<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "strategyFunctionSigAllowances">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "strategyFunctionSigAllowances", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "strategyFunctionSigAllowances",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "strategyFunctionSigAllowances", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"totalAmount"`.
 */
export function useVaultStorageTotalAmount<TSelectData = ReadContractResult<typeof vaultStorageABI, "totalAmount">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "totalAmount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "totalAmount", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "totalAmount",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"traderBalances"`.
 */
export function useVaultStorageTraderBalances<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "traderBalances">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "traderBalances", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "traderBalances", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "traderBalances",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"traderTokens"`.
 */
export function useVaultStorageTraderTokens<TSelectData = ReadContractResult<typeof vaultStorageABI, "traderTokens">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "traderTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "traderTokens", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "traderTokens",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"tradingFeeDebt"`.
 */
export function useVaultStorageTradingFeeDebt<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "tradingFeeDebt">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "tradingFeeDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "tradingFeeDebt", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "tradingFeeDebt",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"validateAddTraderToken"`.
 */
export function useVaultStorageValidateAddTraderToken<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "validateAddTraderToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "validateAddTraderToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "validateAddTraderToken",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "validateAddTraderToken", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"validateRemoveTraderToken"`.
 */
export function useVaultStorageValidateRemoveTraderToken<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "validateRemoveTraderToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "validateRemoveTraderToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "validateRemoveTraderToken",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "validateRemoveTraderToken", TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function useVaultStorageWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vaultStorageABI, string>["abi"], TFunctionName>
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, TFunctionName>({ abi: vaultStorageABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addBorrowingFeeDebt"`.
 */
export function useVaultStorageAddBorrowingFeeDebt<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addBorrowingFeeDebt">["abi"],
        "addBorrowingFeeDebt"
      > & { functionName?: "addBorrowingFeeDebt" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addBorrowingFeeDebt"> & {
        abi?: never
        functionName?: "addBorrowingFeeDebt"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addBorrowingFeeDebt">({
    abi: vaultStorageABI,
    functionName: "addBorrowingFeeDebt",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFee"`.
 */
export function useVaultStorageAddFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vaultStorageABI, "addFee">["abi"], "addFee"> & {
        functionName?: "addFee"
      }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addFee"> & {
        abi?: never
        functionName?: "addFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addFee">({
    abi: vaultStorageABI,
    functionName: "addFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFundingFee"`.
 */
export function useVaultStorageAddFundingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addFundingFee">["abi"],
        "addFundingFee"
      > & { functionName?: "addFundingFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addFundingFee"> & {
        abi?: never
        functionName?: "addFundingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addFundingFee">({
    abi: vaultStorageABI,
    functionName: "addFundingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFundingFeeDebt"`.
 */
export function useVaultStorageAddFundingFeeDebt<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addFundingFeeDebt">["abi"],
        "addFundingFeeDebt"
      > & { functionName?: "addFundingFeeDebt" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addFundingFeeDebt"> & {
        abi?: never
        functionName?: "addFundingFeeDebt"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addFundingFeeDebt">({
    abi: vaultStorageABI,
    functionName: "addFundingFeeDebt",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addHLPLiquidity"`.
 */
export function useVaultStorageAddHlpLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addHLPLiquidity">["abi"],
        "addHLPLiquidity"
      > & { functionName?: "addHLPLiquidity" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addHLPLiquidity"> & {
        abi?: never
        functionName?: "addHLPLiquidity"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addHLPLiquidity">({
    abi: vaultStorageABI,
    functionName: "addHLPLiquidity",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addHlpLiquidityDebtUSDE30"`.
 */
export function useVaultStorageAddHlpLiquidityDebtUsde30<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addHlpLiquidityDebtUSDE30">["abi"],
        "addHlpLiquidityDebtUSDE30"
      > & { functionName?: "addHlpLiquidityDebtUSDE30" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addHlpLiquidityDebtUSDE30"> & {
        abi?: never
        functionName?: "addHlpLiquidityDebtUSDE30"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addHlpLiquidityDebtUSDE30">({
    abi: vaultStorageABI,
    functionName: "addHlpLiquidityDebtUSDE30",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addLossDebt"`.
 */
export function useVaultStorageAddLossDebt<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addLossDebt">["abi"],
        "addLossDebt"
      > & { functionName?: "addLossDebt" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addLossDebt"> & {
        abi?: never
        functionName?: "addLossDebt"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addLossDebt">({
    abi: vaultStorageABI,
    functionName: "addLossDebt",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addTradingFeeDebt"`.
 */
export function useVaultStorageAddTradingFeeDebt<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addTradingFeeDebt">["abi"],
        "addTradingFeeDebt"
      > & { functionName?: "addTradingFeeDebt" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addTradingFeeDebt"> & {
        abi?: never
        functionName?: "addTradingFeeDebt"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addTradingFeeDebt">({
    abi: vaultStorageABI,
    functionName: "addTradingFeeDebt",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"borrowFundingFeeFromHlpToTrader"`.
 */
export function useVaultStorageBorrowFundingFeeFromHlpToTrader<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "borrowFundingFeeFromHlpToTrader">["abi"],
        "borrowFundingFeeFromHlpToTrader"
      > & { functionName?: "borrowFundingFeeFromHlpToTrader" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "borrowFundingFeeFromHlpToTrader"> & {
        abi?: never
        functionName?: "borrowFundingFeeFromHlpToTrader"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "borrowFundingFeeFromHlpToTrader">({
    abi: vaultStorageABI,
    functionName: "borrowFundingFeeFromHlpToTrader",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"convertFundingFeeReserveWithHLP"`.
 */
export function useVaultStorageConvertFundingFeeReserveWithHlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "convertFundingFeeReserveWithHLP">["abi"],
        "convertFundingFeeReserveWithHLP"
      > & { functionName?: "convertFundingFeeReserveWithHLP" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "convertFundingFeeReserveWithHLP"> & {
        abi?: never
        functionName?: "convertFundingFeeReserveWithHLP"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "convertFundingFeeReserveWithHLP">({
    abi: vaultStorageABI,
    functionName: "convertFundingFeeReserveWithHLP",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"cook"`.
 */
export function useVaultStorageCook<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vaultStorageABI, "cook">["abi"], "cook"> & {
        functionName?: "cook"
      }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "cook"> & {
        abi?: never
        functionName?: "cook"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "cook">({
    abi: vaultStorageABI,
    functionName: "cook",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"decreaseTraderBalance"`.
 */
export function useVaultStorageDecreaseTraderBalance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "decreaseTraderBalance">["abi"],
        "decreaseTraderBalance"
      > & { functionName?: "decreaseTraderBalance" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "decreaseTraderBalance"> & {
        abi?: never
        functionName?: "decreaseTraderBalance"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "decreaseTraderBalance">({
    abi: vaultStorageABI,
    functionName: "decreaseTraderBalance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"increaseTraderBalance"`.
 */
export function useVaultStorageIncreaseTraderBalance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "increaseTraderBalance">["abi"],
        "increaseTraderBalance"
      > & { functionName?: "increaseTraderBalance" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "increaseTraderBalance"> & {
        abi?: never
        functionName?: "increaseTraderBalance"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "increaseTraderBalance">({
    abi: vaultStorageABI,
    functionName: "increaseTraderBalance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"initialize"`.
 */
export function useVaultStorageInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "initialize"> & {
        abi?: never
        functionName?: "initialize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "initialize">({
    abi: vaultStorageABI,
    functionName: "initialize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payBorrowingFee"`.
 */
export function useVaultStoragePayBorrowingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payBorrowingFee">["abi"],
        "payBorrowingFee"
      > & { functionName?: "payBorrowingFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payBorrowingFee"> & {
        abi?: never
        functionName?: "payBorrowingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payBorrowingFee">({
    abi: vaultStorageABI,
    functionName: "payBorrowingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromFundingFeeReserveToTrader"`.
 */
export function useVaultStoragePayFundingFeeFromFundingFeeReserveToTrader<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader">["abi"],
        "payFundingFeeFromFundingFeeReserveToTrader"
      > & { functionName?: "payFundingFeeFromFundingFeeReserveToTrader" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader"> & {
        abi?: never
        functionName?: "payFundingFeeFromFundingFeeReserveToTrader"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader">({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromFundingFeeReserveToTrader",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromHlpToTrader"`.
 */
export function useVaultStoragePayFundingFeeFromHlpToTrader<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payFundingFeeFromHlpToTrader">["abi"],
        "payFundingFeeFromHlpToTrader"
      > & { functionName?: "payFundingFeeFromHlpToTrader" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payFundingFeeFromHlpToTrader"> & {
        abi?: never
        functionName?: "payFundingFeeFromHlpToTrader"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payFundingFeeFromHlpToTrader">({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromHlpToTrader",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromTraderToFundingFeeReserve"`.
 */
export function useVaultStoragePayFundingFeeFromTraderToFundingFeeReserve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve">["abi"],
        "payFundingFeeFromTraderToFundingFeeReserve"
      > & { functionName?: "payFundingFeeFromTraderToFundingFeeReserve" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve"> & {
        abi?: never
        functionName?: "payFundingFeeFromTraderToFundingFeeReserve"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve">({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromTraderToFundingFeeReserve",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromTraderToHlp"`.
 */
export function useVaultStoragePayFundingFeeFromTraderToHlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payFundingFeeFromTraderToHlp">["abi"],
        "payFundingFeeFromTraderToHlp"
      > & { functionName?: "payFundingFeeFromTraderToHlp" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payFundingFeeFromTraderToHlp"> & {
        abi?: never
        functionName?: "payFundingFeeFromTraderToHlp"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payFundingFeeFromTraderToHlp">({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromTraderToHlp",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payHlp"`.
 */
export function useVaultStoragePayHlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vaultStorageABI, "payHlp">["abi"], "payHlp"> & {
        functionName?: "payHlp"
      }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payHlp"> & {
        abi?: never
        functionName?: "payHlp"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payHlp">({
    abi: vaultStorageABI,
    functionName: "payHlp",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payTraderProfit"`.
 */
export function useVaultStoragePayTraderProfit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payTraderProfit">["abi"],
        "payTraderProfit"
      > & { functionName?: "payTraderProfit" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payTraderProfit"> & {
        abi?: never
        functionName?: "payTraderProfit"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payTraderProfit">({
    abi: vaultStorageABI,
    functionName: "payTraderProfit",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payTradingFee"`.
 */
export function useVaultStoragePayTradingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payTradingFee">["abi"],
        "payTradingFee"
      > & { functionName?: "payTradingFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payTradingFee"> & {
        abi?: never
        functionName?: "payTradingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payTradingFee">({
    abi: vaultStorageABI,
    functionName: "payTradingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pullToken"`.
 */
export function useVaultStoragePullToken<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "pullToken">["abi"],
        "pullToken"
      > & { functionName?: "pullToken" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "pullToken"> & {
        abi?: never
        functionName?: "pullToken"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "pullToken">({
    abi: vaultStorageABI,
    functionName: "pullToken",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pushToken"`.
 */
export function useVaultStoragePushToken<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "pushToken">["abi"],
        "pushToken"
      > & { functionName?: "pushToken" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "pushToken"> & {
        abi?: never
        functionName?: "pushToken"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "pushToken">({
    abi: vaultStorageABI,
    functionName: "pushToken",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeFundingFee"`.
 */
export function useVaultStorageRemoveFundingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "removeFundingFee">["abi"],
        "removeFundingFee"
      > & { functionName?: "removeFundingFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "removeFundingFee"> & {
        abi?: never
        functionName?: "removeFundingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "removeFundingFee">({
    abi: vaultStorageABI,
    functionName: "removeFundingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeHLPLiquidity"`.
 */
export function useVaultStorageRemoveHlpLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "removeHLPLiquidity">["abi"],
        "removeHLPLiquidity"
      > & { functionName?: "removeHLPLiquidity" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "removeHLPLiquidity"> & {
        abi?: never
        functionName?: "removeHLPLiquidity"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "removeHLPLiquidity">({
    abi: vaultStorageABI,
    functionName: "removeHLPLiquidity",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeHlpLiquidityDebtUSDE30"`.
 */
export function useVaultStorageRemoveHlpLiquidityDebtUsde30<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "removeHlpLiquidityDebtUSDE30">["abi"],
        "removeHlpLiquidityDebtUSDE30"
      > & { functionName?: "removeHlpLiquidityDebtUSDE30" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "removeHlpLiquidityDebtUSDE30"> & {
        abi?: never
        functionName?: "removeHlpLiquidityDebtUSDE30"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "removeHlpLiquidityDebtUSDE30">({
    abi: vaultStorageABI,
    functionName: "removeHlpLiquidityDebtUSDE30",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useVaultStorageRenounceOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "renounceOwnership">["abi"],
        "renounceOwnership"
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "renounceOwnership"> & {
        abi?: never
        functionName?: "renounceOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "renounceOwnership">({
    abi: vaultStorageABI,
    functionName: "renounceOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"repayFundingFeeDebtFromTraderToHlp"`.
 */
export function useVaultStorageRepayFundingFeeDebtFromTraderToHlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToHlp">["abi"],
        "repayFundingFeeDebtFromTraderToHlp"
      > & { functionName?: "repayFundingFeeDebtFromTraderToHlp" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToHlp"> & {
        abi?: never
        functionName?: "repayFundingFeeDebtFromTraderToHlp"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToHlp">({
    abi: vaultStorageABI,
    functionName: "repayFundingFeeDebtFromTraderToHlp",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setServiceExecutorBatch"`.
 */
export function useVaultStorageSetServiceExecutorBatch<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "setServiceExecutorBatch">["abi"],
        "setServiceExecutorBatch"
      > & { functionName?: "setServiceExecutorBatch" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "setServiceExecutorBatch"> & {
        abi?: never
        functionName?: "setServiceExecutorBatch"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "setServiceExecutorBatch">({
    abi: vaultStorageABI,
    functionName: "setServiceExecutorBatch",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function useVaultStorageSetServiceExecutors<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "setServiceExecutors">["abi"],
        "setServiceExecutors"
      > & { functionName?: "setServiceExecutors" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "setServiceExecutors"> & {
        abi?: never
        functionName?: "setServiceExecutors"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "setServiceExecutors">({
    abi: vaultStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setStrategyAllowance"`.
 */
export function useVaultStorageSetStrategyAllowance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "setStrategyAllowance">["abi"],
        "setStrategyAllowance"
      > & { functionName?: "setStrategyAllowance" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "setStrategyAllowance"> & {
        abi?: never
        functionName?: "setStrategyAllowance"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "setStrategyAllowance">({
    abi: vaultStorageABI,
    functionName: "setStrategyAllowance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setStrategyFunctionSigAllowance"`.
 */
export function useVaultStorageSetStrategyFunctionSigAllowance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "setStrategyFunctionSigAllowance">["abi"],
        "setStrategyFunctionSigAllowance"
      > & { functionName?: "setStrategyFunctionSigAllowance" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "setStrategyFunctionSigAllowance"> & {
        abi?: never
        functionName?: "setStrategyFunctionSigAllowance"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "setStrategyFunctionSigAllowance">({
    abi: vaultStorageABI,
    functionName: "setStrategyFunctionSigAllowance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"subBorrowingFeeDebt"`.
 */
export function useVaultStorageSubBorrowingFeeDebt<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "subBorrowingFeeDebt">["abi"],
        "subBorrowingFeeDebt"
      > & { functionName?: "subBorrowingFeeDebt" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "subBorrowingFeeDebt"> & {
        abi?: never
        functionName?: "subBorrowingFeeDebt"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "subBorrowingFeeDebt">({
    abi: vaultStorageABI,
    functionName: "subBorrowingFeeDebt",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"subFundingFeeDebt"`.
 */
export function useVaultStorageSubFundingFeeDebt<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "subFundingFeeDebt">["abi"],
        "subFundingFeeDebt"
      > & { functionName?: "subFundingFeeDebt" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "subFundingFeeDebt"> & {
        abi?: never
        functionName?: "subFundingFeeDebt"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "subFundingFeeDebt">({
    abi: vaultStorageABI,
    functionName: "subFundingFeeDebt",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"subLossDebt"`.
 */
export function useVaultStorageSubLossDebt<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "subLossDebt">["abi"],
        "subLossDebt"
      > & { functionName?: "subLossDebt" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "subLossDebt"> & {
        abi?: never
        functionName?: "subLossDebt"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "subLossDebt">({
    abi: vaultStorageABI,
    functionName: "subLossDebt",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"subTradingFeeDebt"`.
 */
export function useVaultStorageSubTradingFeeDebt<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "subTradingFeeDebt">["abi"],
        "subTradingFeeDebt"
      > & { functionName?: "subTradingFeeDebt" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "subTradingFeeDebt"> & {
        abi?: never
        functionName?: "subTradingFeeDebt"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "subTradingFeeDebt">({
    abi: vaultStorageABI,
    functionName: "subTradingFeeDebt",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"transfer"`.
 */
export function useVaultStorageTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "transfer"> & {
        abi?: never
        functionName?: "transfer"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "transfer">({
    abi: vaultStorageABI,
    functionName: "transfer",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useVaultStorageTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "transferOwnership">({
    abi: vaultStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"withdrawDevFee"`.
 */
export function useVaultStorageWithdrawDevFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "withdrawDevFee">["abi"],
        "withdrawDevFee"
      > & { functionName?: "withdrawDevFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "withdrawDevFee"> & {
        abi?: never
        functionName?: "withdrawDevFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "withdrawDevFee">({
    abi: vaultStorageABI,
    functionName: "withdrawDevFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"withdrawFee"`.
 */
export function useVaultStorageWithdrawFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "withdrawFee">["abi"],
        "withdrawFee"
      > & { functionName?: "withdrawFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "withdrawFee"> & {
        abi?: never
        functionName?: "withdrawFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "withdrawFee">({
    abi: vaultStorageABI,
    functionName: "withdrawFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"withdrawSurplusFromFundingFeeReserveToHLP"`.
 */
export function useVaultStorageWithdrawSurplusFromFundingFeeReserveToHlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "withdrawSurplusFromFundingFeeReserveToHLP">["abi"],
        "withdrawSurplusFromFundingFeeReserveToHLP"
      > & { functionName?: "withdrawSurplusFromFundingFeeReserveToHLP" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "withdrawSurplusFromFundingFeeReserveToHLP"> & {
        abi?: never
        functionName?: "withdrawSurplusFromFundingFeeReserveToHLP"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "withdrawSurplusFromFundingFeeReserveToHLP">({
    abi: vaultStorageABI,
    functionName: "withdrawSurplusFromFundingFeeReserveToHLP",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function usePrepareVaultStorageWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: vaultStorageABI, ...config } as UsePrepareContractWriteConfig<
    typeof vaultStorageABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addBorrowingFeeDebt"`.
 */
export function usePrepareVaultStorageAddBorrowingFeeDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addBorrowingFeeDebt">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addBorrowingFeeDebt",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addBorrowingFeeDebt">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFee"`.
 */
export function usePrepareVaultStorageAddFee(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFee">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFundingFee"`.
 */
export function usePrepareVaultStorageAddFundingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFundingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addFundingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFundingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFundingFeeDebt"`.
 */
export function usePrepareVaultStorageAddFundingFeeDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFundingFeeDebt">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addFundingFeeDebt",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFundingFeeDebt">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addHLPLiquidity"`.
 */
export function usePrepareVaultStorageAddHlpLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addHLPLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addHLPLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addHLPLiquidity">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addHlpLiquidityDebtUSDE30"`.
 */
export function usePrepareVaultStorageAddHlpLiquidityDebtUsde30(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addHlpLiquidityDebtUSDE30">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addHlpLiquidityDebtUSDE30",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addHlpLiquidityDebtUSDE30">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addLossDebt"`.
 */
export function usePrepareVaultStorageAddLossDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addLossDebt">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addLossDebt",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addLossDebt">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addTradingFeeDebt"`.
 */
export function usePrepareVaultStorageAddTradingFeeDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addTradingFeeDebt">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addTradingFeeDebt",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addTradingFeeDebt">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"borrowFundingFeeFromHlpToTrader"`.
 */
export function usePrepareVaultStorageBorrowFundingFeeFromHlpToTrader(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "borrowFundingFeeFromHlpToTrader">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "borrowFundingFeeFromHlpToTrader",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "borrowFundingFeeFromHlpToTrader">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"convertFundingFeeReserveWithHLP"`.
 */
export function usePrepareVaultStorageConvertFundingFeeReserveWithHlp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "convertFundingFeeReserveWithHLP">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "convertFundingFeeReserveWithHLP",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "convertFundingFeeReserveWithHLP">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"cook"`.
 */
export function usePrepareVaultStorageCook(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "cook">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "cook",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "cook">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"decreaseTraderBalance"`.
 */
export function usePrepareVaultStorageDecreaseTraderBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "decreaseTraderBalance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "decreaseTraderBalance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "decreaseTraderBalance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"increaseTraderBalance"`.
 */
export function usePrepareVaultStorageIncreaseTraderBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "increaseTraderBalance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "increaseTraderBalance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "increaseTraderBalance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareVaultStorageInitialize(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "initialize">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "initialize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payBorrowingFee"`.
 */
export function usePrepareVaultStoragePayBorrowingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payBorrowingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payBorrowingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payBorrowingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromFundingFeeReserveToTrader"`.
 */
export function usePrepareVaultStoragePayFundingFeeFromFundingFeeReserveToTrader(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromFundingFeeReserveToTrader",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromHlpToTrader"`.
 */
export function usePrepareVaultStoragePayFundingFeeFromHlpToTrader(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromHlpToTrader">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromHlpToTrader",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromHlpToTrader">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromTraderToFundingFeeReserve"`.
 */
export function usePrepareVaultStoragePayFundingFeeFromTraderToFundingFeeReserve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromTraderToFundingFeeReserve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromTraderToHlp"`.
 */
export function usePrepareVaultStoragePayFundingFeeFromTraderToHlp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromTraderToHlp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromTraderToHlp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromTraderToHlp">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payHlp"`.
 */
export function usePrepareVaultStoragePayHlp(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "payHlp">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payHlp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payHlp">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payTraderProfit"`.
 */
export function usePrepareVaultStoragePayTraderProfit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payTraderProfit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payTraderProfit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payTraderProfit">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payTradingFee"`.
 */
export function usePrepareVaultStoragePayTradingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payTradingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payTradingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payTradingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pullToken"`.
 */
export function usePrepareVaultStoragePullToken(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "pullToken">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "pullToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "pullToken">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pushToken"`.
 */
export function usePrepareVaultStoragePushToken(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "pushToken">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "pushToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "pushToken">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeFundingFee"`.
 */
export function usePrepareVaultStorageRemoveFundingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeFundingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "removeFundingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeFundingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeHLPLiquidity"`.
 */
export function usePrepareVaultStorageRemoveHlpLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeHLPLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "removeHLPLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeHLPLiquidity">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeHlpLiquidityDebtUSDE30"`.
 */
export function usePrepareVaultStorageRemoveHlpLiquidityDebtUsde30(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeHlpLiquidityDebtUSDE30">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "removeHlpLiquidityDebtUSDE30",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeHlpLiquidityDebtUSDE30">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareVaultStorageRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "renounceOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"repayFundingFeeDebtFromTraderToHlp"`.
 */
export function usePrepareVaultStorageRepayFundingFeeDebtFromTraderToHlp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToHlp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "repayFundingFeeDebtFromTraderToHlp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToHlp">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setServiceExecutorBatch"`.
 */
export function usePrepareVaultStorageSetServiceExecutorBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "setServiceExecutorBatch">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "setServiceExecutorBatch",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "setServiceExecutorBatch">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function usePrepareVaultStorageSetServiceExecutors(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "setServiceExecutors">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "setServiceExecutors">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setStrategyAllowance"`.
 */
export function usePrepareVaultStorageSetStrategyAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "setStrategyAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "setStrategyAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "setStrategyAllowance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setStrategyFunctionSigAllowance"`.
 */
export function usePrepareVaultStorageSetStrategyFunctionSigAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "setStrategyFunctionSigAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "setStrategyFunctionSigAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "setStrategyFunctionSigAllowance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"subBorrowingFeeDebt"`.
 */
export function usePrepareVaultStorageSubBorrowingFeeDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "subBorrowingFeeDebt">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "subBorrowingFeeDebt",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "subBorrowingFeeDebt">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"subFundingFeeDebt"`.
 */
export function usePrepareVaultStorageSubFundingFeeDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "subFundingFeeDebt">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "subFundingFeeDebt",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "subFundingFeeDebt">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"subLossDebt"`.
 */
export function usePrepareVaultStorageSubLossDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "subLossDebt">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "subLossDebt",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "subLossDebt">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"subTradingFeeDebt"`.
 */
export function usePrepareVaultStorageSubTradingFeeDebt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "subTradingFeeDebt">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "subTradingFeeDebt",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "subTradingFeeDebt">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareVaultStorageTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "transfer">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "transfer">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareVaultStorageTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "transferOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"withdrawDevFee"`.
 */
export function usePrepareVaultStorageWithdrawDevFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "withdrawDevFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "withdrawDevFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "withdrawDevFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"withdrawFee"`.
 */
export function usePrepareVaultStorageWithdrawFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "withdrawFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "withdrawFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "withdrawFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"withdrawSurplusFromFundingFeeReserveToHLP"`.
 */
export function usePrepareVaultStorageWithdrawSurplusFromFundingFeeReserveToHlp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "withdrawSurplusFromFundingFeeReserveToHLP">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "withdrawSurplusFromFundingFeeReserveToHLP",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "withdrawSurplusFromFundingFeeReserveToHLP">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function useVaultStorageEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof vaultStorageABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: vaultStorageABI, ...config } as UseContractEventConfig<
    typeof vaultStorageABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__ and `eventName` set to `"Initialized"`.
 */
export function useVaultStorageInitializedEvent(
  config: Omit<UseContractEventConfig<typeof vaultStorageABI, "Initialized">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: vaultStorageABI, eventName: "Initialized", ...config } as UseContractEventConfig<
    typeof vaultStorageABI,
    "Initialized"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__ and `eventName` set to `"LogSetServiceExecutor"`.
 */
export function useVaultStorageLogSetServiceExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultStorageABI, "LogSetServiceExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultStorageABI,
    eventName: "LogSetServiceExecutor",
    ...config,
  } as UseContractEventConfig<typeof vaultStorageABI, "LogSetServiceExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__ and `eventName` set to `"LogSetStrategyAllowance"`.
 */
export function useVaultStorageLogSetStrategyAllowanceEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultStorageABI, "LogSetStrategyAllowance">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultStorageABI,
    eventName: "LogSetStrategyAllowance",
    ...config,
  } as UseContractEventConfig<typeof vaultStorageABI, "LogSetStrategyAllowance">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__ and `eventName` set to `"LogSetStrategyFunctionSigAllowance"`.
 */
export function useVaultStorageLogSetStrategyFunctionSigAllowanceEvent(
  config: Omit<
    UseContractEventConfig<typeof vaultStorageABI, "LogSetStrategyFunctionSigAllowance">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: vaultStorageABI,
    eventName: "LogSetStrategyFunctionSigAllowance",
    ...config,
  } as UseContractEventConfig<typeof vaultStorageABI, "LogSetStrategyFunctionSigAllowance">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__ and `eventName` set to `"LogSetTraderBalance"`.
 */
export function useVaultStorageLogSetTraderBalanceEvent(
  config: Omit<UseContractEventConfig<typeof vaultStorageABI, "LogSetTraderBalance">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: vaultStorageABI,
    eventName: "LogSetTraderBalance",
    ...config,
  } as UseContractEventConfig<typeof vaultStorageABI, "LogSetTraderBalance">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useVaultStorageOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof vaultStorageABI, "OwnershipTransferred">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: vaultStorageABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof vaultStorageABI, "OwnershipTransferred">)
}
