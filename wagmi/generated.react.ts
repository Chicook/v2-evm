// Generated by @wagmi/cli@0.1.14 on 3/28/2023 at 3:11:39 PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi"
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from "wagmi/actions"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BotHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const botHandlerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_tradeService", internalType: "address", type: "address" },
      { name: "_liquidationService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
    ],
  },
  { type: "error", inputs: [], name: "IBotHandler_UnauthorizedSender" },
  { type: "error", inputs: [], name: "Owned_NotOwner" },
  { type: "error", inputs: [], name: "Owned_NotPendingOwner" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_account", internalType: "address", type: "address", indexed: true },
      { name: "_subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "_marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCloseDelistedMarketPosition",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_account", internalType: "address", type: "address", indexed: true },
      { name: "_subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "_marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogDeleverage",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "_subAccount", internalType: "address", type: "address", indexed: false }],
    name: "LogLiquidate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_oldLiquidationService", internalType: "address", type: "address", indexed: false },
      { name: "_newLiquidationService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetLiquidationService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_address", internalType: "address", type: "address", indexed: false },
      { name: "_allowed", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetPositionManager",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_oldPyth", internalType: "address", type: "address", indexed: false },
      { name: "_newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_oldTradeService", internalType: "address", type: "address", indexed: false },
      { name: "_newTradeService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetTradeService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_account", internalType: "address", type: "address", indexed: true },
      { name: "_subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "_marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogTakeMaxProfit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "_newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "acceptOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "closeDelistedMarketPosition",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "deleverage",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "forceTakeMaxProfit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "liquidate",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidationService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "positionManagers",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newLiquidationService", internalType: "address", type: "address" }],
    name: "setLiquidationService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_addresses", internalType: "address[]", type: "address[]" },
      { name: "_isAllowed", internalType: "bool", type: "bool" },
    ],
    name: "setPositionManagers",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newPyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newTradeService", internalType: "address", type: "address" }],
    name: "setTradeService",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradeService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ConfigStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const configStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IConfigStorage_BadArgs" },
  { type: "error", inputs: [], name: "IConfigStorage_BadLen" },
  { type: "error", inputs: [], name: "IConfigStorage_ExceedLimitSetting" },
  { type: "error", inputs: [], name: "IConfigStorage_NotAcceptedCollateral" },
  { type: "error", inputs: [], name: "IConfigStorage_NotAcceptedLiquidity" },
  { type: "error", inputs: [], name: "IConfigStorage_NotWhiteListed" },
  { type: "error", inputs: [], name: "Owned_NotOwner" },
  { type: "error", inputs: [], name: "Owned_NotPendingOwner" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogAddAssetClassConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: "LogAddMarketConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_token", internalType: "address", type: "address", indexed: false },
      {
        name: "_config",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogAddOrUpdatePLPTokenConfigs",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false }],
    name: "LogDelistMarket",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "token", internalType: "address", type: "address", indexed: false }],
    name: "LogRemoveUnderlying",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogSetAssetClassConfigByIndex",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetAssetConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldCalculator", internalType: "address", type: "address", indexed: true },
      { name: "newCalculator", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetCalculator",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetCollateralTokenConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "enabled", internalType: "bool", type: "bool", indexed: false }],
    name: "LogSetDynamicEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogSetLiquidationConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldLiquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
        indexed: true,
      },
      {
        name: "newLiquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetLiquidityConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "_enabled", internalType: "bool", type: "bool", indexed: false }],
    name: "LogSetLiquidityEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: "LogSetMarketConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldOracle", internalType: "address", type: "address", indexed: true },
      { name: "newOracle", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetOracle",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPlp", internalType: "address", type: "address", indexed: true },
      { name: "newPlp", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPLP",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetPlpTokenConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPnlFactorBPS", internalType: "uint32", type: "uint32", indexed: false },
      { name: "newPnlFactorBPS", internalType: "uint32", type: "uint32", indexed: false },
    ],
    name: "LogSetPnlFactor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "contractAddress", internalType: "address", type: "address", indexed: true },
      { name: "executorAddress", internalType: "address", type: "address", indexed: false },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetServiceExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetSwapConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetTradingConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldWeth", internalType: "address", type: "address", indexed: true },
      { name: "newWeth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetWeth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "_newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ITERABLE_ADDRESS_LIST_END",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ITERABLE_ADDRESS_LIST_START",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "acceptOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "addAssetClassConfig",
    outputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    name: "addMarketConfig",
    outputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokens", internalType: "address[]", type: "address[]" },
      {
        name: "_configs",
        internalType: "struct IConfigStorage.PLPTokenConfig[]",
        type: "tuple[]",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "addOrUpdateAcceptedToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "allowedLiquidators",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "assetClassConfigs",
    outputs: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetCollateralTokenConfigs",
    outputs: [
      { name: "settleStrategy", internalType: "address", type: "address" },
      { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
      { name: "accepted", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetConfigs",
    outputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "assetId", internalType: "bytes32", type: "bytes32" },
      { name: "decimals", internalType: "uint8", type: "uint8" },
      { name: "isStableCoin", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetPlpTokenConfigs",
    outputs: [
      { name: "targetWeight", internalType: "uint256", type: "uint256" },
      { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
      { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
      { name: "accepted", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "calculator",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "collateralAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_marketIndex", internalType: "uint256", type: "uint256" }],
    name: "delistMarket",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
    name: "getAssetClassConfigByIndex",
    outputs: [
      {
        name: "_assetClassConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getAssetClassConfigsLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetId", internalType: "bytes32", type: "bytes32" }],
    name: "getAssetConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetConfigByToken",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetId", internalType: "bytes32", type: "bytes32" }],
    name: "getAssetPlpTokenConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetPlpTokenConfigByToken",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetTokenDecimal",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getCollateralTokenConfigs",
    outputs: [
      {
        name: "_collateralTokenConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCollateralTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidationConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_marketIndex", internalType: "uint256", type: "uint256" }],
    name: "getMarketConfigById",
    outputs: [
      {
        name: "_marketConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
    name: "getMarketConfigByIndex",
    outputs: [
      {
        name: "_marketConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getMarketConfigsLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPlpAssetIds",
    outputs: [{ name: "", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPlpTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getTradeServiceHooks",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getTradingConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidationConfig",
    outputs: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidityConfig",
    outputs: [
      { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
      { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
      { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
      { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
      { name: "enabled", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "marketConfigs",
    outputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32" },
      { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
      { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
      { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
      { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
      { name: "assetClass", internalType: "uint8", type: "uint8" },
      { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
      { name: "active", internalType: "bool", type: "bool" },
      {
        name: "fundingRate",
        internalType: "struct IConfigStorage.FundingRate",
        type: "tuple",
        components: [
          { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
          { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "oracle",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "plp",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "plpAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pnlFactorBPS",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "removeAcceptedToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_index", internalType: "uint256", type: "uint256" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "setAssetClassConfigByIndex",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setAssetConfig",
    outputs: [
      {
        name: "_assetConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_calculator", internalType: "address", type: "address" }],
    name: "setCalculator",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setCollateralTokenConfig",
    outputs: [
      {
        name: "_collateralTokenConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_enabled", internalType: "bool", type: "bool" }],
    name: "setDynamicEnabled",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "setLiquidationConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_liquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setLiquidityConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_enabled", internalType: "bool", type: "bool" }],
    name: "setLiquidityEnabled",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    name: "setMarketConfig",
    outputs: [
      {
        name: "_marketConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_oracle", internalType: "address", type: "address" }],
    name: "setOracle",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_plp", internalType: "address", type: "address" }],
    name: "setPLP",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_plpAssetIds", internalType: "bytes32[]", type: "bytes32[]" }],
    name: "setPlpAssetId",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setPlpTokenConfig",
    outputs: [
      {
        name: "_plpTokenConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pnlFactorBPS", internalType: "uint32", type: "uint32" }],
    name: "setPnlFactor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contractAddress", internalType: "address", type: "address" },
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
      },
    ],
    name: "setSwapConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newHooks", internalType: "address[]", type: "address[]" }],
    name: "setTradeServiceHooks",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "setTradingConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_weth", internalType: "address", type: "address" }],
    name: "setWeth",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "swapConfig",
    outputs: [
      { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "tokenAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "tradeServiceHooks",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradingConfig",
    outputs: [
      { name: "fundingInterval", internalType: "uint256", type: "uint256" },
      { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
      { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "maxPosition", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "validateAcceptedCollateral",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "validateAcceptedLiquidityToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_contractAddress", internalType: "address", type: "address" },
      { name: "_executorAddress", internalType: "address", type: "address" },
    ],
    name: "validateServiceExecutor",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CrossMarginHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crossMarginHandlerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_crossMarginService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
    ],
  },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_MismatchMsgValue" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NoFundingFeeSurplus" },
  { type: "error", inputs: [], name: "Owned_NotOwner" },
  { type: "error", inputs: [], name: "Owned_NotPendingOwner" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "primaryAccount", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogDepositCollateral",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldCrossMarginService", internalType: "address", type: "address", indexed: true },
      { name: "newCrossMarginService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetCrossMarginService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: true },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "primaryAccount", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogWithdrawCollateral",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "_newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "acceptOwnership", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "crossMarginService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
    ],
    name: "depositCollateral",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_crossMarginService", internalType: "address", type: "address" }],
    name: "setCrossMarginService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
      { name: "_shouldUnwrap", internalType: "bool", type: "bool" },
    ],
    name: "withdrawCollateral",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LimitTradeHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const limitTradeHandlerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_weth", internalType: "address", type: "address" },
      { name: "_tradeService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionFee", internalType: "uint256", type: "uint256" },
    ],
  },
  { type: "error", inputs: [], name: "ILimitTradeHandler_BadSubAccountId" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_IncorrectValueTransfer" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidPriceForExecution" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidSender" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MarketIsClosed" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MaxExecutionFee" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NonExistentOrder" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NotWhitelisted" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_TriggerPriceAboveCurrentPrice" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_TriggerPriceBelowCurrentPrice" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_UnknownOrderType" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_WrongSizeDelta" },
  { type: "error", inputs: [], name: "Owned_NotOwner" },
  { type: "error", inputs: [], name: "Owned_NotPendingOwner" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCancelLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCreateLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogExecuteLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetTradeService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogUpdateLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "_newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "acceptOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
    ],
    name: "cancelOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "createOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "executeOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isAllowAllExecutor",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "limitOrders",
    outputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "tpToken", internalType: "address", type: "address" },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "reduceOnly", internalType: "bool", type: "bool" },
      { name: "sizeDelta", internalType: "int256", type: "int256" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "marketIndex", internalType: "uint256", type: "uint256" },
      { name: "triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "limitOrdersIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newPyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newTradeService", internalType: "address", type: "address" }],
    name: "setTradeService",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradeService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "updateOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LiquidityHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const liquidityHandlerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_liquidityService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_executionOrderFee", internalType: "uint256", type: "uint256" },
    ],
  },
  { type: "error", inputs: [], name: "ILiquidityHandler_InCorrectValueTransfer" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InsufficientRefund" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InvalidSender" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NoOrder" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotOrderOwner" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotWhitelisted" },
  { type: "error", inputs: [], name: "Owned_NotOwner" },
  { type: "error", inputs: [], name: "Owned_NotPendingOwner" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address payable", type: "address", indexed: false },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isAdd", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCancelLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogCreateAddLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isNativeOut", internalType: "bool", type: "bool", indexed: false },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogCreateRemoveLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address payable", type: "address", indexed: false },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isAdd", internalType: "bool", type: "bool", indexed: false },
      { name: "actualOut", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogExecuteLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetLiquidityService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: false },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "_newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "acceptOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_orderIndex", internalType: "uint256", type: "uint256" }],
    name: "cancelLiquidityOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenIn", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
    ],
    name: "createAddLiquidityOrder",
    outputs: [{ name: "_latestOrderIndex", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenOut", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_isNativeOut", internalType: "bool", type: "bool" },
    ],
    name: "createRemoveLiquidityOrder",
    outputs: [{ name: "_latestOrderIndex", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_order",
        internalType: "struct ILiquidityHandler.LiquidityOrder",
        type: "tuple",
        components: [
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "executeLiquidity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_endIndex", internalType: "uint256", type: "uint256" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "executeOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "executionOrderFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrder",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "liquidityOrders",
    outputs: [
      { name: "account", internalType: "address payable", type: "address" },
      { name: "token", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "minOut", internalType: "uint256", type: "uint256" },
      { name: "isAdd", internalType: "bool", type: "bool" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "isNativeOut", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextExecutionOrderIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newLiquidityService", internalType: "address", type: "address" }],
    name: "setLiquidityService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketTradeHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketTradeHandlerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_tradeService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
    ],
  },
  { type: "error", inputs: [], name: "IMarketTradeHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "IMarketTradeHandler_PositionNotFullyClosed" },
  { type: "error", inputs: [], name: "IMarketTradeHandler_ZeroSizeInput" },
  { type: "error", inputs: [], name: "Owned_NotOwner" },
  { type: "error", inputs: [], name: "Owned_NotPendingOwner" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_account", internalType: "address", type: "address", indexed: false },
      { name: "_subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "_marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_buySizeE30", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_shortDecreasingSizeE30", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_longIncreasingSizeE30", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogBuy",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_account", internalType: "address", type: "address", indexed: false },
      { name: "_subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "_marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_sellSizeE30", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_longDecreasingSizeE30", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_shortIncreasingSizeE30", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSell",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: false },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldMarketTradeService", internalType: "address", type: "address", indexed: false },
      { name: "newMarketTradeService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetTradeService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "_newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "acceptOwnership", outputs: [] },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_buySizeE30", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "buy",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_sellSizeE30", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "sell",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newPyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newTradeService", internalType: "address", type: "address" }],
    name: "setTradeService",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradeService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PerpStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpStorageABI = [
  { type: "error", inputs: [], name: "IPerpStorage_NotWhiteListed" },
  { type: "error", inputs: [], name: "Owned_NotOwner" },
  { type: "error", inputs: [], name: "Owned_NotPendingOwner" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "_newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "SetServiceExecutor",
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "acceptOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_badDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addBadDebt",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "badDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_isLong", internalType: "bool", type: "bool" },
      { name: "_size", internalType: "uint256", type: "uint256" },
    ],
    name: "decreasePositionSize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      { name: "_reserve", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseReserved",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_borrowingFee", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseSubAccountBorrowingFee",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "subAccount", internalType: "address", type: "address" }],
    name: "getBadDebt",
    outputs: [{ name: "_badDebt", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetClassIndex", internalType: "uint256", type: "uint256" }],
    name: "getGlobalAssetClassByIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.GlobalAssetClass",
        type: "tuple",
        components: [
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
          { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_marketIndex", internalType: "uint256", type: "uint256" }],
    name: "getGlobalMarketByIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.GlobalMarket",
        type: "tuple",
        components: [
          { name: "longPositionSize", internalType: "uint256", type: "uint256" },
          { name: "longAvgPrice", internalType: "uint256", type: "uint256" },
          { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "shortAvgPrice", internalType: "uint256", type: "uint256" },
          { name: "accumFundingLong", internalType: "int256", type: "int256" },
          { name: "accumFundingShort", internalType: "int256", type: "int256" },
          { name: "currentFundingRate", internalType: "int256", type: "int256" },
          { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getGlobalState",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.GlobalState",
        type: "tuple",
        components: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getNumberOfSubAccountPosition",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_positionId", internalType: "bytes32", type: "bytes32" }],
    name: "getPositionById",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.Position",
        type: "tuple",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "entryFundingRate", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_trader", internalType: "address", type: "address" }],
    name: "getPositionBySubAccount",
    outputs: [
      {
        name: "traderPositions",
        internalType: "struct IPerpStorage.Position[]",
        type: "tuple[]",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "entryFundingRate", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getPositionIds",
    outputs: [{ name: "_positionIds", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "globalAssetClass",
    outputs: [
      { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
      { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
      { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
      { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
      { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "globalMarkets",
    outputs: [
      { name: "longPositionSize", internalType: "uint256", type: "uint256" },
      { name: "longAvgPrice", internalType: "uint256", type: "uint256" },
      { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
      { name: "shortAvgPrice", internalType: "uint256", type: "uint256" },
      { name: "accumFundingLong", internalType: "int256", type: "int256" },
      { name: "accumFundingShort", internalType: "int256", type: "int256" },
      { name: "currentFundingRate", internalType: "int256", type: "int256" },
      { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalState",
    outputs: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_isLong", internalType: "bool", type: "bool" },
      { name: "_size", internalType: "uint256", type: "uint256" },
    ],
    name: "increasePositionSize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      { name: "_reserve", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseReserved",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_borrowingFee", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseSubAccountBorrowingFee",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "positions",
    outputs: [
      { name: "primaryAccount", internalType: "address", type: "address" },
      { name: "marketIndex", internalType: "uint256", type: "uint256" },
      { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
      { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
      { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
      { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
      { name: "positionSizeE30", internalType: "int256", type: "int256" },
      { name: "realizedPnl", internalType: "int256", type: "int256" },
      { name: "entryFundingRate", internalType: "int256", type: "int256" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_positionId", internalType: "bytes32", type: "bytes32" },
    ],
    name: "removePositionFromSubAccount",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_positionId", internalType: "bytes32", type: "bytes32" },
      {
        name: "position",
        internalType: "struct IPerpStorage.Position",
        type: "tuple",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "entryFundingRate", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "savePosition",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "subAccountBorrowingFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "subAccountPositionIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      {
        name: "_newAssetClass",
        internalType: "struct IPerpStorage.GlobalAssetClass",
        type: "tuple",
        components: [
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
          { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "updateGlobalAssetClass",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_newPositionSize", internalType: "uint256", type: "uint256" },
      { name: "_newAvgPrice", internalType: "uint256", type: "uint256" },
    ],
    name: "updateGlobalLongMarketById",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_globalMarket",
        internalType: "struct IPerpStorage.GlobalMarket",
        type: "tuple",
        components: [
          { name: "longPositionSize", internalType: "uint256", type: "uint256" },
          { name: "longAvgPrice", internalType: "uint256", type: "uint256" },
          { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "shortAvgPrice", internalType: "uint256", type: "uint256" },
          { name: "accumFundingLong", internalType: "int256", type: "int256" },
          { name: "accumFundingShort", internalType: "int256", type: "int256" },
          { name: "currentFundingRate", internalType: "int256", type: "int256" },
          { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "updateGlobalMarket",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_isLong", internalType: "bool", type: "bool" },
      { name: "_price", internalType: "uint256", type: "uint256" },
    ],
    name: "updateGlobalMarketPrice",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_newPositionSize", internalType: "uint256", type: "uint256" },
      { name: "_newAvgPrice", internalType: "uint256", type: "uint256" },
    ],
    name: "updateGlobalShortMarketById",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newGlobalState",
        internalType: "struct IPerpStorage.GlobalState",
        type: "tuple",
        components: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "updateGlobalState",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VaultStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vaultStorageABI = [
  { type: "error", inputs: [], name: "IVaultStorage_NotWhiteListed" },
  { type: "error", inputs: [], name: "IVaultStorage_PLPBalanceRemaining" },
  { type: "error", inputs: [], name: "IVaultStorage_TraderBalanceRemaining" },
  { type: "error", inputs: [], name: "IVaultStorage_TraderTokenAlreadyExists" },
  { type: "error", inputs: [], name: "IVaultStorage_ZeroAddress" },
  { type: "error", inputs: [], name: "Owned_NotOwner" },
  { type: "error", inputs: [], name: "Owned_NotPendingOwner" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "balance", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetTraderBalance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "_newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "SetServiceExecutor",
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "acceptOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addFundingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addPLPLiquidity",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_value", internalType: "uint256", type: "uint256" }],
    name: "addPlpLiquidityDebtUSDE30",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_fundingFeeValue", internalType: "uint256", type: "uint256" },
    ],
    name: "borrowFundingFeeFromPlpToTrader",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseTraderBalance",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "devFees",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "fundingFeeReserve",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getTraderTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseTraderBalance",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_devFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_plpFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payBorrowingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromFundingFeeReserveToTrader",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromPlpToTrader",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromTraderToFundingFeeReserve",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromTraderToPlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "payPlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_totalProfitAmount", internalType: "uint256", type: "uint256" },
      { name: "_settlementFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payTraderProfit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_devFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_protocolFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payTradingFee",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "plpLiquidity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "plpLiquidityDebtUSDE30",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "protocolFees",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "pullPLPLiquidity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "pullToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "pushToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_trader", internalType: "address", type: "address" }],
    name: "removeAllTraderTokens",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "removeFundingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "removePLPLiquidity",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_value", internalType: "uint256", type: "uint256" }],
    name: "removePlpLiquidityDebtUSDE30",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_fundingFeeValue", internalType: "uint256", type: "uint256" },
    ],
    name: "repayFundingFeeDebtFromTraderToPlp",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "totalAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "traderBalances",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "traderTokens",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
    ],
    name: "validateAddTraderToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
    ],
    name: "validateRemoveTraderToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_receiver", internalType: "address", type: "address" },
    ],
    name: "withdrawFee",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link botHandlerABI}__.
 */
export function useBotHandler(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: botHandlerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link botHandlerABI}__.
 */
export function useBotHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof botHandlerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof botHandlerABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: botHandlerABI, ...config } as UseContractReadConfig<
    typeof botHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"liquidationService"`.
 */
export function useBotHandlerLiquidationService<
  TSelectData = ReadContractResult<typeof botHandlerABI, "liquidationService">,
>(
  config: Omit<
    UseContractReadConfig<typeof botHandlerABI, "liquidationService", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: botHandlerABI, functionName: "liquidationService", ...config } as UseContractReadConfig<
    typeof botHandlerABI,
    "liquidationService",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"owner"`.
 */
export function useBotHandlerOwner<TSelectData = ReadContractResult<typeof botHandlerABI, "owner">>(
  config: Omit<UseContractReadConfig<typeof botHandlerABI, "owner", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: botHandlerABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof botHandlerABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useBotHandlerPendingOwner<TSelectData = ReadContractResult<typeof botHandlerABI, "pendingOwner">>(
  config: Omit<
    UseContractReadConfig<typeof botHandlerABI, "pendingOwner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: botHandlerABI, functionName: "pendingOwner", ...config } as UseContractReadConfig<
    typeof botHandlerABI,
    "pendingOwner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"positionManagers"`.
 */
export function useBotHandlerPositionManagers<
  TSelectData = ReadContractResult<typeof botHandlerABI, "positionManagers">,
>(
  config: Omit<
    UseContractReadConfig<typeof botHandlerABI, "positionManagers", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: botHandlerABI, functionName: "positionManagers", ...config } as UseContractReadConfig<
    typeof botHandlerABI,
    "positionManagers",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"pyth"`.
 */
export function useBotHandlerPyth<TSelectData = ReadContractResult<typeof botHandlerABI, "pyth">>(
  config: Omit<UseContractReadConfig<typeof botHandlerABI, "pyth", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: botHandlerABI, functionName: "pyth", ...config } as UseContractReadConfig<
    typeof botHandlerABI,
    "pyth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"tradeService"`.
 */
export function useBotHandlerTradeService<TSelectData = ReadContractResult<typeof botHandlerABI, "tradeService">>(
  config: Omit<
    UseContractReadConfig<typeof botHandlerABI, "tradeService", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: botHandlerABI, functionName: "tradeService", ...config } as UseContractReadConfig<
    typeof botHandlerABI,
    "tradeService",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__.
 */
export function useBotHandlerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof botHandlerABI, string>["abi"], TFunctionName>
    : UseContractWriteConfig<TMode, typeof botHandlerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, TFunctionName>({ abi: botHandlerABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useBotHandlerAcceptOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof botHandlerABI, "acceptOwnership">["abi"],
        "acceptOwnership"
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "acceptOwnership"> & {
        abi?: never
        functionName?: "acceptOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "acceptOwnership">({
    abi: botHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"closeDelistedMarketPosition"`.
 */
export function useBotHandlerCloseDelistedMarketPosition<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof botHandlerABI, "closeDelistedMarketPosition">["abi"],
        "closeDelistedMarketPosition"
      > & { functionName?: "closeDelistedMarketPosition" }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "closeDelistedMarketPosition"> & {
        abi?: never
        functionName?: "closeDelistedMarketPosition"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "closeDelistedMarketPosition">({
    abi: botHandlerABI,
    functionName: "closeDelistedMarketPosition",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"deleverage"`.
 */
export function useBotHandlerDeleverage<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof botHandlerABI, "deleverage">["abi"],
        "deleverage"
      > & { functionName?: "deleverage" }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "deleverage"> & {
        abi?: never
        functionName?: "deleverage"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "deleverage">({
    abi: botHandlerABI,
    functionName: "deleverage",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"forceTakeMaxProfit"`.
 */
export function useBotHandlerForceTakeMaxProfit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof botHandlerABI, "forceTakeMaxProfit">["abi"],
        "forceTakeMaxProfit"
      > & { functionName?: "forceTakeMaxProfit" }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "forceTakeMaxProfit"> & {
        abi?: never
        functionName?: "forceTakeMaxProfit"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "forceTakeMaxProfit">({
    abi: botHandlerABI,
    functionName: "forceTakeMaxProfit",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"liquidate"`.
 */
export function useBotHandlerLiquidate<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof botHandlerABI, "liquidate">["abi"],
        "liquidate"
      > & { functionName?: "liquidate" }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "liquidate"> & {
        abi?: never
        functionName?: "liquidate"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "liquidate">({
    abi: botHandlerABI,
    functionName: "liquidate",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"setLiquidationService"`.
 */
export function useBotHandlerSetLiquidationService<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof botHandlerABI, "setLiquidationService">["abi"],
        "setLiquidationService"
      > & { functionName?: "setLiquidationService" }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "setLiquidationService"> & {
        abi?: never
        functionName?: "setLiquidationService"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "setLiquidationService">({
    abi: botHandlerABI,
    functionName: "setLiquidationService",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"setPositionManagers"`.
 */
export function useBotHandlerSetPositionManagers<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof botHandlerABI, "setPositionManagers">["abi"],
        "setPositionManagers"
      > & { functionName?: "setPositionManagers" }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "setPositionManagers"> & {
        abi?: never
        functionName?: "setPositionManagers"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "setPositionManagers">({
    abi: botHandlerABI,
    functionName: "setPositionManagers",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function useBotHandlerSetPyth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof botHandlerABI, "setPyth">["abi"], "setPyth"> & {
        functionName?: "setPyth"
      }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "setPyth"> & {
        abi?: never
        functionName?: "setPyth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "setPyth">({
    abi: botHandlerABI,
    functionName: "setPyth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"setTradeService"`.
 */
export function useBotHandlerSetTradeService<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof botHandlerABI, "setTradeService">["abi"],
        "setTradeService"
      > & { functionName?: "setTradeService" }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "setTradeService"> & {
        abi?: never
        functionName?: "setTradeService"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "setTradeService">({
    abi: botHandlerABI,
    functionName: "setTradeService",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBotHandlerTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof botHandlerABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof botHandlerABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof botHandlerABI, "transferOwnership">({
    abi: botHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__.
 */
export function usePrepareBotHandlerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof botHandlerABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: botHandlerABI, ...config } as UsePrepareContractWriteConfig<
    typeof botHandlerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareBotHandlerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof botHandlerABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "acceptOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"closeDelistedMarketPosition"`.
 */
export function usePrepareBotHandlerCloseDelistedMarketPosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof botHandlerABI, "closeDelistedMarketPosition">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "closeDelistedMarketPosition",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "closeDelistedMarketPosition">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"deleverage"`.
 */
export function usePrepareBotHandlerDeleverage(
  config: Omit<UsePrepareContractWriteConfig<typeof botHandlerABI, "deleverage">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "deleverage",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "deleverage">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"forceTakeMaxProfit"`.
 */
export function usePrepareBotHandlerForceTakeMaxProfit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof botHandlerABI, "forceTakeMaxProfit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "forceTakeMaxProfit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "forceTakeMaxProfit">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"liquidate"`.
 */
export function usePrepareBotHandlerLiquidate(
  config: Omit<UsePrepareContractWriteConfig<typeof botHandlerABI, "liquidate">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "liquidate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "liquidate">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"setLiquidationService"`.
 */
export function usePrepareBotHandlerSetLiquidationService(
  config: Omit<
    UsePrepareContractWriteConfig<typeof botHandlerABI, "setLiquidationService">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "setLiquidationService",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "setLiquidationService">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"setPositionManagers"`.
 */
export function usePrepareBotHandlerSetPositionManagers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof botHandlerABI, "setPositionManagers">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "setPositionManagers",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "setPositionManagers">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function usePrepareBotHandlerSetPyth(
  config: Omit<UsePrepareContractWriteConfig<typeof botHandlerABI, "setPyth">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "setPyth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "setPyth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"setTradeService"`.
 */
export function usePrepareBotHandlerSetTradeService(
  config: Omit<
    UsePrepareContractWriteConfig<typeof botHandlerABI, "setTradeService">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "setTradeService",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "setTradeService">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link botHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBotHandlerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof botHandlerABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: botHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof botHandlerABI, "transferOwnership">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__.
 */
export function useBotHandlerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof botHandlerABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: botHandlerABI, ...config } as UseContractEventConfig<typeof botHandlerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__ and `eventName` set to `"LogCloseDelistedMarketPosition"`.
 */
export function useBotHandlerLogCloseDelistedMarketPositionEvent(
  config: Omit<
    UseContractEventConfig<typeof botHandlerABI, "LogCloseDelistedMarketPosition">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: botHandlerABI,
    eventName: "LogCloseDelistedMarketPosition",
    ...config,
  } as UseContractEventConfig<typeof botHandlerABI, "LogCloseDelistedMarketPosition">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__ and `eventName` set to `"LogDeleverage"`.
 */
export function useBotHandlerLogDeleverageEvent(
  config: Omit<UseContractEventConfig<typeof botHandlerABI, "LogDeleverage">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: botHandlerABI, eventName: "LogDeleverage", ...config } as UseContractEventConfig<
    typeof botHandlerABI,
    "LogDeleverage"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__ and `eventName` set to `"LogLiquidate"`.
 */
export function useBotHandlerLogLiquidateEvent(
  config: Omit<UseContractEventConfig<typeof botHandlerABI, "LogLiquidate">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: botHandlerABI, eventName: "LogLiquidate", ...config } as UseContractEventConfig<
    typeof botHandlerABI,
    "LogLiquidate"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__ and `eventName` set to `"LogSetLiquidationService"`.
 */
export function useBotHandlerLogSetLiquidationServiceEvent(
  config: Omit<
    UseContractEventConfig<typeof botHandlerABI, "LogSetLiquidationService">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: botHandlerABI,
    eventName: "LogSetLiquidationService",
    ...config,
  } as UseContractEventConfig<typeof botHandlerABI, "LogSetLiquidationService">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__ and `eventName` set to `"LogSetPositionManager"`.
 */
export function useBotHandlerLogSetPositionManagerEvent(
  config: Omit<UseContractEventConfig<typeof botHandlerABI, "LogSetPositionManager">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: botHandlerABI,
    eventName: "LogSetPositionManager",
    ...config,
  } as UseContractEventConfig<typeof botHandlerABI, "LogSetPositionManager">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__ and `eventName` set to `"LogSetPyth"`.
 */
export function useBotHandlerLogSetPythEvent(
  config: Omit<UseContractEventConfig<typeof botHandlerABI, "LogSetPyth">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: botHandlerABI, eventName: "LogSetPyth", ...config } as UseContractEventConfig<
    typeof botHandlerABI,
    "LogSetPyth"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__ and `eventName` set to `"LogSetTradeService"`.
 */
export function useBotHandlerLogSetTradeServiceEvent(
  config: Omit<UseContractEventConfig<typeof botHandlerABI, "LogSetTradeService">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: botHandlerABI, eventName: "LogSetTradeService", ...config } as UseContractEventConfig<
    typeof botHandlerABI,
    "LogSetTradeService"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__ and `eventName` set to `"LogTakeMaxProfit"`.
 */
export function useBotHandlerLogTakeMaxProfitEvent(
  config: Omit<UseContractEventConfig<typeof botHandlerABI, "LogTakeMaxProfit">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: botHandlerABI, eventName: "LogTakeMaxProfit", ...config } as UseContractEventConfig<
    typeof botHandlerABI,
    "LogTakeMaxProfit"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link botHandlerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBotHandlerOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof botHandlerABI, "OwnershipTransferred">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: botHandlerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof botHandlerABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link configStorageABI}__.
 */
export function useConfigStorage(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: configStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__.
 */
export function useConfigStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof configStorageABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof configStorageABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: configStorageABI, ...config } as UseContractReadConfig<
    typeof configStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"ITERABLE_ADDRESS_LIST_END"`.
 */
export function useConfigStorageIterableAddressListEnd<
  TSelectData = ReadContractResult<typeof configStorageABI, "ITERABLE_ADDRESS_LIST_END">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "ITERABLE_ADDRESS_LIST_END", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "ITERABLE_ADDRESS_LIST_END",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "ITERABLE_ADDRESS_LIST_END", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"ITERABLE_ADDRESS_LIST_START"`.
 */
export function useConfigStorageIterableAddressListStart<
  TSelectData = ReadContractResult<typeof configStorageABI, "ITERABLE_ADDRESS_LIST_START">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "ITERABLE_ADDRESS_LIST_START", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "ITERABLE_ADDRESS_LIST_START",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "ITERABLE_ADDRESS_LIST_START", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"allowedLiquidators"`.
 */
export function useConfigStorageAllowedLiquidators<
  TSelectData = ReadContractResult<typeof configStorageABI, "allowedLiquidators">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "allowedLiquidators", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "allowedLiquidators",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "allowedLiquidators", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"assetClassConfigs"`.
 */
export function useConfigStorageAssetClassConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "assetClassConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "assetClassConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "assetClassConfigs",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "assetClassConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"assetCollateralTokenConfigs"`.
 */
export function useConfigStorageAssetCollateralTokenConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "assetCollateralTokenConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "assetCollateralTokenConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "assetCollateralTokenConfigs",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "assetCollateralTokenConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"assetConfigs"`.
 */
export function useConfigStorageAssetConfigs<TSelectData = ReadContractResult<typeof configStorageABI, "assetConfigs">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "assetConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "assetConfigs", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "assetConfigs",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"assetPlpTokenConfigs"`.
 */
export function useConfigStorageAssetPlpTokenConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "assetPlpTokenConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "assetPlpTokenConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "assetPlpTokenConfigs",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "assetPlpTokenConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"calculator"`.
 */
export function useConfigStorageCalculator<TSelectData = ReadContractResult<typeof configStorageABI, "calculator">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "calculator", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "calculator", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "calculator",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"collateralAssetIds"`.
 */
export function useConfigStorageCollateralAssetIds<
  TSelectData = ReadContractResult<typeof configStorageABI, "collateralAssetIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "collateralAssetIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "collateralAssetIds",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "collateralAssetIds", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetClassConfigByIndex"`.
 */
export function useConfigStorageGetAssetClassConfigByIndex<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetClassConfigByIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetClassConfigByIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetClassConfigByIndex",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetClassConfigByIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetClassConfigsLength"`.
 */
export function useConfigStorageGetAssetClassConfigsLength<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetClassConfigsLength">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetClassConfigsLength", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetClassConfigsLength",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetClassConfigsLength", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetConfig"`.
 */
export function useConfigStorageGetAssetConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "getAssetConfig", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "getAssetConfig",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetConfigByToken"`.
 */
export function useConfigStorageGetAssetConfigByToken<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetConfigByToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetConfigByToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetConfigByToken",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetConfigByToken", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetPlpTokenConfig"`.
 */
export function useConfigStorageGetAssetPlpTokenConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetPlpTokenConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetPlpTokenConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetPlpTokenConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetPlpTokenConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetPlpTokenConfigByToken"`.
 */
export function useConfigStorageGetAssetPlpTokenConfigByToken<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetPlpTokenConfigByToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetPlpTokenConfigByToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetPlpTokenConfigByToken",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetPlpTokenConfigByToken", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getAssetTokenDecimal"`.
 */
export function useConfigStorageGetAssetTokenDecimal<
  TSelectData = ReadContractResult<typeof configStorageABI, "getAssetTokenDecimal">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getAssetTokenDecimal", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getAssetTokenDecimal",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getAssetTokenDecimal", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getCollateralTokenConfigs"`.
 */
export function useConfigStorageGetCollateralTokenConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "getCollateralTokenConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getCollateralTokenConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getCollateralTokenConfigs",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getCollateralTokenConfigs", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getCollateralTokens"`.
 */
export function useConfigStorageGetCollateralTokens<
  TSelectData = ReadContractResult<typeof configStorageABI, "getCollateralTokens">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getCollateralTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getCollateralTokens",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getCollateralTokens", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getLiquidationConfig"`.
 */
export function useConfigStorageGetLiquidationConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getLiquidationConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getLiquidationConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getLiquidationConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getLiquidationConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getLiquidityConfig"`.
 */
export function useConfigStorageGetLiquidityConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getLiquidityConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getLiquidityConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getLiquidityConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getLiquidityConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getMarketConfigById"`.
 */
export function useConfigStorageGetMarketConfigById<
  TSelectData = ReadContractResult<typeof configStorageABI, "getMarketConfigById">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getMarketConfigById", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getMarketConfigById",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getMarketConfigById", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getMarketConfigByIndex"`.
 */
export function useConfigStorageGetMarketConfigByIndex<
  TSelectData = ReadContractResult<typeof configStorageABI, "getMarketConfigByIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getMarketConfigByIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getMarketConfigByIndex",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getMarketConfigByIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getMarketConfigsLength"`.
 */
export function useConfigStorageGetMarketConfigsLength<
  TSelectData = ReadContractResult<typeof configStorageABI, "getMarketConfigsLength">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getMarketConfigsLength", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getMarketConfigsLength",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getMarketConfigsLength", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getPlpAssetIds"`.
 */
export function useConfigStorageGetPlpAssetIds<
  TSelectData = ReadContractResult<typeof configStorageABI, "getPlpAssetIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getPlpAssetIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "getPlpAssetIds", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "getPlpAssetIds",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getPlpTokens"`.
 */
export function useConfigStorageGetPlpTokens<TSelectData = ReadContractResult<typeof configStorageABI, "getPlpTokens">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getPlpTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "getPlpTokens", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "getPlpTokens",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getTradeServiceHooks"`.
 */
export function useConfigStorageGetTradeServiceHooks<
  TSelectData = ReadContractResult<typeof configStorageABI, "getTradeServiceHooks">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getTradeServiceHooks", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getTradeServiceHooks",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getTradeServiceHooks", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"getTradingConfig"`.
 */
export function useConfigStorageGetTradingConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "getTradingConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "getTradingConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "getTradingConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "getTradingConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"liquidationConfig"`.
 */
export function useConfigStorageLiquidationConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "liquidationConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "liquidationConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "liquidationConfig",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "liquidationConfig", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"liquidityConfig"`.
 */
export function useConfigStorageLiquidityConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "liquidityConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "liquidityConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "liquidityConfig", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "liquidityConfig",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"marketConfigs"`.
 */
export function useConfigStorageMarketConfigs<
  TSelectData = ReadContractResult<typeof configStorageABI, "marketConfigs">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "marketConfigs", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "marketConfigs", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "marketConfigs",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"oracle"`.
 */
export function useConfigStorageOracle<TSelectData = ReadContractResult<typeof configStorageABI, "oracle">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "oracle", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "oracle", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "oracle",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"owner"`.
 */
export function useConfigStorageOwner<TSelectData = ReadContractResult<typeof configStorageABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useConfigStoragePendingOwner<TSelectData = ReadContractResult<typeof configStorageABI, "pendingOwner">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "pendingOwner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "pendingOwner", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "pendingOwner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"plp"`.
 */
export function useConfigStoragePlp<TSelectData = ReadContractResult<typeof configStorageABI, "plp">>(
  config: Omit<UseContractReadConfig<typeof configStorageABI, "plp", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "plp", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "plp",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"plpAssetIds"`.
 */
export function useConfigStoragePlpAssetIds<TSelectData = ReadContractResult<typeof configStorageABI, "plpAssetIds">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "plpAssetIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "plpAssetIds", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "plpAssetIds",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"pnlFactorBPS"`.
 */
export function useConfigStoragePnlFactorBps<TSelectData = ReadContractResult<typeof configStorageABI, "pnlFactorBPS">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "pnlFactorBPS", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "pnlFactorBPS", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "pnlFactorBPS",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"serviceExecutors"`.
 */
export function useConfigStorageServiceExecutors<
  TSelectData = ReadContractResult<typeof configStorageABI, "serviceExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "serviceExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "serviceExecutors",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "serviceExecutors", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"swapConfig"`.
 */
export function useConfigStorageSwapConfig<TSelectData = ReadContractResult<typeof configStorageABI, "swapConfig">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "swapConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "swapConfig", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "swapConfig",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"tokenAssetIds"`.
 */
export function useConfigStorageTokenAssetIds<
  TSelectData = ReadContractResult<typeof configStorageABI, "tokenAssetIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "tokenAssetIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "tokenAssetIds", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "tokenAssetIds",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"tradeServiceHooks"`.
 */
export function useConfigStorageTradeServiceHooks<
  TSelectData = ReadContractResult<typeof configStorageABI, "tradeServiceHooks">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "tradeServiceHooks", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "tradeServiceHooks",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "tradeServiceHooks", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"tradingConfig"`.
 */
export function useConfigStorageTradingConfig<
  TSelectData = ReadContractResult<typeof configStorageABI, "tradingConfig">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "tradingConfig", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "tradingConfig", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "tradingConfig",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"treasury"`.
 */
export function useConfigStorageTreasury<TSelectData = ReadContractResult<typeof configStorageABI, "treasury">>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "treasury", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "treasury", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "treasury",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"validateAcceptedCollateral"`.
 */
export function useConfigStorageValidateAcceptedCollateral<
  TSelectData = ReadContractResult<typeof configStorageABI, "validateAcceptedCollateral">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "validateAcceptedCollateral", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "validateAcceptedCollateral",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "validateAcceptedCollateral", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"validateAcceptedLiquidityToken"`.
 */
export function useConfigStorageValidateAcceptedLiquidityToken<
  TSelectData = ReadContractResult<typeof configStorageABI, "validateAcceptedLiquidityToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "validateAcceptedLiquidityToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "validateAcceptedLiquidityToken",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "validateAcceptedLiquidityToken", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"validateServiceExecutor"`.
 */
export function useConfigStorageValidateServiceExecutor<
  TSelectData = ReadContractResult<typeof configStorageABI, "validateServiceExecutor">,
>(
  config: Omit<
    UseContractReadConfig<typeof configStorageABI, "validateServiceExecutor", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: configStorageABI,
    functionName: "validateServiceExecutor",
    ...config,
  } as UseContractReadConfig<typeof configStorageABI, "validateServiceExecutor", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"weth"`.
 */
export function useConfigStorageWeth<TSelectData = ReadContractResult<typeof configStorageABI, "weth">>(
  config: Omit<UseContractReadConfig<typeof configStorageABI, "weth", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: configStorageABI, functionName: "weth", ...config } as UseContractReadConfig<
    typeof configStorageABI,
    "weth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__.
 */
export function useConfigStorageWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof configStorageABI, string>["abi"], TFunctionName>
    : UseContractWriteConfig<TMode, typeof configStorageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, TFunctionName>({ abi: configStorageABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useConfigStorageAcceptOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "acceptOwnership">["abi"],
        "acceptOwnership"
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "acceptOwnership"> & {
        abi?: never
        functionName?: "acceptOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "acceptOwnership">({
    abi: configStorageABI,
    functionName: "acceptOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addAssetClassConfig"`.
 */
export function useConfigStorageAddAssetClassConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "addAssetClassConfig">["abi"],
        "addAssetClassConfig"
      > & { functionName?: "addAssetClassConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "addAssetClassConfig"> & {
        abi?: never
        functionName?: "addAssetClassConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "addAssetClassConfig">({
    abi: configStorageABI,
    functionName: "addAssetClassConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addMarketConfig"`.
 */
export function useConfigStorageAddMarketConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "addMarketConfig">["abi"],
        "addMarketConfig"
      > & { functionName?: "addMarketConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "addMarketConfig"> & {
        abi?: never
        functionName?: "addMarketConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "addMarketConfig">({
    abi: configStorageABI,
    functionName: "addMarketConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addOrUpdateAcceptedToken"`.
 */
export function useConfigStorageAddOrUpdateAcceptedToken<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "addOrUpdateAcceptedToken">["abi"],
        "addOrUpdateAcceptedToken"
      > & { functionName?: "addOrUpdateAcceptedToken" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "addOrUpdateAcceptedToken"> & {
        abi?: never
        functionName?: "addOrUpdateAcceptedToken"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "addOrUpdateAcceptedToken">({
    abi: configStorageABI,
    functionName: "addOrUpdateAcceptedToken",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"delistMarket"`.
 */
export function useConfigStorageDelistMarket<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "delistMarket">["abi"],
        "delistMarket"
      > & { functionName?: "delistMarket" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "delistMarket"> & {
        abi?: never
        functionName?: "delistMarket"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "delistMarket">({
    abi: configStorageABI,
    functionName: "delistMarket",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"removeAcceptedToken"`.
 */
export function useConfigStorageRemoveAcceptedToken<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "removeAcceptedToken">["abi"],
        "removeAcceptedToken"
      > & { functionName?: "removeAcceptedToken" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "removeAcceptedToken"> & {
        abi?: never
        functionName?: "removeAcceptedToken"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "removeAcceptedToken">({
    abi: configStorageABI,
    functionName: "removeAcceptedToken",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetClassConfigByIndex"`.
 */
export function useConfigStorageSetAssetClassConfigByIndex<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setAssetClassConfigByIndex">["abi"],
        "setAssetClassConfigByIndex"
      > & { functionName?: "setAssetClassConfigByIndex" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setAssetClassConfigByIndex"> & {
        abi?: never
        functionName?: "setAssetClassConfigByIndex"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setAssetClassConfigByIndex">({
    abi: configStorageABI,
    functionName: "setAssetClassConfigByIndex",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetConfig"`.
 */
export function useConfigStorageSetAssetConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setAssetConfig">["abi"],
        "setAssetConfig"
      > & { functionName?: "setAssetConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setAssetConfig"> & {
        abi?: never
        functionName?: "setAssetConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setAssetConfig">({
    abi: configStorageABI,
    functionName: "setAssetConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCalculator"`.
 */
export function useConfigStorageSetCalculator<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setCalculator">["abi"],
        "setCalculator"
      > & { functionName?: "setCalculator" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setCalculator"> & {
        abi?: never
        functionName?: "setCalculator"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setCalculator">({
    abi: configStorageABI,
    functionName: "setCalculator",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCollateralTokenConfig"`.
 */
export function useConfigStorageSetCollateralTokenConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setCollateralTokenConfig">["abi"],
        "setCollateralTokenConfig"
      > & { functionName?: "setCollateralTokenConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setCollateralTokenConfig"> & {
        abi?: never
        functionName?: "setCollateralTokenConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setCollateralTokenConfig">({
    abi: configStorageABI,
    functionName: "setCollateralTokenConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setDynamicEnabled"`.
 */
export function useConfigStorageSetDynamicEnabled<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setDynamicEnabled">["abi"],
        "setDynamicEnabled"
      > & { functionName?: "setDynamicEnabled" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setDynamicEnabled"> & {
        abi?: never
        functionName?: "setDynamicEnabled"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setDynamicEnabled">({
    abi: configStorageABI,
    functionName: "setDynamicEnabled",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidationConfig"`.
 */
export function useConfigStorageSetLiquidationConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setLiquidationConfig">["abi"],
        "setLiquidationConfig"
      > & { functionName?: "setLiquidationConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setLiquidationConfig"> & {
        abi?: never
        functionName?: "setLiquidationConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setLiquidationConfig">({
    abi: configStorageABI,
    functionName: "setLiquidationConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidityConfig"`.
 */
export function useConfigStorageSetLiquidityConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setLiquidityConfig">["abi"],
        "setLiquidityConfig"
      > & { functionName?: "setLiquidityConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setLiquidityConfig"> & {
        abi?: never
        functionName?: "setLiquidityConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setLiquidityConfig">({
    abi: configStorageABI,
    functionName: "setLiquidityConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidityEnabled"`.
 */
export function useConfigStorageSetLiquidityEnabled<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setLiquidityEnabled">["abi"],
        "setLiquidityEnabled"
      > & { functionName?: "setLiquidityEnabled" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setLiquidityEnabled"> & {
        abi?: never
        functionName?: "setLiquidityEnabled"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setLiquidityEnabled">({
    abi: configStorageABI,
    functionName: "setLiquidityEnabled",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setMarketConfig"`.
 */
export function useConfigStorageSetMarketConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setMarketConfig">["abi"],
        "setMarketConfig"
      > & { functionName?: "setMarketConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setMarketConfig"> & {
        abi?: never
        functionName?: "setMarketConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setMarketConfig">({
    abi: configStorageABI,
    functionName: "setMarketConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setOracle"`.
 */
export function useConfigStorageSetOracle<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setOracle">["abi"],
        "setOracle"
      > & { functionName?: "setOracle" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setOracle"> & {
        abi?: never
        functionName?: "setOracle"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setOracle">({
    abi: configStorageABI,
    functionName: "setOracle",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPLP"`.
 */
export function useConfigStorageSetPlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof configStorageABI, "setPLP">["abi"], "setPLP"> & {
        functionName?: "setPLP"
      }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setPLP"> & {
        abi?: never
        functionName?: "setPLP"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setPLP">({
    abi: configStorageABI,
    functionName: "setPLP",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPlpAssetId"`.
 */
export function useConfigStorageSetPlpAssetId<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setPlpAssetId">["abi"],
        "setPlpAssetId"
      > & { functionName?: "setPlpAssetId" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setPlpAssetId"> & {
        abi?: never
        functionName?: "setPlpAssetId"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setPlpAssetId">({
    abi: configStorageABI,
    functionName: "setPlpAssetId",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPlpTokenConfig"`.
 */
export function useConfigStorageSetPlpTokenConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setPlpTokenConfig">["abi"],
        "setPlpTokenConfig"
      > & { functionName?: "setPlpTokenConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setPlpTokenConfig"> & {
        abi?: never
        functionName?: "setPlpTokenConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setPlpTokenConfig">({
    abi: configStorageABI,
    functionName: "setPlpTokenConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPnlFactor"`.
 */
export function useConfigStorageSetPnlFactor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setPnlFactor">["abi"],
        "setPnlFactor"
      > & { functionName?: "setPnlFactor" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setPnlFactor"> & {
        abi?: never
        functionName?: "setPnlFactor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setPnlFactor">({
    abi: configStorageABI,
    functionName: "setPnlFactor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setServiceExecutor"`.
 */
export function useConfigStorageSetServiceExecutor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setServiceExecutor">["abi"],
        "setServiceExecutor"
      > & { functionName?: "setServiceExecutor" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setServiceExecutor"> & {
        abi?: never
        functionName?: "setServiceExecutor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setServiceExecutor">({
    abi: configStorageABI,
    functionName: "setServiceExecutor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setSwapConfig"`.
 */
export function useConfigStorageSetSwapConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setSwapConfig">["abi"],
        "setSwapConfig"
      > & { functionName?: "setSwapConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setSwapConfig"> & {
        abi?: never
        functionName?: "setSwapConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setSwapConfig">({
    abi: configStorageABI,
    functionName: "setSwapConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setTradeServiceHooks"`.
 */
export function useConfigStorageSetTradeServiceHooks<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setTradeServiceHooks">["abi"],
        "setTradeServiceHooks"
      > & { functionName?: "setTradeServiceHooks" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setTradeServiceHooks"> & {
        abi?: never
        functionName?: "setTradeServiceHooks"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setTradeServiceHooks">({
    abi: configStorageABI,
    functionName: "setTradeServiceHooks",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setTradingConfig"`.
 */
export function useConfigStorageSetTradingConfig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setTradingConfig">["abi"],
        "setTradingConfig"
      > & { functionName?: "setTradingConfig" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setTradingConfig"> & {
        abi?: never
        functionName?: "setTradingConfig"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setTradingConfig">({
    abi: configStorageABI,
    functionName: "setTradingConfig",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setWeth"`.
 */
export function useConfigStorageSetWeth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "setWeth">["abi"],
        "setWeth"
      > & { functionName?: "setWeth" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "setWeth"> & {
        abi?: never
        functionName?: "setWeth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "setWeth">({
    abi: configStorageABI,
    functionName: "setWeth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useConfigStorageTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof configStorageABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof configStorageABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof configStorageABI, "transferOwnership">({
    abi: configStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__.
 */
export function usePrepareConfigStorageWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof configStorageABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: configStorageABI, ...config } as UsePrepareContractWriteConfig<
    typeof configStorageABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareConfigStorageAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "acceptOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addAssetClassConfig"`.
 */
export function usePrepareConfigStorageAddAssetClassConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "addAssetClassConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "addAssetClassConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "addAssetClassConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addMarketConfig"`.
 */
export function usePrepareConfigStorageAddMarketConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "addMarketConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "addMarketConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "addMarketConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"addOrUpdateAcceptedToken"`.
 */
export function usePrepareConfigStorageAddOrUpdateAcceptedToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "addOrUpdateAcceptedToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "addOrUpdateAcceptedToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "addOrUpdateAcceptedToken">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"delistMarket"`.
 */
export function usePrepareConfigStorageDelistMarket(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "delistMarket">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "delistMarket",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "delistMarket">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"removeAcceptedToken"`.
 */
export function usePrepareConfigStorageRemoveAcceptedToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "removeAcceptedToken">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "removeAcceptedToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "removeAcceptedToken">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetClassConfigByIndex"`.
 */
export function usePrepareConfigStorageSetAssetClassConfigByIndex(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetClassConfigByIndex">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setAssetClassConfigByIndex",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetClassConfigByIndex">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setAssetConfig"`.
 */
export function usePrepareConfigStorageSetAssetConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setAssetConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setAssetConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCalculator"`.
 */
export function usePrepareConfigStorageSetCalculator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setCalculator">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setCalculator",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setCalculator">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setCollateralTokenConfig"`.
 */
export function usePrepareConfigStorageSetCollateralTokenConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setCollateralTokenConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setCollateralTokenConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setCollateralTokenConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setDynamicEnabled"`.
 */
export function usePrepareConfigStorageSetDynamicEnabled(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setDynamicEnabled">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setDynamicEnabled",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setDynamicEnabled">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidationConfig"`.
 */
export function usePrepareConfigStorageSetLiquidationConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidationConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setLiquidationConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidationConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidityConfig"`.
 */
export function usePrepareConfigStorageSetLiquidityConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidityConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setLiquidityConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidityConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setLiquidityEnabled"`.
 */
export function usePrepareConfigStorageSetLiquidityEnabled(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidityEnabled">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setLiquidityEnabled",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setLiquidityEnabled">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setMarketConfig"`.
 */
export function usePrepareConfigStorageSetMarketConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setMarketConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setMarketConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setMarketConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setOracle"`.
 */
export function usePrepareConfigStorageSetOracle(
  config: Omit<UsePrepareContractWriteConfig<typeof configStorageABI, "setOracle">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setOracle",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setOracle">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPLP"`.
 */
export function usePrepareConfigStorageSetPlp(
  config: Omit<UsePrepareContractWriteConfig<typeof configStorageABI, "setPLP">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setPLP",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setPLP">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPlpAssetId"`.
 */
export function usePrepareConfigStorageSetPlpAssetId(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setPlpAssetId">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setPlpAssetId",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setPlpAssetId">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPlpTokenConfig"`.
 */
export function usePrepareConfigStorageSetPlpTokenConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setPlpTokenConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setPlpTokenConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setPlpTokenConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setPnlFactor"`.
 */
export function usePrepareConfigStorageSetPnlFactor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setPnlFactor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setPnlFactor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setPnlFactor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setServiceExecutor"`.
 */
export function usePrepareConfigStorageSetServiceExecutor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setServiceExecutor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setServiceExecutor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setServiceExecutor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setSwapConfig"`.
 */
export function usePrepareConfigStorageSetSwapConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setSwapConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setSwapConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setSwapConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setTradeServiceHooks"`.
 */
export function usePrepareConfigStorageSetTradeServiceHooks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setTradeServiceHooks">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setTradeServiceHooks",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setTradeServiceHooks">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setTradingConfig"`.
 */
export function usePrepareConfigStorageSetTradingConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "setTradingConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setTradingConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setTradingConfig">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"setWeth"`.
 */
export function usePrepareConfigStorageSetWeth(
  config: Omit<UsePrepareContractWriteConfig<typeof configStorageABI, "setWeth">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "setWeth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "setWeth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link configStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareConfigStorageTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof configStorageABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: configStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof configStorageABI, "transferOwnership">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__.
 */
export function useConfigStorageEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof configStorageABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, ...config } as UseContractEventConfig<
    typeof configStorageABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogAddAssetClassConfig"`.
 */
export function useConfigStorageLogAddAssetClassConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogAddAssetClassConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogAddAssetClassConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogAddAssetClassConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogAddMarketConfig"`.
 */
export function useConfigStorageLogAddMarketConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogAddMarketConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogAddMarketConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogAddMarketConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogAddOrUpdatePLPTokenConfigs"`.
 */
export function useConfigStorageLogAddOrUpdatePlpTokenConfigsEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogAddOrUpdatePLPTokenConfigs">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogAddOrUpdatePLPTokenConfigs",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogAddOrUpdatePLPTokenConfigs">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogDelistMarket"`.
 */
export function useConfigStorageLogDelistMarketEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogDelistMarket">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogDelistMarket", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogDelistMarket"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogRemoveUnderlying"`.
 */
export function useConfigStorageLogRemoveUnderlyingEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogRemoveUnderlying">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogRemoveUnderlying",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogRemoveUnderlying">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetAssetClassConfigByIndex"`.
 */
export function useConfigStorageLogSetAssetClassConfigByIndexEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetAssetClassConfigByIndex">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetAssetClassConfigByIndex",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetAssetClassConfigByIndex">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetAssetConfig"`.
 */
export function useConfigStorageLogSetAssetConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetAssetConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetAssetConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetAssetConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetCalculator"`.
 */
export function useConfigStorageLogSetCalculatorEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetCalculator">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetCalculator", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetCalculator"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetCollateralTokenConfig"`.
 */
export function useConfigStorageLogSetCollateralTokenConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetCollateralTokenConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetCollateralTokenConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetCollateralTokenConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetDynamicEnabled"`.
 */
export function useConfigStorageLogSetDynamicEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetDynamicEnabled">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetDynamicEnabled",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetDynamicEnabled">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetLiquidationConfig"`.
 */
export function useConfigStorageLogSetLiquidationConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetLiquidationConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetLiquidationConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetLiquidationConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetLiquidityConfig"`.
 */
export function useConfigStorageLogSetLiquidityConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetLiquidityConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetLiquidityConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetLiquidityConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetLiquidityEnabled"`.
 */
export function useConfigStorageLogSetLiquidityEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetLiquidityEnabled">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetLiquidityEnabled",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetLiquidityEnabled">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetMarketConfig"`.
 */
export function useConfigStorageLogSetMarketConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetMarketConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetMarketConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetMarketConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetOracle"`.
 */
export function useConfigStorageLogSetOracleEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetOracle">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetOracle", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetOracle"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetPLP"`.
 */
export function useConfigStorageLogSetPlpEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetPLP">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetPLP", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetPLP"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetPlpTokenConfig"`.
 */
export function useConfigStorageLogSetPlpTokenConfigEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetPlpTokenConfig">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetPlpTokenConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetPlpTokenConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetPnlFactor"`.
 */
export function useConfigStorageLogSetPnlFactorEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetPnlFactor">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetPnlFactor", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetPnlFactor"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetServiceExecutor"`.
 */
export function useConfigStorageLogSetServiceExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "LogSetServiceExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetServiceExecutor",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetServiceExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetSwapConfig"`.
 */
export function useConfigStorageLogSetSwapConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetSwapConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetSwapConfig", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetSwapConfig"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetTradingConfig"`.
 */
export function useConfigStorageLogSetTradingConfigEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetTradingConfig">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "LogSetTradingConfig",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "LogSetTradingConfig">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"LogSetWeth"`.
 */
export function useConfigStorageLogSetWethEvent(
  config: Omit<UseContractEventConfig<typeof configStorageABI, "LogSetWeth">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: configStorageABI, eventName: "LogSetWeth", ...config } as UseContractEventConfig<
    typeof configStorageABI,
    "LogSetWeth"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link configStorageABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useConfigStorageOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof configStorageABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: configStorageABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof configStorageABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function useCrossMarginHandler(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: crossMarginHandlerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function useCrossMarginHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof crossMarginHandlerABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: crossMarginHandlerABI, ...config } as UseContractReadConfig<
    typeof crossMarginHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"crossMarginService"`.
 */
export function useCrossMarginHandlerCrossMarginService<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "crossMarginService">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "crossMarginService", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "crossMarginService",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "crossMarginService", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"owner"`.
 */
export function useCrossMarginHandlerOwner<TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: crossMarginHandlerABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof crossMarginHandlerABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useCrossMarginHandlerPendingOwner<
  TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "pendingOwner">,
>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "pendingOwner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: crossMarginHandlerABI,
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof crossMarginHandlerABI, "pendingOwner", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"pyth"`.
 */
export function useCrossMarginHandlerPyth<TSelectData = ReadContractResult<typeof crossMarginHandlerABI, "pyth">>(
  config: Omit<
    UseContractReadConfig<typeof crossMarginHandlerABI, "pyth", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: crossMarginHandlerABI, functionName: "pyth", ...config } as UseContractReadConfig<
    typeof crossMarginHandlerABI,
    "pyth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function useCrossMarginHandlerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, TFunctionName>({
    abi: crossMarginHandlerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useCrossMarginHandlerAcceptOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "acceptOwnership">["abi"],
        "acceptOwnership"
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "acceptOwnership"> & {
        abi?: never
        functionName?: "acceptOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "acceptOwnership">({
    abi: crossMarginHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function useCrossMarginHandlerDepositCollateral<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "depositCollateral">["abi"],
        "depositCollateral"
      > & { functionName?: "depositCollateral" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "depositCollateral"> & {
        abi?: never
        functionName?: "depositCollateral"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "depositCollateral">({
    abi: crossMarginHandlerABI,
    functionName: "depositCollateral",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setCrossMarginService"`.
 */
export function useCrossMarginHandlerSetCrossMarginService<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "setCrossMarginService">["abi"],
        "setCrossMarginService"
      > & { functionName?: "setCrossMarginService" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "setCrossMarginService"> & {
        abi?: never
        functionName?: "setCrossMarginService"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "setCrossMarginService">({
    abi: crossMarginHandlerABI,
    functionName: "setCrossMarginService",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function useCrossMarginHandlerSetPyth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "setPyth">["abi"],
        "setPyth"
      > & { functionName?: "setPyth" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "setPyth"> & {
        abi?: never
        functionName?: "setPyth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "setPyth">({
    abi: crossMarginHandlerABI,
    functionName: "setPyth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useCrossMarginHandlerTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "transferOwnership">({
    abi: crossMarginHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function useCrossMarginHandlerWithdrawCollateral<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof crossMarginHandlerABI, "withdrawCollateral">["abi"],
        "withdrawCollateral"
      > & { functionName?: "withdrawCollateral" }
    : UseContractWriteConfig<TMode, typeof crossMarginHandlerABI, "withdrawCollateral"> & {
        abi?: never
        functionName?: "withdrawCollateral"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof crossMarginHandlerABI, "withdrawCollateral">({
    abi: crossMarginHandlerABI,
    functionName: "withdrawCollateral",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function usePrepareCrossMarginHandlerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: crossMarginHandlerABI, ...config } as UsePrepareContractWriteConfig<
    typeof crossMarginHandlerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareCrossMarginHandlerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "acceptOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"depositCollateral"`.
 */
export function usePrepareCrossMarginHandlerDepositCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "depositCollateral">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "depositCollateral",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "depositCollateral">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setCrossMarginService"`.
 */
export function usePrepareCrossMarginHandlerSetCrossMarginService(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setCrossMarginService">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "setCrossMarginService",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setCrossMarginService">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function usePrepareCrossMarginHandlerSetPyth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setPyth">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "setPyth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "setPyth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareCrossMarginHandlerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "transferOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `functionName` set to `"withdrawCollateral"`.
 */
export function usePrepareCrossMarginHandlerWithdrawCollateral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "withdrawCollateral">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: crossMarginHandlerABI,
    functionName: "withdrawCollateral",
    ...config,
  } as UsePrepareContractWriteConfig<typeof crossMarginHandlerABI, "withdrawCollateral">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function useCrossMarginHandlerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof crossMarginHandlerABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: crossMarginHandlerABI, ...config } as UseContractEventConfig<
    typeof crossMarginHandlerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogDepositCollateral"`.
 */
export function useCrossMarginHandlerLogDepositCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogDepositCollateral">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogDepositCollateral",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogDepositCollateral">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogSetCrossMarginService"`.
 */
export function useCrossMarginHandlerLogSetCrossMarginServiceEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetCrossMarginService">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogSetCrossMarginService",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetCrossMarginService">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogSetPyth"`.
 */
export function useCrossMarginHandlerLogSetPythEvent(
  config: Omit<UseContractEventConfig<typeof crossMarginHandlerABI, "LogSetPyth">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: crossMarginHandlerABI, eventName: "LogSetPyth", ...config } as UseContractEventConfig<
    typeof crossMarginHandlerABI,
    "LogSetPyth"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"LogWithdrawCollateral"`.
 */
export function useCrossMarginHandlerLogWithdrawCollateralEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "LogWithdrawCollateral">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "LogWithdrawCollateral",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "LogWithdrawCollateral">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useCrossMarginHandlerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof crossMarginHandlerABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: crossMarginHandlerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof crossMarginHandlerABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function useLimitTradeHandler(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: limitTradeHandlerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function useLimitTradeHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof limitTradeHandlerABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: limitTradeHandlerABI, ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"isAllowAllExecutor"`.
 */
export function useLimitTradeHandlerIsAllowAllExecutor<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "isAllowAllExecutor">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "isAllowAllExecutor", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "isAllowAllExecutor",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "isAllowAllExecutor", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"limitOrders"`.
 */
export function useLimitTradeHandlerLimitOrders<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "limitOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "limitOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: limitTradeHandlerABI, functionName: "limitOrders", ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    "limitOrders",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"limitOrdersIndex"`.
 */
export function useLimitTradeHandlerLimitOrdersIndex<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "limitOrdersIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "limitOrdersIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "limitOrdersIndex",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "limitOrdersIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"minExecutionFee"`.
 */
export function useLimitTradeHandlerMinExecutionFee<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "minExecutionFee">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "minExecutionFee", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "minExecutionFee",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "minExecutionFee", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"orderExecutors"`.
 */
export function useLimitTradeHandlerOrderExecutors<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "orderExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "orderExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "orderExecutors",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "orderExecutors", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"owner"`.
 */
export function useLimitTradeHandlerOwner<TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: limitTradeHandlerABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useLimitTradeHandlerPendingOwner<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "pendingOwner">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "pendingOwner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "pendingOwner", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"pyth"`.
 */
export function useLimitTradeHandlerPyth<TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "pyth">>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "pyth", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: limitTradeHandlerABI, functionName: "pyth", ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    "pyth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"tradeService"`.
 */
export function useLimitTradeHandlerTradeService<
  TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "tradeService">,
>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "tradeService", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: limitTradeHandlerABI,
    functionName: "tradeService",
    ...config,
  } as UseContractReadConfig<typeof limitTradeHandlerABI, "tradeService", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"weth"`.
 */
export function useLimitTradeHandlerWeth<TSelectData = ReadContractResult<typeof limitTradeHandlerABI, "weth">>(
  config: Omit<
    UseContractReadConfig<typeof limitTradeHandlerABI, "weth", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: limitTradeHandlerABI, functionName: "weth", ...config } as UseContractReadConfig<
    typeof limitTradeHandlerABI,
    "weth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function useLimitTradeHandlerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, TFunctionName>({
    abi: limitTradeHandlerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useLimitTradeHandlerAcceptOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "acceptOwnership">["abi"],
        "acceptOwnership"
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "acceptOwnership"> & {
        abi?: never
        functionName?: "acceptOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "acceptOwnership">({
    abi: limitTradeHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"cancelOrder"`.
 */
export function useLimitTradeHandlerCancelOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "cancelOrder">["abi"],
        "cancelOrder"
      > & { functionName?: "cancelOrder" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "cancelOrder"> & {
        abi?: never
        functionName?: "cancelOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "cancelOrder">({
    abi: limitTradeHandlerABI,
    functionName: "cancelOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"createOrder"`.
 */
export function useLimitTradeHandlerCreateOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "createOrder">["abi"],
        "createOrder"
      > & { functionName?: "createOrder" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "createOrder"> & {
        abi?: never
        functionName?: "createOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "createOrder">({
    abi: limitTradeHandlerABI,
    functionName: "createOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"executeOrder"`.
 */
export function useLimitTradeHandlerExecuteOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "executeOrder">["abi"],
        "executeOrder"
      > & { functionName?: "executeOrder" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "executeOrder"> & {
        abi?: never
        functionName?: "executeOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "executeOrder">({
    abi: limitTradeHandlerABI,
    functionName: "executeOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function useLimitTradeHandlerSetMinExecutionFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setMinExecutionFee">["abi"],
        "setMinExecutionFee"
      > & { functionName?: "setMinExecutionFee" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setMinExecutionFee"> & {
        abi?: never
        functionName?: "setMinExecutionFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setMinExecutionFee">({
    abi: limitTradeHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function useLimitTradeHandlerSetOrderExecutor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setOrderExecutor">["abi"],
        "setOrderExecutor"
      > & { functionName?: "setOrderExecutor" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setOrderExecutor"> & {
        abi?: never
        functionName?: "setOrderExecutor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setOrderExecutor">({
    abi: limitTradeHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function useLimitTradeHandlerSetPyth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setPyth">["abi"],
        "setPyth"
      > & { functionName?: "setPyth" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setPyth"> & {
        abi?: never
        functionName?: "setPyth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setPyth">({
    abi: limitTradeHandlerABI,
    functionName: "setPyth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setTradeService"`.
 */
export function useLimitTradeHandlerSetTradeService<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "setTradeService">["abi"],
        "setTradeService"
      > & { functionName?: "setTradeService" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "setTradeService"> & {
        abi?: never
        functionName?: "setTradeService"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "setTradeService">({
    abi: limitTradeHandlerABI,
    functionName: "setTradeService",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useLimitTradeHandlerTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "transferOwnership">({
    abi: limitTradeHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"updateOrder"`.
 */
export function useLimitTradeHandlerUpdateOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof limitTradeHandlerABI, "updateOrder">["abi"],
        "updateOrder"
      > & { functionName?: "updateOrder" }
    : UseContractWriteConfig<TMode, typeof limitTradeHandlerABI, "updateOrder"> & {
        abi?: never
        functionName?: "updateOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof limitTradeHandlerABI, "updateOrder">({
    abi: limitTradeHandlerABI,
    functionName: "updateOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function usePrepareLimitTradeHandlerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: limitTradeHandlerABI, ...config } as UsePrepareContractWriteConfig<
    typeof limitTradeHandlerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareLimitTradeHandlerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "acceptOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"cancelOrder"`.
 */
export function usePrepareLimitTradeHandlerCancelOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "cancelOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "cancelOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "cancelOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"createOrder"`.
 */
export function usePrepareLimitTradeHandlerCreateOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "createOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "createOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "createOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"executeOrder"`.
 */
export function usePrepareLimitTradeHandlerExecuteOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "executeOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "executeOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "executeOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function usePrepareLimitTradeHandlerSetMinExecutionFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setMinExecutionFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setMinExecutionFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function usePrepareLimitTradeHandlerSetOrderExecutor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setOrderExecutor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setOrderExecutor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function usePrepareLimitTradeHandlerSetPyth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setPyth">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setPyth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setPyth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"setTradeService"`.
 */
export function usePrepareLimitTradeHandlerSetTradeService(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setTradeService">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "setTradeService",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "setTradeService">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareLimitTradeHandlerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "transferOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `functionName` set to `"updateOrder"`.
 */
export function usePrepareLimitTradeHandlerUpdateOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "updateOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: limitTradeHandlerABI,
    functionName: "updateOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof limitTradeHandlerABI, "updateOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function useLimitTradeHandlerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof limitTradeHandlerABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: limitTradeHandlerABI, ...config } as UseContractEventConfig<
    typeof limitTradeHandlerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogCancelLimitOrder"`.
 */
export function useLimitTradeHandlerLogCancelLimitOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogCancelLimitOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogCancelLimitOrder",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogCancelLimitOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogCreateLimitOrder"`.
 */
export function useLimitTradeHandlerLogCreateLimitOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogCreateLimitOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogCreateLimitOrder",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogCreateLimitOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogExecuteLimitOrder"`.
 */
export function useLimitTradeHandlerLogExecuteLimitOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogExecuteLimitOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogExecuteLimitOrder",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogExecuteLimitOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetMinExecutionFee"`.
 */
export function useLimitTradeHandlerLogSetMinExecutionFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetMinExecutionFee">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetMinExecutionFee",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetMinExecutionFee">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetOrderExecutor"`.
 */
export function useLimitTradeHandlerLogSetOrderExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetOrderExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetOrderExecutor",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetOrderExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetPyth"`.
 */
export function useLimitTradeHandlerLogSetPythEvent(
  config: Omit<UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetPyth">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: limitTradeHandlerABI, eventName: "LogSetPyth", ...config } as UseContractEventConfig<
    typeof limitTradeHandlerABI,
    "LogSetPyth"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogSetTradeService"`.
 */
export function useLimitTradeHandlerLogSetTradeServiceEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetTradeService">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogSetTradeService",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogSetTradeService">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"LogUpdateLimitOrder"`.
 */
export function useLimitTradeHandlerLogUpdateLimitOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "LogUpdateLimitOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "LogUpdateLimitOrder",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "LogUpdateLimitOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useLimitTradeHandlerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof limitTradeHandlerABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: limitTradeHandlerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof limitTradeHandlerABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function useLiquidityHandler(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: liquidityHandlerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function useLiquidityHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof liquidityHandlerABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: liquidityHandlerABI, ...config } as UseContractReadConfig<
    typeof liquidityHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"executionOrderFee"`.
 */
export function useLiquidityHandlerExecutionOrderFee<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "executionOrderFee">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "executionOrderFee", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "executionOrderFee",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "executionOrderFee", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"getLiquidityOrders"`.
 */
export function useLiquidityHandlerGetLiquidityOrders<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "getLiquidityOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "getLiquidityOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "getLiquidityOrders",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "getLiquidityOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"liquidityOrders"`.
 */
export function useLiquidityHandlerLiquidityOrders<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "liquidityOrders">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "liquidityOrders", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "liquidityOrders",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "liquidityOrders", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"nextExecutionOrderIndex"`.
 */
export function useLiquidityHandlerNextExecutionOrderIndex<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "nextExecutionOrderIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "nextExecutionOrderIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "nextExecutionOrderIndex",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "nextExecutionOrderIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"orderExecutors"`.
 */
export function useLiquidityHandlerOrderExecutors<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "orderExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "orderExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityHandlerABI,
    functionName: "orderExecutors",
    ...config,
  } as UseContractReadConfig<typeof liquidityHandlerABI, "orderExecutors", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"owner"`.
 */
export function useLiquidityHandlerOwner<TSelectData = ReadContractResult<typeof liquidityHandlerABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: liquidityHandlerABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof liquidityHandlerABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useLiquidityHandlerPendingOwner<
  TSelectData = ReadContractResult<typeof liquidityHandlerABI, "pendingOwner">,
>(
  config: Omit<
    UseContractReadConfig<typeof liquidityHandlerABI, "pendingOwner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: liquidityHandlerABI, functionName: "pendingOwner", ...config } as UseContractReadConfig<
    typeof liquidityHandlerABI,
    "pendingOwner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function useLiquidityHandlerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, TFunctionName>({
    abi: liquidityHandlerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useLiquidityHandlerAcceptOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "acceptOwnership">["abi"],
        "acceptOwnership"
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "acceptOwnership"> & {
        abi?: never
        functionName?: "acceptOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "acceptOwnership">({
    abi: liquidityHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"cancelLiquidityOrder"`.
 */
export function useLiquidityHandlerCancelLiquidityOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "cancelLiquidityOrder">["abi"],
        "cancelLiquidityOrder"
      > & { functionName?: "cancelLiquidityOrder" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "cancelLiquidityOrder"> & {
        abi?: never
        functionName?: "cancelLiquidityOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "cancelLiquidityOrder">({
    abi: liquidityHandlerABI,
    functionName: "cancelLiquidityOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"createAddLiquidityOrder"`.
 */
export function useLiquidityHandlerCreateAddLiquidityOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "createAddLiquidityOrder">["abi"],
        "createAddLiquidityOrder"
      > & { functionName?: "createAddLiquidityOrder" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "createAddLiquidityOrder"> & {
        abi?: never
        functionName?: "createAddLiquidityOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "createAddLiquidityOrder">({
    abi: liquidityHandlerABI,
    functionName: "createAddLiquidityOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"createRemoveLiquidityOrder"`.
 */
export function useLiquidityHandlerCreateRemoveLiquidityOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "createRemoveLiquidityOrder">["abi"],
        "createRemoveLiquidityOrder"
      > & { functionName?: "createRemoveLiquidityOrder" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "createRemoveLiquidityOrder"> & {
        abi?: never
        functionName?: "createRemoveLiquidityOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "createRemoveLiquidityOrder">({
    abi: liquidityHandlerABI,
    functionName: "createRemoveLiquidityOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"executeLiquidity"`.
 */
export function useLiquidityHandlerExecuteLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "executeLiquidity">["abi"],
        "executeLiquidity"
      > & { functionName?: "executeLiquidity" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "executeLiquidity"> & {
        abi?: never
        functionName?: "executeLiquidity"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "executeLiquidity">({
    abi: liquidityHandlerABI,
    functionName: "executeLiquidity",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"executeOrder"`.
 */
export function useLiquidityHandlerExecuteOrder<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "executeOrder">["abi"],
        "executeOrder"
      > & { functionName?: "executeOrder" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "executeOrder"> & {
        abi?: never
        functionName?: "executeOrder"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "executeOrder">({
    abi: liquidityHandlerABI,
    functionName: "executeOrder",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setLiquidityService"`.
 */
export function useLiquidityHandlerSetLiquidityService<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setLiquidityService">["abi"],
        "setLiquidityService"
      > & { functionName?: "setLiquidityService" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setLiquidityService"> & {
        abi?: never
        functionName?: "setLiquidityService"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setLiquidityService">({
    abi: liquidityHandlerABI,
    functionName: "setLiquidityService",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function useLiquidityHandlerSetMinExecutionFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setMinExecutionFee">["abi"],
        "setMinExecutionFee"
      > & { functionName?: "setMinExecutionFee" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setMinExecutionFee"> & {
        abi?: never
        functionName?: "setMinExecutionFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setMinExecutionFee">({
    abi: liquidityHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function useLiquidityHandlerSetOrderExecutor<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setOrderExecutor">["abi"],
        "setOrderExecutor"
      > & { functionName?: "setOrderExecutor" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setOrderExecutor"> & {
        abi?: never
        functionName?: "setOrderExecutor"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setOrderExecutor">({
    abi: liquidityHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function useLiquidityHandlerSetPyth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "setPyth">["abi"],
        "setPyth"
      > & { functionName?: "setPyth" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "setPyth"> & {
        abi?: never
        functionName?: "setPyth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "setPyth">({
    abi: liquidityHandlerABI,
    functionName: "setPyth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useLiquidityHandlerTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityHandlerABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof liquidityHandlerABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityHandlerABI, "transferOwnership">({
    abi: liquidityHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function usePrepareLiquidityHandlerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof liquidityHandlerABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: liquidityHandlerABI, ...config } as UsePrepareContractWriteConfig<
    typeof liquidityHandlerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareLiquidityHandlerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "acceptOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"cancelLiquidityOrder"`.
 */
export function usePrepareLiquidityHandlerCancelLiquidityOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "cancelLiquidityOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "cancelLiquidityOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "cancelLiquidityOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"createAddLiquidityOrder"`.
 */
export function usePrepareLiquidityHandlerCreateAddLiquidityOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "createAddLiquidityOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "createAddLiquidityOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "createAddLiquidityOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"createRemoveLiquidityOrder"`.
 */
export function usePrepareLiquidityHandlerCreateRemoveLiquidityOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "createRemoveLiquidityOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "createRemoveLiquidityOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "createRemoveLiquidityOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"executeLiquidity"`.
 */
export function usePrepareLiquidityHandlerExecuteLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "executeLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "executeLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "executeLiquidity">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"executeOrder"`.
 */
export function usePrepareLiquidityHandlerExecuteOrder(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "executeOrder">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "executeOrder",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "executeOrder">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setLiquidityService"`.
 */
export function usePrepareLiquidityHandlerSetLiquidityService(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setLiquidityService">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setLiquidityService",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setLiquidityService">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setMinExecutionFee"`.
 */
export function usePrepareLiquidityHandlerSetMinExecutionFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setMinExecutionFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setMinExecutionFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setMinExecutionFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setOrderExecutor"`.
 */
export function usePrepareLiquidityHandlerSetOrderExecutor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setOrderExecutor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setOrderExecutor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setOrderExecutor">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function usePrepareLiquidityHandlerSetPyth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setPyth">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "setPyth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "setPyth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareLiquidityHandlerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityHandlerABI, "transferOwnership">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function useLiquidityHandlerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof liquidityHandlerABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: liquidityHandlerABI, ...config } as UseContractEventConfig<
    typeof liquidityHandlerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogCancelLiquidityOrder"`.
 */
export function useLiquidityHandlerLogCancelLiquidityOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogCancelLiquidityOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogCancelLiquidityOrder",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogCancelLiquidityOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogCreateAddLiquidityOrder"`.
 */
export function useLiquidityHandlerLogCreateAddLiquidityOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogCreateAddLiquidityOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogCreateAddLiquidityOrder",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogCreateAddLiquidityOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogCreateRemoveLiquidityOrder"`.
 */
export function useLiquidityHandlerLogCreateRemoveLiquidityOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogCreateRemoveLiquidityOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogCreateRemoveLiquidityOrder",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogCreateRemoveLiquidityOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogExecuteLiquidityOrder"`.
 */
export function useLiquidityHandlerLogExecuteLiquidityOrderEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogExecuteLiquidityOrder">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogExecuteLiquidityOrder",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogExecuteLiquidityOrder">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetLiquidityService"`.
 */
export function useLiquidityHandlerLogSetLiquidityServiceEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogSetLiquidityService">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogSetLiquidityService",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogSetLiquidityService">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetMinExecutionFee"`.
 */
export function useLiquidityHandlerLogSetMinExecutionFeeEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogSetMinExecutionFee">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogSetMinExecutionFee",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogSetMinExecutionFee">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetOrderExecutor"`.
 */
export function useLiquidityHandlerLogSetOrderExecutorEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "LogSetOrderExecutor">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "LogSetOrderExecutor",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "LogSetOrderExecutor">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"LogSetPyth"`.
 */
export function useLiquidityHandlerLogSetPythEvent(
  config: Omit<UseContractEventConfig<typeof liquidityHandlerABI, "LogSetPyth">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: liquidityHandlerABI, eventName: "LogSetPyth", ...config } as UseContractEventConfig<
    typeof liquidityHandlerABI,
    "LogSetPyth"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useLiquidityHandlerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityHandlerABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityHandlerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof liquidityHandlerABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link marketTradeHandlerABI}__.
 */
export function useMarketTradeHandler(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: marketTradeHandlerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketTradeHandlerABI}__.
 */
export function useMarketTradeHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof marketTradeHandlerABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof marketTradeHandlerABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: marketTradeHandlerABI, ...config } as UseContractReadConfig<
    typeof marketTradeHandlerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"owner"`.
 */
export function useMarketTradeHandlerOwner<TSelectData = ReadContractResult<typeof marketTradeHandlerABI, "owner">>(
  config: Omit<
    UseContractReadConfig<typeof marketTradeHandlerABI, "owner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: marketTradeHandlerABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof marketTradeHandlerABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useMarketTradeHandlerPendingOwner<
  TSelectData = ReadContractResult<typeof marketTradeHandlerABI, "pendingOwner">,
>(
  config: Omit<
    UseContractReadConfig<typeof marketTradeHandlerABI, "pendingOwner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: marketTradeHandlerABI,
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof marketTradeHandlerABI, "pendingOwner", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"pyth"`.
 */
export function useMarketTradeHandlerPyth<TSelectData = ReadContractResult<typeof marketTradeHandlerABI, "pyth">>(
  config: Omit<
    UseContractReadConfig<typeof marketTradeHandlerABI, "pyth", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: marketTradeHandlerABI, functionName: "pyth", ...config } as UseContractReadConfig<
    typeof marketTradeHandlerABI,
    "pyth",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"tradeService"`.
 */
export function useMarketTradeHandlerTradeService<
  TSelectData = ReadContractResult<typeof marketTradeHandlerABI, "tradeService">,
>(
  config: Omit<
    UseContractReadConfig<typeof marketTradeHandlerABI, "tradeService", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: marketTradeHandlerABI,
    functionName: "tradeService",
    ...config,
  } as UseContractReadConfig<typeof marketTradeHandlerABI, "tradeService", TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__.
 */
export function useMarketTradeHandlerWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketTradeHandlerABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof marketTradeHandlerABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketTradeHandlerABI, TFunctionName>({
    abi: marketTradeHandlerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useMarketTradeHandlerAcceptOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketTradeHandlerABI, "acceptOwnership">["abi"],
        "acceptOwnership"
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<TMode, typeof marketTradeHandlerABI, "acceptOwnership"> & {
        abi?: never
        functionName?: "acceptOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketTradeHandlerABI, "acceptOwnership">({
    abi: marketTradeHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"buy"`.
 */
export function useMarketTradeHandlerBuy<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof marketTradeHandlerABI, "buy">["abi"], "buy"> & {
        functionName?: "buy"
      }
    : UseContractWriteConfig<TMode, typeof marketTradeHandlerABI, "buy"> & {
        abi?: never
        functionName?: "buy"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketTradeHandlerABI, "buy">({
    abi: marketTradeHandlerABI,
    functionName: "buy",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"sell"`.
 */
export function useMarketTradeHandlerSell<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof marketTradeHandlerABI, "sell">["abi"], "sell"> & {
        functionName?: "sell"
      }
    : UseContractWriteConfig<TMode, typeof marketTradeHandlerABI, "sell"> & {
        abi?: never
        functionName?: "sell"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketTradeHandlerABI, "sell">({
    abi: marketTradeHandlerABI,
    functionName: "sell",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function useMarketTradeHandlerSetPyth<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketTradeHandlerABI, "setPyth">["abi"],
        "setPyth"
      > & { functionName?: "setPyth" }
    : UseContractWriteConfig<TMode, typeof marketTradeHandlerABI, "setPyth"> & {
        abi?: never
        functionName?: "setPyth"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketTradeHandlerABI, "setPyth">({
    abi: marketTradeHandlerABI,
    functionName: "setPyth",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"setTradeService"`.
 */
export function useMarketTradeHandlerSetTradeService<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketTradeHandlerABI, "setTradeService">["abi"],
        "setTradeService"
      > & { functionName?: "setTradeService" }
    : UseContractWriteConfig<TMode, typeof marketTradeHandlerABI, "setTradeService"> & {
        abi?: never
        functionName?: "setTradeService"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketTradeHandlerABI, "setTradeService">({
    abi: marketTradeHandlerABI,
    functionName: "setTradeService",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMarketTradeHandlerTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof marketTradeHandlerABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof marketTradeHandlerABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof marketTradeHandlerABI, "transferOwnership">({
    abi: marketTradeHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__.
 */
export function usePrepareMarketTradeHandlerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: marketTradeHandlerABI, ...config } as UsePrepareContractWriteConfig<
    typeof marketTradeHandlerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareMarketTradeHandlerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketTradeHandlerABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "acceptOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"buy"`.
 */
export function usePrepareMarketTradeHandlerBuy(
  config: Omit<UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "buy">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketTradeHandlerABI,
    functionName: "buy",
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "buy">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"sell"`.
 */
export function usePrepareMarketTradeHandlerSell(
  config: Omit<UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "sell">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketTradeHandlerABI,
    functionName: "sell",
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "sell">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"setPyth"`.
 */
export function usePrepareMarketTradeHandlerSetPyth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "setPyth">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketTradeHandlerABI,
    functionName: "setPyth",
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "setPyth">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"setTradeService"`.
 */
export function usePrepareMarketTradeHandlerSetTradeService(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "setTradeService">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketTradeHandlerABI,
    functionName: "setTradeService",
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "setTradeService">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMarketTradeHandlerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketTradeHandlerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof marketTradeHandlerABI, "transferOwnership">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketTradeHandlerABI}__.
 */
export function useMarketTradeHandlerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof marketTradeHandlerABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: marketTradeHandlerABI, ...config } as UseContractEventConfig<
    typeof marketTradeHandlerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `eventName` set to `"LogBuy"`.
 */
export function useMarketTradeHandlerLogBuyEvent(
  config: Omit<UseContractEventConfig<typeof marketTradeHandlerABI, "LogBuy">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: marketTradeHandlerABI, eventName: "LogBuy", ...config } as UseContractEventConfig<
    typeof marketTradeHandlerABI,
    "LogBuy"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `eventName` set to `"LogSell"`.
 */
export function useMarketTradeHandlerLogSellEvent(
  config: Omit<UseContractEventConfig<typeof marketTradeHandlerABI, "LogSell">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: marketTradeHandlerABI, eventName: "LogSell", ...config } as UseContractEventConfig<
    typeof marketTradeHandlerABI,
    "LogSell"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `eventName` set to `"LogSetPyth"`.
 */
export function useMarketTradeHandlerLogSetPythEvent(
  config: Omit<UseContractEventConfig<typeof marketTradeHandlerABI, "LogSetPyth">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: marketTradeHandlerABI, eventName: "LogSetPyth", ...config } as UseContractEventConfig<
    typeof marketTradeHandlerABI,
    "LogSetPyth"
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `eventName` set to `"LogSetTradeService"`.
 */
export function useMarketTradeHandlerLogSetTradeServiceEvent(
  config: Omit<
    UseContractEventConfig<typeof marketTradeHandlerABI, "LogSetTradeService">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: marketTradeHandlerABI,
    eventName: "LogSetTradeService",
    ...config,
  } as UseContractEventConfig<typeof marketTradeHandlerABI, "LogSetTradeService">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketTradeHandlerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMarketTradeHandlerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof marketTradeHandlerABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: marketTradeHandlerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof marketTradeHandlerABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePerpStorage(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: perpStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePerpStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof perpStorageABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof perpStorageABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: perpStorageABI, ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"badDebt"`.
 */
export function usePerpStorageBadDebt<TSelectData = ReadContractResult<typeof perpStorageABI, "badDebt">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "badDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "badDebt", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "badDebt",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getBadDebt"`.
 */
export function usePerpStorageGetBadDebt<TSelectData = ReadContractResult<typeof perpStorageABI, "getBadDebt">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getBadDebt", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "getBadDebt", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "getBadDebt",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getGlobalAssetClassByIndex"`.
 */
export function usePerpStorageGetGlobalAssetClassByIndex<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getGlobalAssetClassByIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getGlobalAssetClassByIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getGlobalAssetClassByIndex",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getGlobalAssetClassByIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getGlobalMarketByIndex"`.
 */
export function usePerpStorageGetGlobalMarketByIndex<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getGlobalMarketByIndex">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getGlobalMarketByIndex", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getGlobalMarketByIndex",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getGlobalMarketByIndex", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getGlobalState"`.
 */
export function usePerpStorageGetGlobalState<TSelectData = ReadContractResult<typeof perpStorageABI, "getGlobalState">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getGlobalState", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "getGlobalState", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "getGlobalState",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getNumberOfSubAccountPosition"`.
 */
export function usePerpStorageGetNumberOfSubAccountPosition<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getNumberOfSubAccountPosition">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getNumberOfSubAccountPosition", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getNumberOfSubAccountPosition",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getNumberOfSubAccountPosition", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getPositionById"`.
 */
export function usePerpStorageGetPositionById<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getPositionById">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getPositionById", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "getPositionById", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "getPositionById",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getPositionBySubAccount"`.
 */
export function usePerpStorageGetPositionBySubAccount<
  TSelectData = ReadContractResult<typeof perpStorageABI, "getPositionBySubAccount">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getPositionBySubAccount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "getPositionBySubAccount",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "getPositionBySubAccount", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"getPositionIds"`.
 */
export function usePerpStorageGetPositionIds<TSelectData = ReadContractResult<typeof perpStorageABI, "getPositionIds">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "getPositionIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "getPositionIds", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "getPositionIds",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"globalAssetClass"`.
 */
export function usePerpStorageGlobalAssetClass<
  TSelectData = ReadContractResult<typeof perpStorageABI, "globalAssetClass">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "globalAssetClass", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "globalAssetClass", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "globalAssetClass",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"globalMarkets"`.
 */
export function usePerpStorageGlobalMarkets<TSelectData = ReadContractResult<typeof perpStorageABI, "globalMarkets">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "globalMarkets", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "globalMarkets", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "globalMarkets",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"globalState"`.
 */
export function usePerpStorageGlobalState<TSelectData = ReadContractResult<typeof perpStorageABI, "globalState">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "globalState", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "globalState", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "globalState",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"owner"`.
 */
export function usePerpStorageOwner<TSelectData = ReadContractResult<typeof perpStorageABI, "owner">>(
  config: Omit<UseContractReadConfig<typeof perpStorageABI, "owner", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function usePerpStoragePendingOwner<TSelectData = ReadContractResult<typeof perpStorageABI, "pendingOwner">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "pendingOwner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "pendingOwner", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "pendingOwner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"positions"`.
 */
export function usePerpStoragePositions<TSelectData = ReadContractResult<typeof perpStorageABI, "positions">>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "positions", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "positions", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "positions",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"serviceExecutors"`.
 */
export function usePerpStorageServiceExecutors<
  TSelectData = ReadContractResult<typeof perpStorageABI, "serviceExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "serviceExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: perpStorageABI, functionName: "serviceExecutors", ...config } as UseContractReadConfig<
    typeof perpStorageABI,
    "serviceExecutors",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"subAccountBorrowingFee"`.
 */
export function usePerpStorageSubAccountBorrowingFee<
  TSelectData = ReadContractResult<typeof perpStorageABI, "subAccountBorrowingFee">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "subAccountBorrowingFee", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "subAccountBorrowingFee",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "subAccountBorrowingFee", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"subAccountPositionIds"`.
 */
export function usePerpStorageSubAccountPositionIds<
  TSelectData = ReadContractResult<typeof perpStorageABI, "subAccountPositionIds">,
>(
  config: Omit<
    UseContractReadConfig<typeof perpStorageABI, "subAccountPositionIds", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: perpStorageABI,
    functionName: "subAccountPositionIds",
    ...config,
  } as UseContractReadConfig<typeof perpStorageABI, "subAccountPositionIds", TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePerpStorageWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof perpStorageABI, string>["abi"], TFunctionName>
    : UseContractWriteConfig<TMode, typeof perpStorageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, TFunctionName>({ abi: perpStorageABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePerpStorageAcceptOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "acceptOwnership">["abi"],
        "acceptOwnership"
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "acceptOwnership"> & {
        abi?: never
        functionName?: "acceptOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "acceptOwnership">({
    abi: perpStorageABI,
    functionName: "acceptOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"addBadDebt"`.
 */
export function usePerpStorageAddBadDebt<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "addBadDebt">["abi"],
        "addBadDebt"
      > & { functionName?: "addBadDebt" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "addBadDebt"> & {
        abi?: never
        functionName?: "addBadDebt"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "addBadDebt">({
    abi: perpStorageABI,
    functionName: "addBadDebt",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreasePositionSize"`.
 */
export function usePerpStorageDecreasePositionSize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "decreasePositionSize">["abi"],
        "decreasePositionSize"
      > & { functionName?: "decreasePositionSize" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "decreasePositionSize"> & {
        abi?: never
        functionName?: "decreasePositionSize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "decreasePositionSize">({
    abi: perpStorageABI,
    functionName: "decreasePositionSize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreaseReserved"`.
 */
export function usePerpStorageDecreaseReserved<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "decreaseReserved">["abi"],
        "decreaseReserved"
      > & { functionName?: "decreaseReserved" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "decreaseReserved"> & {
        abi?: never
        functionName?: "decreaseReserved"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "decreaseReserved">({
    abi: perpStorageABI,
    functionName: "decreaseReserved",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreaseSubAccountBorrowingFee"`.
 */
export function usePerpStorageDecreaseSubAccountBorrowingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "decreaseSubAccountBorrowingFee">["abi"],
        "decreaseSubAccountBorrowingFee"
      > & { functionName?: "decreaseSubAccountBorrowingFee" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "decreaseSubAccountBorrowingFee"> & {
        abi?: never
        functionName?: "decreaseSubAccountBorrowingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "decreaseSubAccountBorrowingFee">({
    abi: perpStorageABI,
    functionName: "decreaseSubAccountBorrowingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"increasePositionSize"`.
 */
export function usePerpStorageIncreasePositionSize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "increasePositionSize">["abi"],
        "increasePositionSize"
      > & { functionName?: "increasePositionSize" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "increasePositionSize"> & {
        abi?: never
        functionName?: "increasePositionSize"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "increasePositionSize">({
    abi: perpStorageABI,
    functionName: "increasePositionSize",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"increaseReserved"`.
 */
export function usePerpStorageIncreaseReserved<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "increaseReserved">["abi"],
        "increaseReserved"
      > & { functionName?: "increaseReserved" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "increaseReserved"> & {
        abi?: never
        functionName?: "increaseReserved"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "increaseReserved">({
    abi: perpStorageABI,
    functionName: "increaseReserved",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"increaseSubAccountBorrowingFee"`.
 */
export function usePerpStorageIncreaseSubAccountBorrowingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "increaseSubAccountBorrowingFee">["abi"],
        "increaseSubAccountBorrowingFee"
      > & { functionName?: "increaseSubAccountBorrowingFee" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "increaseSubAccountBorrowingFee"> & {
        abi?: never
        functionName?: "increaseSubAccountBorrowingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "increaseSubAccountBorrowingFee">({
    abi: perpStorageABI,
    functionName: "increaseSubAccountBorrowingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"removePositionFromSubAccount"`.
 */
export function usePerpStorageRemovePositionFromSubAccount<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "removePositionFromSubAccount">["abi"],
        "removePositionFromSubAccount"
      > & { functionName?: "removePositionFromSubAccount" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "removePositionFromSubAccount"> & {
        abi?: never
        functionName?: "removePositionFromSubAccount"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "removePositionFromSubAccount">({
    abi: perpStorageABI,
    functionName: "removePositionFromSubAccount",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"savePosition"`.
 */
export function usePerpStorageSavePosition<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "savePosition">["abi"],
        "savePosition"
      > & { functionName?: "savePosition" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "savePosition"> & {
        abi?: never
        functionName?: "savePosition"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "savePosition">({
    abi: perpStorageABI,
    functionName: "savePosition",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function usePerpStorageSetServiceExecutors<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "setServiceExecutors">["abi"],
        "setServiceExecutors"
      > & { functionName?: "setServiceExecutors" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "setServiceExecutors"> & {
        abi?: never
        functionName?: "setServiceExecutors"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "setServiceExecutors">({
    abi: perpStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePerpStorageTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "transferOwnership">({
    abi: perpStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalAssetClass"`.
 */
export function usePerpStorageUpdateGlobalAssetClass<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateGlobalAssetClass">["abi"],
        "updateGlobalAssetClass"
      > & { functionName?: "updateGlobalAssetClass" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateGlobalAssetClass"> & {
        abi?: never
        functionName?: "updateGlobalAssetClass"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateGlobalAssetClass">({
    abi: perpStorageABI,
    functionName: "updateGlobalAssetClass",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalLongMarketById"`.
 */
export function usePerpStorageUpdateGlobalLongMarketById<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateGlobalLongMarketById">["abi"],
        "updateGlobalLongMarketById"
      > & { functionName?: "updateGlobalLongMarketById" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateGlobalLongMarketById"> & {
        abi?: never
        functionName?: "updateGlobalLongMarketById"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateGlobalLongMarketById">({
    abi: perpStorageABI,
    functionName: "updateGlobalLongMarketById",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalMarket"`.
 */
export function usePerpStorageUpdateGlobalMarket<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateGlobalMarket">["abi"],
        "updateGlobalMarket"
      > & { functionName?: "updateGlobalMarket" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateGlobalMarket"> & {
        abi?: never
        functionName?: "updateGlobalMarket"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateGlobalMarket">({
    abi: perpStorageABI,
    functionName: "updateGlobalMarket",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalMarketPrice"`.
 */
export function usePerpStorageUpdateGlobalMarketPrice<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateGlobalMarketPrice">["abi"],
        "updateGlobalMarketPrice"
      > & { functionName?: "updateGlobalMarketPrice" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateGlobalMarketPrice"> & {
        abi?: never
        functionName?: "updateGlobalMarketPrice"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateGlobalMarketPrice">({
    abi: perpStorageABI,
    functionName: "updateGlobalMarketPrice",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalShortMarketById"`.
 */
export function usePerpStorageUpdateGlobalShortMarketById<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateGlobalShortMarketById">["abi"],
        "updateGlobalShortMarketById"
      > & { functionName?: "updateGlobalShortMarketById" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateGlobalShortMarketById"> & {
        abi?: never
        functionName?: "updateGlobalShortMarketById"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateGlobalShortMarketById">({
    abi: perpStorageABI,
    functionName: "updateGlobalShortMarketById",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalState"`.
 */
export function usePerpStorageUpdateGlobalState<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof perpStorageABI, "updateGlobalState">["abi"],
        "updateGlobalState"
      > & { functionName?: "updateGlobalState" }
    : UseContractWriteConfig<TMode, typeof perpStorageABI, "updateGlobalState"> & {
        abi?: never
        functionName?: "updateGlobalState"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof perpStorageABI, "updateGlobalState">({
    abi: perpStorageABI,
    functionName: "updateGlobalState",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePreparePerpStorageWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof perpStorageABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: perpStorageABI, ...config } as UsePrepareContractWriteConfig<
    typeof perpStorageABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePreparePerpStorageAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "acceptOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"addBadDebt"`.
 */
export function usePreparePerpStorageAddBadDebt(
  config: Omit<UsePrepareContractWriteConfig<typeof perpStorageABI, "addBadDebt">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "addBadDebt",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "addBadDebt">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreasePositionSize"`.
 */
export function usePreparePerpStorageDecreasePositionSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "decreasePositionSize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "decreasePositionSize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "decreasePositionSize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreaseReserved"`.
 */
export function usePreparePerpStorageDecreaseReserved(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "decreaseReserved">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "decreaseReserved",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "decreaseReserved">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"decreaseSubAccountBorrowingFee"`.
 */
export function usePreparePerpStorageDecreaseSubAccountBorrowingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "decreaseSubAccountBorrowingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "decreaseSubAccountBorrowingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "decreaseSubAccountBorrowingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"increasePositionSize"`.
 */
export function usePreparePerpStorageIncreasePositionSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "increasePositionSize">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "increasePositionSize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "increasePositionSize">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"increaseReserved"`.
 */
export function usePreparePerpStorageIncreaseReserved(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "increaseReserved">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "increaseReserved",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "increaseReserved">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"increaseSubAccountBorrowingFee"`.
 */
export function usePreparePerpStorageIncreaseSubAccountBorrowingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "increaseSubAccountBorrowingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "increaseSubAccountBorrowingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "increaseSubAccountBorrowingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"removePositionFromSubAccount"`.
 */
export function usePreparePerpStorageRemovePositionFromSubAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "removePositionFromSubAccount">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "removePositionFromSubAccount",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "removePositionFromSubAccount">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"savePosition"`.
 */
export function usePreparePerpStorageSavePosition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "savePosition">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "savePosition",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "savePosition">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function usePreparePerpStorageSetServiceExecutors(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "setServiceExecutors">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "setServiceExecutors">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePreparePerpStorageTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "transferOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalAssetClass"`.
 */
export function usePreparePerpStorageUpdateGlobalAssetClass(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalAssetClass">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateGlobalAssetClass",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalAssetClass">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalLongMarketById"`.
 */
export function usePreparePerpStorageUpdateGlobalLongMarketById(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalLongMarketById">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateGlobalLongMarketById",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalLongMarketById">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalMarket"`.
 */
export function usePreparePerpStorageUpdateGlobalMarket(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalMarket">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateGlobalMarket",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalMarket">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalMarketPrice"`.
 */
export function usePreparePerpStorageUpdateGlobalMarketPrice(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalMarketPrice">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateGlobalMarketPrice",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalMarketPrice">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalShortMarketById"`.
 */
export function usePreparePerpStorageUpdateGlobalShortMarketById(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalShortMarketById">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateGlobalShortMarketById",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalShortMarketById">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link perpStorageABI}__ and `functionName` set to `"updateGlobalState"`.
 */
export function usePreparePerpStorageUpdateGlobalState(
  config: Omit<
    UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalState">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: perpStorageABI,
    functionName: "updateGlobalState",
    ...config,
  } as UsePrepareContractWriteConfig<typeof perpStorageABI, "updateGlobalState">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function usePerpStorageEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof perpStorageABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: perpStorageABI, ...config } as UseContractEventConfig<
    typeof perpStorageABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link perpStorageABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function usePerpStorageOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof perpStorageABI, "OwnershipTransferred">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: perpStorageABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof perpStorageABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link perpStorageABI}__ and `eventName` set to `"SetServiceExecutor"`.
 */
export function usePerpStorageSetServiceExecutorEvent(
  config: Omit<UseContractEventConfig<typeof perpStorageABI, "SetServiceExecutor">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({ abi: perpStorageABI, eventName: "SetServiceExecutor", ...config } as UseContractEventConfig<
    typeof perpStorageABI,
    "SetServiceExecutor"
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function useVaultStorage(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: vaultStorageABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function useVaultStorageRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vaultStorageABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof vaultStorageABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
  return useContractRead({ abi: vaultStorageABI, ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"devFees"`.
 */
export function useVaultStorageDevFees<TSelectData = ReadContractResult<typeof vaultStorageABI, "devFees">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "devFees", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "devFees", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "devFees",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"fundingFeeReserve"`.
 */
export function useVaultStorageFundingFeeReserve<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "fundingFeeReserve">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "fundingFeeReserve", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "fundingFeeReserve",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "fundingFeeReserve", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"getTraderTokens"`.
 */
export function useVaultStorageGetTraderTokens<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "getTraderTokens">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "getTraderTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "getTraderTokens", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "getTraderTokens",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"owner"`.
 */
export function useVaultStorageOwner<TSelectData = ReadContractResult<typeof vaultStorageABI, "owner">>(
  config: Omit<UseContractReadConfig<typeof vaultStorageABI, "owner", TSelectData>, "abi" | "functionName"> = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "owner", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "owner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useVaultStoragePendingOwner<TSelectData = ReadContractResult<typeof vaultStorageABI, "pendingOwner">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "pendingOwner", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "pendingOwner", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "pendingOwner",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"plpLiquidity"`.
 */
export function useVaultStoragePlpLiquidity<TSelectData = ReadContractResult<typeof vaultStorageABI, "plpLiquidity">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "plpLiquidity", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "plpLiquidity", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "plpLiquidity",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"plpLiquidityDebtUSDE30"`.
 */
export function useVaultStoragePlpLiquidityDebtUsde30<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "plpLiquidityDebtUSDE30">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "plpLiquidityDebtUSDE30", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "plpLiquidityDebtUSDE30",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "plpLiquidityDebtUSDE30", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"protocolFees"`.
 */
export function useVaultStorageProtocolFees<TSelectData = ReadContractResult<typeof vaultStorageABI, "protocolFees">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "protocolFees", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "protocolFees", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "protocolFees",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pullPLPLiquidity"`.
 */
export function useVaultStoragePullPlpLiquidity<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "pullPLPLiquidity">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "pullPLPLiquidity", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "pullPLPLiquidity", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "pullPLPLiquidity",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"serviceExecutors"`.
 */
export function useVaultStorageServiceExecutors<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "serviceExecutors">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "serviceExecutors", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "serviceExecutors", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "serviceExecutors",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"totalAmount"`.
 */
export function useVaultStorageTotalAmount<TSelectData = ReadContractResult<typeof vaultStorageABI, "totalAmount">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "totalAmount", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "totalAmount", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "totalAmount",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"traderBalances"`.
 */
export function useVaultStorageTraderBalances<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "traderBalances">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "traderBalances", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "traderBalances", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "traderBalances",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"traderTokens"`.
 */
export function useVaultStorageTraderTokens<TSelectData = ReadContractResult<typeof vaultStorageABI, "traderTokens">>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "traderTokens", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({ abi: vaultStorageABI, functionName: "traderTokens", ...config } as UseContractReadConfig<
    typeof vaultStorageABI,
    "traderTokens",
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"validateAddTraderToken"`.
 */
export function useVaultStorageValidateAddTraderToken<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "validateAddTraderToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "validateAddTraderToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "validateAddTraderToken",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "validateAddTraderToken", TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"validateRemoveTraderToken"`.
 */
export function useVaultStorageValidateRemoveTraderToken<
  TSelectData = ReadContractResult<typeof vaultStorageABI, "validateRemoveTraderToken">,
>(
  config: Omit<
    UseContractReadConfig<typeof vaultStorageABI, "validateRemoveTraderToken", TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: vaultStorageABI,
    functionName: "validateRemoveTraderToken",
    ...config,
  } as UseContractReadConfig<typeof vaultStorageABI, "validateRemoveTraderToken", TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function useVaultStorageWrite<TMode extends WriteContractMode, TFunctionName extends string>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vaultStorageABI, string>["abi"], TFunctionName>
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, TFunctionName>({ abi: vaultStorageABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useVaultStorageAcceptOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "acceptOwnership">["abi"],
        "acceptOwnership"
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "acceptOwnership"> & {
        abi?: never
        functionName?: "acceptOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "acceptOwnership">({
    abi: vaultStorageABI,
    functionName: "acceptOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFee"`.
 */
export function useVaultStorageAddFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vaultStorageABI, "addFee">["abi"], "addFee"> & {
        functionName?: "addFee"
      }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addFee"> & {
        abi?: never
        functionName?: "addFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addFee">({
    abi: vaultStorageABI,
    functionName: "addFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFundingFee"`.
 */
export function useVaultStorageAddFundingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addFundingFee">["abi"],
        "addFundingFee"
      > & { functionName?: "addFundingFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addFundingFee"> & {
        abi?: never
        functionName?: "addFundingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addFundingFee">({
    abi: vaultStorageABI,
    functionName: "addFundingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addPLPLiquidity"`.
 */
export function useVaultStorageAddPlpLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addPLPLiquidity">["abi"],
        "addPLPLiquidity"
      > & { functionName?: "addPLPLiquidity" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addPLPLiquidity"> & {
        abi?: never
        functionName?: "addPLPLiquidity"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addPLPLiquidity">({
    abi: vaultStorageABI,
    functionName: "addPLPLiquidity",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addPlpLiquidityDebtUSDE30"`.
 */
export function useVaultStorageAddPlpLiquidityDebtUsde30<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "addPlpLiquidityDebtUSDE30">["abi"],
        "addPlpLiquidityDebtUSDE30"
      > & { functionName?: "addPlpLiquidityDebtUSDE30" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "addPlpLiquidityDebtUSDE30"> & {
        abi?: never
        functionName?: "addPlpLiquidityDebtUSDE30"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "addPlpLiquidityDebtUSDE30">({
    abi: vaultStorageABI,
    functionName: "addPlpLiquidityDebtUSDE30",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"borrowFundingFeeFromPlpToTrader"`.
 */
export function useVaultStorageBorrowFundingFeeFromPlpToTrader<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "borrowFundingFeeFromPlpToTrader">["abi"],
        "borrowFundingFeeFromPlpToTrader"
      > & { functionName?: "borrowFundingFeeFromPlpToTrader" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "borrowFundingFeeFromPlpToTrader"> & {
        abi?: never
        functionName?: "borrowFundingFeeFromPlpToTrader"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "borrowFundingFeeFromPlpToTrader">({
    abi: vaultStorageABI,
    functionName: "borrowFundingFeeFromPlpToTrader",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"decreaseTraderBalance"`.
 */
export function useVaultStorageDecreaseTraderBalance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "decreaseTraderBalance">["abi"],
        "decreaseTraderBalance"
      > & { functionName?: "decreaseTraderBalance" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "decreaseTraderBalance"> & {
        abi?: never
        functionName?: "decreaseTraderBalance"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "decreaseTraderBalance">({
    abi: vaultStorageABI,
    functionName: "decreaseTraderBalance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"increaseTraderBalance"`.
 */
export function useVaultStorageIncreaseTraderBalance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "increaseTraderBalance">["abi"],
        "increaseTraderBalance"
      > & { functionName?: "increaseTraderBalance" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "increaseTraderBalance"> & {
        abi?: never
        functionName?: "increaseTraderBalance"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "increaseTraderBalance">({
    abi: vaultStorageABI,
    functionName: "increaseTraderBalance",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payBorrowingFee"`.
 */
export function useVaultStoragePayBorrowingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payBorrowingFee">["abi"],
        "payBorrowingFee"
      > & { functionName?: "payBorrowingFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payBorrowingFee"> & {
        abi?: never
        functionName?: "payBorrowingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payBorrowingFee">({
    abi: vaultStorageABI,
    functionName: "payBorrowingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromFundingFeeReserveToTrader"`.
 */
export function useVaultStoragePayFundingFeeFromFundingFeeReserveToTrader<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader">["abi"],
        "payFundingFeeFromFundingFeeReserveToTrader"
      > & { functionName?: "payFundingFeeFromFundingFeeReserveToTrader" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader"> & {
        abi?: never
        functionName?: "payFundingFeeFromFundingFeeReserveToTrader"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader">({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromFundingFeeReserveToTrader",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromPlpToTrader"`.
 */
export function useVaultStoragePayFundingFeeFromPlpToTrader<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payFundingFeeFromPlpToTrader">["abi"],
        "payFundingFeeFromPlpToTrader"
      > & { functionName?: "payFundingFeeFromPlpToTrader" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payFundingFeeFromPlpToTrader"> & {
        abi?: never
        functionName?: "payFundingFeeFromPlpToTrader"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payFundingFeeFromPlpToTrader">({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromPlpToTrader",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromTraderToFundingFeeReserve"`.
 */
export function useVaultStoragePayFundingFeeFromTraderToFundingFeeReserve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve">["abi"],
        "payFundingFeeFromTraderToFundingFeeReserve"
      > & { functionName?: "payFundingFeeFromTraderToFundingFeeReserve" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve"> & {
        abi?: never
        functionName?: "payFundingFeeFromTraderToFundingFeeReserve"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve">({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromTraderToFundingFeeReserve",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromTraderToPlp"`.
 */
export function useVaultStoragePayFundingFeeFromTraderToPlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payFundingFeeFromTraderToPlp">["abi"],
        "payFundingFeeFromTraderToPlp"
      > & { functionName?: "payFundingFeeFromTraderToPlp" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payFundingFeeFromTraderToPlp"> & {
        abi?: never
        functionName?: "payFundingFeeFromTraderToPlp"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payFundingFeeFromTraderToPlp">({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromTraderToPlp",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payPlp"`.
 */
export function useVaultStoragePayPlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof vaultStorageABI, "payPlp">["abi"], "payPlp"> & {
        functionName?: "payPlp"
      }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payPlp"> & {
        abi?: never
        functionName?: "payPlp"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payPlp">({
    abi: vaultStorageABI,
    functionName: "payPlp",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payTraderProfit"`.
 */
export function useVaultStoragePayTraderProfit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payTraderProfit">["abi"],
        "payTraderProfit"
      > & { functionName?: "payTraderProfit" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payTraderProfit"> & {
        abi?: never
        functionName?: "payTraderProfit"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payTraderProfit">({
    abi: vaultStorageABI,
    functionName: "payTraderProfit",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payTradingFee"`.
 */
export function useVaultStoragePayTradingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "payTradingFee">["abi"],
        "payTradingFee"
      > & { functionName?: "payTradingFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "payTradingFee"> & {
        abi?: never
        functionName?: "payTradingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "payTradingFee">({
    abi: vaultStorageABI,
    functionName: "payTradingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pullToken"`.
 */
export function useVaultStoragePullToken<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "pullToken">["abi"],
        "pullToken"
      > & { functionName?: "pullToken" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "pullToken"> & {
        abi?: never
        functionName?: "pullToken"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "pullToken">({
    abi: vaultStorageABI,
    functionName: "pullToken",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pushToken"`.
 */
export function useVaultStoragePushToken<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "pushToken">["abi"],
        "pushToken"
      > & { functionName?: "pushToken" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "pushToken"> & {
        abi?: never
        functionName?: "pushToken"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "pushToken">({
    abi: vaultStorageABI,
    functionName: "pushToken",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeAllTraderTokens"`.
 */
export function useVaultStorageRemoveAllTraderTokens<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "removeAllTraderTokens">["abi"],
        "removeAllTraderTokens"
      > & { functionName?: "removeAllTraderTokens" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "removeAllTraderTokens"> & {
        abi?: never
        functionName?: "removeAllTraderTokens"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "removeAllTraderTokens">({
    abi: vaultStorageABI,
    functionName: "removeAllTraderTokens",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeFundingFee"`.
 */
export function useVaultStorageRemoveFundingFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "removeFundingFee">["abi"],
        "removeFundingFee"
      > & { functionName?: "removeFundingFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "removeFundingFee"> & {
        abi?: never
        functionName?: "removeFundingFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "removeFundingFee">({
    abi: vaultStorageABI,
    functionName: "removeFundingFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removePLPLiquidity"`.
 */
export function useVaultStorageRemovePlpLiquidity<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "removePLPLiquidity">["abi"],
        "removePLPLiquidity"
      > & { functionName?: "removePLPLiquidity" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "removePLPLiquidity"> & {
        abi?: never
        functionName?: "removePLPLiquidity"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "removePLPLiquidity">({
    abi: vaultStorageABI,
    functionName: "removePLPLiquidity",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removePlpLiquidityDebtUSDE30"`.
 */
export function useVaultStorageRemovePlpLiquidityDebtUsde30<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "removePlpLiquidityDebtUSDE30">["abi"],
        "removePlpLiquidityDebtUSDE30"
      > & { functionName?: "removePlpLiquidityDebtUSDE30" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "removePlpLiquidityDebtUSDE30"> & {
        abi?: never
        functionName?: "removePlpLiquidityDebtUSDE30"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "removePlpLiquidityDebtUSDE30">({
    abi: vaultStorageABI,
    functionName: "removePlpLiquidityDebtUSDE30",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"repayFundingFeeDebtFromTraderToPlp"`.
 */
export function useVaultStorageRepayFundingFeeDebtFromTraderToPlp<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToPlp">["abi"],
        "repayFundingFeeDebtFromTraderToPlp"
      > & { functionName?: "repayFundingFeeDebtFromTraderToPlp" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToPlp"> & {
        abi?: never
        functionName?: "repayFundingFeeDebtFromTraderToPlp"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToPlp">({
    abi: vaultStorageABI,
    functionName: "repayFundingFeeDebtFromTraderToPlp",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function useVaultStorageSetServiceExecutors<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "setServiceExecutors">["abi"],
        "setServiceExecutors"
      > & { functionName?: "setServiceExecutors" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "setServiceExecutors"> & {
        abi?: never
        functionName?: "setServiceExecutors"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "setServiceExecutors">({
    abi: vaultStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"transfer"`.
 */
export function useVaultStorageTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "transfer"> & {
        abi?: never
        functionName?: "transfer"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "transfer">({
    abi: vaultStorageABI,
    functionName: "transfer",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useVaultStorageTransferOwnership<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "transferOwnership">["abi"],
        "transferOwnership"
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "transferOwnership"> & {
        abi?: never
        functionName?: "transferOwnership"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "transferOwnership">({
    abi: vaultStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"withdrawFee"`.
 */
export function useVaultStorageWithdrawFee<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vaultStorageABI, "withdrawFee">["abi"],
        "withdrawFee"
      > & { functionName?: "withdrawFee" }
    : UseContractWriteConfig<TMode, typeof vaultStorageABI, "withdrawFee"> & {
        abi?: never
        functionName?: "withdrawFee"
      } = {} as any,
) {
  return useContractWrite<TMode, typeof vaultStorageABI, "withdrawFee">({
    abi: vaultStorageABI,
    functionName: "withdrawFee",
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function usePrepareVaultStorageWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, TFunctionName>, "abi"> = {} as any,
) {
  return usePrepareContractWrite({ abi: vaultStorageABI, ...config } as UsePrepareContractWriteConfig<
    typeof vaultStorageABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareVaultStorageAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "acceptOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFee"`.
 */
export function usePrepareVaultStorageAddFee(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFee">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addFundingFee"`.
 */
export function usePrepareVaultStorageAddFundingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFundingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addFundingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addFundingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addPLPLiquidity"`.
 */
export function usePrepareVaultStorageAddPlpLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addPLPLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addPLPLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addPLPLiquidity">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"addPlpLiquidityDebtUSDE30"`.
 */
export function usePrepareVaultStorageAddPlpLiquidityDebtUsde30(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "addPlpLiquidityDebtUSDE30">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "addPlpLiquidityDebtUSDE30",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "addPlpLiquidityDebtUSDE30">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"borrowFundingFeeFromPlpToTrader"`.
 */
export function usePrepareVaultStorageBorrowFundingFeeFromPlpToTrader(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "borrowFundingFeeFromPlpToTrader">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "borrowFundingFeeFromPlpToTrader",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "borrowFundingFeeFromPlpToTrader">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"decreaseTraderBalance"`.
 */
export function usePrepareVaultStorageDecreaseTraderBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "decreaseTraderBalance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "decreaseTraderBalance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "decreaseTraderBalance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"increaseTraderBalance"`.
 */
export function usePrepareVaultStorageIncreaseTraderBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "increaseTraderBalance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "increaseTraderBalance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "increaseTraderBalance">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payBorrowingFee"`.
 */
export function usePrepareVaultStoragePayBorrowingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payBorrowingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payBorrowingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payBorrowingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromFundingFeeReserveToTrader"`.
 */
export function usePrepareVaultStoragePayFundingFeeFromFundingFeeReserveToTrader(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromFundingFeeReserveToTrader",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromFundingFeeReserveToTrader">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromPlpToTrader"`.
 */
export function usePrepareVaultStoragePayFundingFeeFromPlpToTrader(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromPlpToTrader">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromPlpToTrader",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromPlpToTrader">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromTraderToFundingFeeReserve"`.
 */
export function usePrepareVaultStoragePayFundingFeeFromTraderToFundingFeeReserve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromTraderToFundingFeeReserve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromTraderToFundingFeeReserve">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payFundingFeeFromTraderToPlp"`.
 */
export function usePrepareVaultStoragePayFundingFeeFromTraderToPlp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromTraderToPlp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payFundingFeeFromTraderToPlp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payFundingFeeFromTraderToPlp">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payPlp"`.
 */
export function usePrepareVaultStoragePayPlp(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "payPlp">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payPlp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payPlp">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payTraderProfit"`.
 */
export function usePrepareVaultStoragePayTraderProfit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payTraderProfit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payTraderProfit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payTraderProfit">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"payTradingFee"`.
 */
export function usePrepareVaultStoragePayTradingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "payTradingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "payTradingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "payTradingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pullToken"`.
 */
export function usePrepareVaultStoragePullToken(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "pullToken">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "pullToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "pullToken">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"pushToken"`.
 */
export function usePrepareVaultStoragePushToken(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "pushToken">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "pushToken",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "pushToken">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeAllTraderTokens"`.
 */
export function usePrepareVaultStorageRemoveAllTraderTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeAllTraderTokens">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "removeAllTraderTokens",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeAllTraderTokens">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removeFundingFee"`.
 */
export function usePrepareVaultStorageRemoveFundingFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeFundingFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "removeFundingFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "removeFundingFee">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removePLPLiquidity"`.
 */
export function usePrepareVaultStorageRemovePlpLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "removePLPLiquidity">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "removePLPLiquidity",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "removePLPLiquidity">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"removePlpLiquidityDebtUSDE30"`.
 */
export function usePrepareVaultStorageRemovePlpLiquidityDebtUsde30(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "removePlpLiquidityDebtUSDE30">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "removePlpLiquidityDebtUSDE30",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "removePlpLiquidityDebtUSDE30">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"repayFundingFeeDebtFromTraderToPlp"`.
 */
export function usePrepareVaultStorageRepayFundingFeeDebtFromTraderToPlp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToPlp">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "repayFundingFeeDebtFromTraderToPlp",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "repayFundingFeeDebtFromTraderToPlp">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"setServiceExecutors"`.
 */
export function usePrepareVaultStorageSetServiceExecutors(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "setServiceExecutors">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "setServiceExecutors",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "setServiceExecutors">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareVaultStorageTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof vaultStorageABI, "transfer">, "abi" | "functionName"> = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "transfer">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareVaultStorageTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "transferOwnership">)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vaultStorageABI}__ and `functionName` set to `"withdrawFee"`.
 */
export function usePrepareVaultStorageWithdrawFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vaultStorageABI, "withdrawFee">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: vaultStorageABI,
    functionName: "withdrawFee",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vaultStorageABI, "withdrawFee">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function useVaultStorageEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof vaultStorageABI, TEventName>, "abi"> = {} as any,
) {
  return useContractEvent({ abi: vaultStorageABI, ...config } as UseContractEventConfig<
    typeof vaultStorageABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__ and `eventName` set to `"LogSetTraderBalance"`.
 */
export function useVaultStorageLogSetTraderBalanceEvent(
  config: Omit<UseContractEventConfig<typeof vaultStorageABI, "LogSetTraderBalance">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: vaultStorageABI,
    eventName: "LogSetTraderBalance",
    ...config,
  } as UseContractEventConfig<typeof vaultStorageABI, "LogSetTraderBalance">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useVaultStorageOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof vaultStorageABI, "OwnershipTransferred">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: vaultStorageABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof vaultStorageABI, "OwnershipTransferred">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vaultStorageABI}__ and `eventName` set to `"SetServiceExecutor"`.
 */
export function useVaultStorageSetServiceExecutorEvent(
  config: Omit<UseContractEventConfig<typeof vaultStorageABI, "SetServiceExecutor">, "abi" | "eventName"> = {} as any,
) {
  return useContractEvent({
    abi: vaultStorageABI,
    eventName: "SetServiceExecutor",
    ...config,
  } as UseContractEventConfig<typeof vaultStorageABI, "SetServiceExecutor">)
}
