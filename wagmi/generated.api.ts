// Generated by @wagmi/cli@0.1.14 on 5/11/2023 at 3:36:17 PM
import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
} from "@wagmi/core"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BotHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const botHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IBotHandler_InsufficientLiquidity" },
  { type: "error", inputs: [], name: "IBotHandler_UnauthorizedSender" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCloseDelistedMarketPosition",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogDeleverage",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogInjectTokenToFundingFeeReserve",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogInjectTokenToPlpLiquidity",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "subAccount", internalType: "address", type: "address", indexed: false }],
    name: "LogLiquidate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldLiquidationService", internalType: "address", type: "address", indexed: false },
      { name: "newLiquidationService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetLiquidationService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: false },
      { name: "allowed", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetPositionManager",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: false },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldTradeService", internalType: "address", type: "address", indexed: false },
      { name: "newTradeService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetTradeService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogTakeMaxProfit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "closeDelistedMarketPosition",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_stableToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "convertFundingFeeReserve",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "crossMarginService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "deleverage",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "forceTakeMaxProfit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tradeService", internalType: "address", type: "address" },
      { name: "_liquidationService", internalType: "address", type: "address" },
      { name: "_crossMarginService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "injectTokenToFundingFeeReserve",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "injectTokenToPlpLiquidity",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "liquidate",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidationService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "positionManagers",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newLiquidationService", internalType: "address", type: "address" }],
    name: "setLiquidationService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_addresses", internalType: "address[]", type: "address[]" },
      { name: "_isAllowed", internalType: "bool", type: "bool" },
    ],
    name: "setPositionManagers",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newTradeService", internalType: "address", type: "address" }],
    name: "setTradeService",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradeService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_stableToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "withdrawFundingFeeSurplus",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ConfigStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const configStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IConfigStorage_BadArgs" },
  { type: "error", inputs: [], name: "IConfigStorage_BadLen" },
  { type: "error", inputs: [], name: "IConfigStorage_ExceedLimitSetting" },
  { type: "error", inputs: [], name: "IConfigStorage_InvalidAddress" },
  { type: "error", inputs: [], name: "IConfigStorage_NotAcceptedCollateral" },
  { type: "error", inputs: [], name: "IConfigStorage_NotAcceptedLiquidity" },
  { type: "error", inputs: [], name: "IConfigStorage_NotWhiteListed" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogAddAssetClassConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: "LogAddMarketConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_token", internalType: "address", type: "address", indexed: false },
      {
        name: "_config",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogAddOrUpdatePLPTokenConfigs",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false }],
    name: "LogDelistMarket",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "token", internalType: "address", type: "address", indexed: false }],
    name: "LogRemoveUnderlying",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "index", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogSetAssetClassConfigByIndex",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetAssetConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldCalculator", internalType: "address", type: "address", indexed: true },
      { name: "newCalculator", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetCalculator",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetCollateralTokenConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "enabled", internalType: "bool", type: "bool", indexed: false }],
    name: "LogSetDynamicEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
        indexed: false,
      },
    ],
    name: "LogSetLiquidationConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldLiquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
        indexed: true,
      },
      {
        name: "newLiquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetLiquidityConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "bool", type: "bool", indexed: false },
      { name: "newValue", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetLiquidityEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
        indexed: false,
      },
    ],
    name: "LogSetMarketConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinimumPositionSize",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldOracle", internalType: "address", type: "address", indexed: true },
      { name: "newOracle", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetOracle",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPlp", internalType: "address", type: "address", indexed: true },
      { name: "newPlp", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPLP",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: false },
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetPlpTokenConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPnlFactorBPS", internalType: "uint32", type: "uint32", indexed: false },
      { name: "newPnlFactorBPS", internalType: "uint32", type: "uint32", indexed: false },
    ],
    name: "LogSetPnlFactor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "contractAddress", internalType: "address", type: "address", indexed: true },
      { name: "executorAddress", internalType: "address", type: "address", indexed: false },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetServiceExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetSwapConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldToken", internalType: "address", type: "address", indexed: true },
      { name: "newToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetToken",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
        indexed: true,
      },
      {
        name: "newConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
        indexed: false,
      },
    ],
    name: "LogSetTradingConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ITERABLE_ADDRESS_LIST_END",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ITERABLE_ADDRESS_LIST_START",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "addAssetClassConfig",
    outputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    name: "addMarketConfig",
    outputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tokens", internalType: "address[]", type: "address[]" },
      {
        name: "_configs",
        internalType: "struct IConfigStorage.PLPTokenConfig[]",
        type: "tuple[]",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "addOrUpdateAcceptedToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "allowedLiquidators",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "assetClassConfigs",
    outputs: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetCollateralTokenConfigs",
    outputs: [
      { name: "settleStrategy", internalType: "address", type: "address" },
      { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
      { name: "accepted", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetConfigs",
    outputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "assetId", internalType: "bytes32", type: "bytes32" },
      { name: "decimals", internalType: "uint8", type: "uint8" },
      { name: "isStableCoin", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetPlpTokenConfigs",
    outputs: [
      { name: "targetWeight", internalType: "uint256", type: "uint256" },
      { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
      { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
      { name: "accepted", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "calculator",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "collateralAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_marketIndex", internalType: "uint256", type: "uint256" }],
    name: "delistMarket",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
    name: "getAssetClassConfigByIndex",
    outputs: [
      {
        name: "_assetClassConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getAssetClassConfigsLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetId", internalType: "bytes32", type: "bytes32" }],
    name: "getAssetConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetConfigByToken",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetId", internalType: "bytes32", type: "bytes32" }],
    name: "getAssetPlpTokenConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetPlpTokenConfigByToken",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getAssetTokenDecimal",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "getCollateralTokenConfigs",
    outputs: [
      {
        name: "_collateralTokenConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCollateralTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidationConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_index", internalType: "uint256", type: "uint256" }],
    name: "getMarketConfigByIndex",
    outputs: [
      {
        name: "_marketConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getMarketConfigs",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.MarketConfig[]",
        type: "tuple[]",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getMarketConfigsLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPlpAssetIds",
    outputs: [{ name: "", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getPlpTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getTradeServiceHooks",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getTradingConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidationConfig",
    outputs: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidityConfig",
    outputs: [
      { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
      { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
      { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
      { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
      { name: "enabled", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "marketConfigs",
    outputs: [
      { name: "assetId", internalType: "bytes32", type: "bytes32" },
      { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
      { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
      { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
      { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
      { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
      { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
      { name: "assetClass", internalType: "uint8", type: "uint8" },
      { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
      { name: "active", internalType: "bool", type: "bool" },
      {
        name: "fundingRate",
        internalType: "struct IConfigStorage.FundingRate",
        type: "tuple",
        components: [
          { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
          { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minimumPositionSize",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "oracle",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "plp",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "plpAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pnlFactorBPS",
    outputs: [{ name: "", internalType: "uint32", type: "uint32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "removeAcceptedToken",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_index", internalType: "uint256", type: "uint256" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetClassConfig",
        type: "tuple",
        components: [{ name: "baseBorrowingRate", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "setAssetClassConfigByIndex",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setAssetConfig",
    outputs: [
      {
        name: "_assetConfig",
        internalType: "struct IConfigStorage.AssetConfig",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "decimals", internalType: "uint8", type: "uint8" },
          { name: "isStableCoin", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_calculator", internalType: "address", type: "address" }],
    name: "setCalculator",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setCollateralTokenConfig",
    outputs: [
      {
        name: "_collateralTokenConfig",
        internalType: "struct IConfigStorage.CollateralTokenConfig",
        type: "tuple",
        components: [
          { name: "settleStrategy", internalType: "address", type: "address" },
          { name: "collateralFactorBPS", internalType: "uint32", type: "uint32" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_enabled", internalType: "bool", type: "bool" }],
    name: "setDynamicEnabled",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.LiquidationConfig",
        type: "tuple",
        components: [{ name: "liquidationFeeUSDE30", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "setLiquidationConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_liquidityConfig",
        internalType: "struct IConfigStorage.LiquidityConfig",
        type: "tuple",
        components: [
          { name: "plpTotalTokenWeight", internalType: "uint256", type: "uint256" },
          { name: "plpSafetyBufferBPS", internalType: "uint32", type: "uint32" },
          { name: "taxFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "flashLoanFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPLPUtilizationBPS", internalType: "uint32", type: "uint32" },
          { name: "depositFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "withdrawFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "dynamicFeeEnabled", internalType: "bool", type: "bool" },
          { name: "enabled", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setLiquidityConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_enabled", internalType: "bool", type: "bool" }],
    name: "setLiquidityEnabled",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
    name: "setMarketConfig",
    outputs: [
      {
        name: "_marketConfig",
        internalType: "struct IConfigStorage.MarketConfig",
        type: "tuple",
        components: [
          { name: "assetId", internalType: "bytes32", type: "bytes32" },
          { name: "maxLongPositionSize", internalType: "uint256", type: "uint256" },
          { name: "maxShortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "increasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "decreasePositionFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "initialMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maintenanceMarginFractionBPS", internalType: "uint32", type: "uint32" },
          { name: "maxProfitRateBPS", internalType: "uint32", type: "uint32" },
          { name: "minLeverageBPS", internalType: "uint32", type: "uint32" },
          { name: "assetClass", internalType: "uint8", type: "uint8" },
          { name: "allowIncreasePosition", internalType: "bool", type: "bool" },
          { name: "active", internalType: "bool", type: "bool" },
          {
            name: "fundingRate",
            internalType: "struct IConfigStorage.FundingRate",
            type: "tuple",
            components: [
              { name: "maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
              { name: "maxFundingRate", internalType: "uint256", type: "uint256" },
            ],
          },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_minimumPositionSize", internalType: "uint256", type: "uint256" }],
    name: "setMinimumPositionSize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_oracle", internalType: "address", type: "address" }],
    name: "setOracle",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_plp", internalType: "address", type: "address" }],
    name: "setPLP",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_plpAssetIds", internalType: "bytes32[]", type: "bytes32[]" }],
    name: "setPlpAssetId",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "setPlpTokenConfig",
    outputs: [
      {
        name: "_plpTokenConfig",
        internalType: "struct IConfigStorage.PLPTokenConfig",
        type: "tuple",
        components: [
          { name: "targetWeight", internalType: "uint256", type: "uint256" },
          { name: "bufferLiquidity", internalType: "uint256", type: "uint256" },
          { name: "maxWeightDiff", internalType: "uint256", type: "uint256" },
          { name: "accepted", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pnlFactorBPS", internalType: "uint32", type: "uint32" }],
    name: "setPnlFactor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_sglp", internalType: "address", type: "address" }],
    name: "setSGlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_contractAddress", internalType: "address", type: "address" },
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.SwapConfig",
        type: "tuple",
        components: [
          { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
        ],
      },
    ],
    name: "setSwapConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newHooks", internalType: "address[]", type: "address[]" }],
    name: "setTradeServiceHooks",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newConfig",
        internalType: "struct IConfigStorage.TradingConfig",
        type: "tuple",
        components: [
          { name: "fundingInterval", internalType: "uint256", type: "uint256" },
          { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
          { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
          { name: "maxPosition", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "setTradingConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_weth", internalType: "address", type: "address" }],
    name: "setWeth",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "sglp",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "swapConfig",
    outputs: [
      { name: "stablecoinSwapFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "swapFeeRateBPS", internalType: "uint32", type: "uint32" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "tokenAssetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "tradeServiceHooks",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradingConfig",
    outputs: [
      { name: "fundingInterval", internalType: "uint256", type: "uint256" },
      { name: "minProfitDuration", internalType: "uint256", type: "uint256" },
      { name: "devFeeRateBPS", internalType: "uint32", type: "uint32" },
      { name: "maxPosition", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "treasury",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "validateAcceptedCollateral",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "validateAcceptedLiquidityToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_contractAddress", internalType: "address", type: "address" },
      { name: "_executorAddress", internalType: "address", type: "address" },
    ],
    name: "validateServiceExecutor",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CrossMarginHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const crossMarginHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InCorrectValueTransfer" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_MismatchMsgValue" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NoOrder" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotOrderOwner" },
  { type: "error", inputs: [], name: "ICrossMarginHandler_NotWhitelisted" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shouldUnwrap", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCancelWithdrawOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shouldUnwrap", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCreateWithdrawOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "primaryAccount", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogDepositCollateral",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shouldUnwrap", internalType: "bool", type: "bool", indexed: false },
      { name: "isSuccess", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogExecuteWithdrawOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldCrossMarginService", internalType: "address", type: "address", indexed: true },
      { name: "newCrossMarginService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetCrossMarginService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: true },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "primaryAccount", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogWithdrawCollateral",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_orderIndex", internalType: "uint256", type: "uint256" }],
    name: "cancelWithdrawOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_tokenOut", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
    ],
    name: "convertSGlpCollateral",
    outputs: [{ name: "_amountOut", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_shouldUnwrap", internalType: "bool", type: "bool" },
    ],
    name: "createWithdrawCollateralOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "crossMarginService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
    ],
    name: "depositCollateral",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_endIndex", internalType: "uint256", type: "uint256" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_order",
        internalType: "struct ICrossMarginHandler.WithdrawOrder",
        type: "tuple",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "uint8", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "executeWithdrawOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActiveWithdrawOrders",
    outputs: [
      {
        name: "_withdrawOrder",
        internalType: "struct ICrossMarginHandler.WithdrawOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "uint8", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getExecutedWithdrawOrders",
    outputs: [
      {
        name: "_withdrawOrder",
        internalType: "struct ICrossMarginHandler.WithdrawOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "uint8", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getWithdrawOrderLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getWithdrawOrders",
    outputs: [
      {
        name: "_withdrawOrders",
        internalType: "struct ICrossMarginHandler.WithdrawOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "token", internalType: "address", type: "address" },
          { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "status", internalType: "uint8", type: "uint8" },
          { name: "shouldUnwrap", internalType: "bool", type: "bool" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_crossMarginService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionOrderFee", internalType: "uint256", type: "uint256" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionOrderFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextExecutionOrderIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_crossMarginService", internalType: "address", type: "address" }],
    name: "setCrossMarginService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "subAccountExecutedWithdrawOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "token", internalType: "address", type: "address" },
      { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "status", internalType: "uint8", type: "uint8" },
      { name: "shouldUnwrap", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "withdrawOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "token", internalType: "address", type: "address" },
      { name: "crossMarginService", internalType: "contract CrossMarginService", type: "address" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "status", internalType: "uint8", type: "uint8" },
      { name: "shouldUnwrap", internalType: "bool", type: "bool" },
    ],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EcoPyth
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ecoPythABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "EcoPyth_AssetIdHasAlreadyBeenDefined" },
  { type: "error", inputs: [], name: "EcoPyth_ExpectZeroFee" },
  { type: "error", inputs: [], name: "EcoPyth_OnlyUpdater" },
  { type: "error", inputs: [], name: "EcoPyth_PriceFeedNotFound" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_account", internalType: "address", type: "address", indexed: true },
      { name: "_isActive", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetUpdater",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "_encodedVaas", internalType: "bytes32", type: "bytes32", indexed: false }],
    name: "LogVaas",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "MAX_PRICE_PER_WORD",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "assetIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "_prices", internalType: "int24[]", type: "int24[]" }],
    name: "buildPriceUpdateData",
    outputs: [{ name: "_updateData", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "_publishTimeDiff", internalType: "uint24[]", type: "uint24[]" }],
    name: "buildPublishTimeUpdateData",
    outputs: [{ name: "_updateData", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getAssetIds",
    outputs: [{ name: "", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "id", internalType: "bytes32", type: "bytes32" }],
    name: "getPriceUnsafe",
    outputs: [
      {
        name: "price",
        internalType: "struct PythStructs.Price",
        type: "tuple",
        components: [
          { name: "price", internalType: "int64", type: "int64" },
          { name: "conf", internalType: "uint64", type: "uint64" },
          { name: "expo", internalType: "int32", type: "int32" },
          { name: "publishTime", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [{ name: "", internalType: "bytes[]", type: "bytes[]" }],
    name: "getUpdateFee",
    outputs: [{ name: "feeAmount", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "indexCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_assetId", internalType: "bytes32", type: "bytes32" }],
    name: "insertAssetId",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" }],
    name: "insertAssetIds",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "isUpdaters",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "mapAssetIdToIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minPublishTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "prices",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "publishTimeDiff",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_isActive", internalType: "bool", type: "bool" },
    ],
    name: "setUpdater",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_prices", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeDiff", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "updatePriceFeeds",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGmxGlpManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGmxGlpManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_fundingAccount", internalType: "address", type: "address" },
      { name: "_account", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_minUsdg", internalType: "uint256", type: "uint256" },
      { name: "_minGlp", internalType: "uint256", type: "uint256" },
    ],
    name: "addLiquidityForAccount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "useMaxPrice", internalType: "bool", type: "bool" }],
    name: "getAum",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "useMaxPrice", internalType: "bool", type: "bool" }],
    name: "getAumInUsdg",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getAums",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LimitTradeHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const limitTradeHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "ILimitTradeHandler_BadSizeDelta" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_BadSubAccountId" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_IncorrectValueTransfer" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidPriceForExecution" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_InvalidSender" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_LimitOrderConvertToMarketOrder" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MarketIsClosed" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MarketOrderNoUpdate" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_MaxExecutionFee" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NonExistentOrder" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_NotWhitelisted" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_TriggerPriceAboveCurrentPrice" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_TriggerPriceBelowCurrentPrice" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_UnknownOrderType" },
  { type: "error", inputs: [], name: "ILimitTradeHandler_WrongSizeDelta" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCancelLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "acceptablePrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogCreateLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogExecuteLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
      { name: "errMsg", internalType: "string", type: "string", indexed: false },
    ],
    name: "LogExecuteMarketOrderFail",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "bool", type: "bool", indexed: false },
      { name: "newValue", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetIsAllowAllExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionTimestamp",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetTradeService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "subAccountId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "orderIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sizeDelta", internalType: "int256", type: "int256", indexed: false },
      { name: "triggerPrice", internalType: "uint256", type: "uint256", indexed: false },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool", indexed: false },
      { name: "reduceOnly", internalType: "bool", type: "bool", indexed: false },
      { name: "tpToken", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogUpdateLimitOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "activeLimitOrdersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "activeMarketOrdersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "activeOrdersCount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
    ],
    name: "cancelOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "createOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "vars",
        internalType: "struct LimitTradeHandler.ExecuteOrderVars",
        type: "tuple",
        components: [
          {
            name: "order",
            internalType: "struct ILimitTradeHandler.LimitOrder",
            type: "tuple",
            components: [
              { name: "account", internalType: "address", type: "address" },
              { name: "tpToken", internalType: "address", type: "address" },
              { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
              { name: "reduceOnly", internalType: "bool", type: "bool" },
              { name: "sizeDelta", internalType: "int256", type: "int256" },
              { name: "subAccountId", internalType: "uint8", type: "uint8" },
              { name: "marketIndex", internalType: "uint256", type: "uint256" },
              { name: "triggerPrice", internalType: "uint256", type: "uint256" },
              { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
              { name: "executionFee", internalType: "uint256", type: "uint256" },
              { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
            ],
          },
          { name: "subAccount", internalType: "address", type: "address" },
          { name: "positionId", internalType: "bytes32", type: "bytes32" },
          { name: "encodedVaas", internalType: "bytes32", type: "bytes32" },
          { name: "priceData", internalType: "bytes32[]", type: "bytes32[]" },
          { name: "publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
          { name: "feeReceiver", internalType: "address payable", type: "address" },
          { name: "orderIndex", internalType: "uint256", type: "uint256" },
          { name: "minPublishTime", internalType: "uint256", type: "uint256" },
          { name: "positionIsLong", internalType: "bool", type: "bool" },
          { name: "isNewPosition", internalType: "bool", type: "bool" },
          { name: "isMarketOrder", internalType: "bool", type: "bool" },
        ],
      },
    ],
    name: "executeLimitOrder",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getAllActiveOrders",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getLimitActiveOrders",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getMarketActiveOrders",
    outputs: [
      {
        name: "_orders",
        internalType: "struct ILimitTradeHandler.LimitOrder[]",
        type: "tuple[]",
        components: [
          { name: "account", internalType: "address", type: "address" },
          { name: "tpToken", internalType: "address", type: "address" },
          { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
          { name: "reduceOnly", internalType: "bool", type: "bool" },
          { name: "sizeDelta", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "triggerPrice", internalType: "uint256", type: "uint256" },
          { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_weth", internalType: "address", type: "address" },
      { name: "_tradeService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionFee", internalType: "uint256", type: "uint256" },
      { name: "_minExecutionTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isAllowAllExecutor",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "limitOrders",
    outputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "tpToken", internalType: "address", type: "address" },
      { name: "triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "reduceOnly", internalType: "bool", type: "bool" },
      { name: "sizeDelta", internalType: "int256", type: "int256" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
      { name: "marketIndex", internalType: "uint256", type: "uint256" },
      { name: "triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "acceptablePrice", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "createdTimestamp", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "limitOrdersIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionTimestamp",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "contract IEcoPyth", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_isAllow", internalType: "bool", type: "bool" }],
    name: "setIsAllowAllExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionTimestamp", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionTimestamp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_tradeService", internalType: "address", type: "address" }],
    name: "setTradeService",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradeService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_orderIndex", internalType: "uint256", type: "uint256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_triggerPrice", internalType: "uint256", type: "uint256" },
      { name: "_triggerAboveThreshold", internalType: "bool", type: "bool" },
      { name: "_reduceOnly", internalType: "bool", type: "bool" },
      { name: "_tpToken", internalType: "address", type: "address" },
    ],
    name: "updateOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LiquidityHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const liquidityHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "ILiquidityHandler_InCorrectValueTransfer" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InsufficientExecutionFee" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InsufficientRefund" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "ILiquidityHandler_InvalidSender" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NoOrder" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotExecutionState" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotOrderOwner" },
  { type: "error", inputs: [], name: "ILiquidityHandler_NotWhitelisted" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isAdd", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogCancelLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "tokenIn", internalType: "address", type: "address", indexed: true },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48", indexed: false },
    ],
    name: "LogCreateAddLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "tokenOut", internalType: "address", type: "address", indexed: true },
      { name: "amountIn", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "executionFee", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isNativeOut", internalType: "bool", type: "bool", indexed: false },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48", indexed: false },
    ],
    name: "LogCreateRemoveLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "minOut", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isAdd", internalType: "bool", type: "bool", indexed: false },
      { name: "actualOut", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogExecuteLiquidityOrder",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: true },
      { name: "orderId", internalType: "uint256", type: "uint256", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
      { name: "isNativeOut", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogRefund",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "address", type: "address", indexed: false },
      { name: "newValue", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetLiquidityService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldValue", internalType: "uint256", type: "uint256", indexed: false },
      { name: "newValue", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetMinExecutionFee",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executor", internalType: "address", type: "address", indexed: false },
      { name: "isAllow", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetOrderExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: false },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "accountExecutedLiquidityOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "minOut", internalType: "uint256", type: "uint256" },
      { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "token", internalType: "address", type: "address" },
      { name: "isAdd", internalType: "bool", type: "bool" },
      { name: "isNativeOut", internalType: "bool", type: "bool" },
      { name: "status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_orderIndex", internalType: "uint256", type: "uint256" }],
    name: "cancelLiquidityOrder",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenIn", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_shouldWrap", internalType: "bool", type: "bool" },
    ],
    name: "createAddLiquidityOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_tokenOut", internalType: "address", type: "address" },
      { name: "_amountIn", internalType: "uint256", type: "uint256" },
      { name: "_minOut", internalType: "uint256", type: "uint256" },
      { name: "_executionFee", internalType: "uint256", type: "uint256" },
      { name: "_isNativeOut", internalType: "bool", type: "bool" },
    ],
    name: "createRemoveLiquidityOrder",
    outputs: [{ name: "_orderId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_order",
        internalType: "struct ILiquidityHandler.LiquidityOrder",
        type: "tuple",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "executeLiquidity",
    outputs: [{ name: "_amountOut", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_endIndex", internalType: "uint256", type: "uint256" },
      { name: "_feeReceiver", internalType: "address payable", type: "address" },
      { name: "_priceData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_publishTimeData", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_minPublishTime", internalType: "uint256", type: "uint256" },
      { name: "_encodedVaas", internalType: "bytes32", type: "bytes32" },
    ],
    name: "executeOrder",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActiveLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrders",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getExecutedLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrders",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityOrderLength",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLiquidityOrders",
    outputs: [
      {
        name: "_liquidityOrders",
        internalType: "struct ILiquidityHandler.LiquidityOrder[]",
        type: "tuple[]",
        components: [
          { name: "orderId", internalType: "uint256", type: "uint256" },
          { name: "amount", internalType: "uint256", type: "uint256" },
          { name: "minOut", internalType: "uint256", type: "uint256" },
          { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
          { name: "executionFee", internalType: "uint256", type: "uint256" },
          { name: "account", internalType: "address payable", type: "address" },
          { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
          { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
          { name: "token", internalType: "address", type: "address" },
          { name: "isAdd", internalType: "bool", type: "bool" },
          { name: "isNativeOut", internalType: "bool", type: "bool" },
          { name: "status", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_liquidityService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
      { name: "_minExecutionOrderFee", internalType: "uint256", type: "uint256" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "liquidityOrders",
    outputs: [
      { name: "orderId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "minOut", internalType: "uint256", type: "uint256" },
      { name: "actualAmountOut", internalType: "uint256", type: "uint256" },
      { name: "executionFee", internalType: "uint256", type: "uint256" },
      { name: "account", internalType: "address payable", type: "address" },
      { name: "createdTimestamp", internalType: "uint48", type: "uint48" },
      { name: "executedTimestamp", internalType: "uint48", type: "uint48" },
      { name: "token", internalType: "address", type: "address" },
      { name: "isAdd", internalType: "bool", type: "bool" },
      { name: "isNativeOut", internalType: "bool", type: "bool" },
      { name: "status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "liquidityService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minExecutionOrderFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nextExecutionOrderIndex",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "orderExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newLiquidityService", internalType: "address", type: "address" }],
    name: "setLiquidityService",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newMinExecutionFee", internalType: "uint256", type: "uint256" }],
    name: "setMinExecutionFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executor", internalType: "address", type: "address" },
      { name: "_isAllow", internalType: "bool", type: "bool" },
    ],
    name: "setOrderExecutor",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketTradeHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketTradeHandlerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IMarketTradeHandler_InvalidAddress" },
  { type: "error", inputs: [], name: "IMarketTradeHandler_PositionNotFullyClosed" },
  { type: "error", inputs: [], name: "IMarketTradeHandler_ZeroSizeInput" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: false },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "buySizeE30", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shortDecreasingSizeE30", internalType: "uint256", type: "uint256", indexed: false },
      { name: "longIncreasingSizeE30", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogBuy",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "account", internalType: "address", type: "address", indexed: false },
      { name: "subAccountId", internalType: "uint8", type: "uint8", indexed: false },
      { name: "marketIndex", internalType: "uint256", type: "uint256", indexed: false },
      { name: "sellSizeE30", internalType: "uint256", type: "uint256", indexed: false },
      { name: "longDecreasingSizeE30", internalType: "uint256", type: "uint256", indexed: false },
      { name: "shortIncreasingSizeE30", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSell",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPyth", internalType: "address", type: "address", indexed: false },
      { name: "newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldMarketTradeService", internalType: "address", type: "address", indexed: false },
      { name: "newMarketTradeService", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetTradeService",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_buySizeE30", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "buy",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_tradeService", internalType: "address", type: "address" },
      { name: "_pyth", internalType: "address", type: "address" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_subAccountId", internalType: "uint8", type: "uint8" },
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_sellSizeE30", internalType: "uint256", type: "uint256" },
      { name: "_tpToken", internalType: "address", type: "address" },
      { name: "_priceData", internalType: "bytes[]", type: "bytes[]" },
    ],
    name: "sell",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newTradeService", internalType: "address", type: "address" }],
    name: "setTradeService",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "tradeService",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OracleMiddleware
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const oracleMiddlewareABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IOracleMiddleware_InvalidMarketStatus" },
  { type: "error", inputs: [], name: "IOracleMiddleware_MarketStatusUndefined" },
  { type: "error", inputs: [], name: "IOracleMiddleware_OnlyUpdater" },
  { type: "error", inputs: [], name: "IOracleMiddleware_PriceStale" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "oldPythAdapter", internalType: "address", type: "address", indexed: false },
      { name: "newPythAdapter", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetAdapter",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "_oldConfidenceThresholdE6", internalType: "uint32", type: "uint32", indexed: false },
      { name: "_newConfidenceThresholdE6", internalType: "uint32", type: "uint32", indexed: false },
      { name: "_oldTrustPriceAge", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_newTrustPriceAge", internalType: "uint256", type: "uint256", indexed: false },
      { name: "_oldAdapter", internalType: "address", type: "address", indexed: false },
      { name: "_newAdapter", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetAssetPriceConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "_status", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "LogSetMarketStatus",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_account", internalType: "address", type: "address", indexed: true },
      { name: "_isActive", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetUpdater",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "assetPriceConfigs",
    outputs: [
      { name: "trustPriceAge", internalType: "uint32", type: "uint32" },
      { name: "confidenceThresholdE6", internalType: "uint32", type: "uint32" },
      { name: "adapter", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "getLatestAdaptivePrice",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "getLatestAdaptivePriceWithMarketStatus",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "getLatestPrice",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "getLatestPriceWithMarketStatus",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "isUpdater",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "marketStatus",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_confidenceThresholdE6", internalType: "uint32", type: "uint32" },
      { name: "_trustPriceAge", internalType: "uint32", type: "uint32" },
      { name: "_adapter", internalType: "address", type: "address" },
    ],
    name: "setAssetPriceConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
    name: "setMarketStatus",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetIds", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "_statuses", internalType: "uint8[]", type: "uint8[]" },
    ],
    name: "setMultipleMarketStatus",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_account", internalType: "address", type: "address" },
      { name: "_isActive", internalType: "bool", type: "bool" },
    ],
    name: "setUpdater",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "unsafeGetLatestAdaptivePrice",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_marketSkew", internalType: "int256", type: "int256" },
      { name: "_sizeDelta", internalType: "int256", type: "int256" },
      { name: "_maxSkewScaleUSD", internalType: "uint256", type: "uint256" },
      { name: "_limitPriceE30", internalType: "uint256", type: "uint256" },
    ],
    name: "unsafeGetLatestAdaptivePriceWithMarketStatus",
    outputs: [
      { name: "_adaptivePrice", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "unsafeGetLatestPrice",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
    ],
    name: "unsafeGetLatestPriceWithMarketStatus",
    outputs: [
      { name: "_price", internalType: "uint256", type: "uint256" },
      { name: "_lastUpdate", internalType: "uint256", type: "uint256" },
      { name: "_status", internalType: "uint8", type: "uint8" },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PerpStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const perpStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IPerpStorage_NotWhiteListed" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetServiceExecutor",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "assetClasses",
    outputs: [
      { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
      { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
      { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
      { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
      { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_isLong", internalType: "bool", type: "bool" },
      { name: "_size", internalType: "uint256", type: "uint256" },
    ],
    name: "decreasePositionSize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      { name: "_reserve", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseReserved",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_borrowingFee", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseSubAccountBorrowingFee",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActivePositionIds",
    outputs: [{ name: "_ids", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActivePositions",
    outputs: [
      {
        name: "_positions",
        internalType: "struct IPerpStorage.Position[]",
        type: "tuple[]",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "entryFundingRate", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_limit", internalType: "uint256", type: "uint256" },
      { name: "_offset", internalType: "uint256", type: "uint256" },
    ],
    name: "getActiveSubAccounts",
    outputs: [{ name: "_subAccounts", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_assetClassIndex", internalType: "uint256", type: "uint256" }],
    name: "getAssetClassByIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.AssetClass",
        type: "tuple",
        components: [
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
          { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getGlobalState",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.GlobalState",
        type: "tuple",
        components: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_marketIndex", internalType: "uint256", type: "uint256" }],
    name: "getMarketByIndex",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.Market",
        type: "tuple",
        components: [
          { name: "longPositionSize", internalType: "uint256", type: "uint256" },
          { name: "longAccumSE", internalType: "uint256", type: "uint256" },
          { name: "longAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "shortAccumSE", internalType: "uint256", type: "uint256" },
          { name: "shortAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "currentFundingRate", internalType: "int256", type: "int256" },
          { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
          { name: "accumFundingLong", internalType: "int256", type: "int256" },
          { name: "accumFundingShort", internalType: "int256", type: "int256" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getNumberOfSubAccountPosition",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_positionId", internalType: "bytes32", type: "bytes32" }],
    name: "getPositionById",
    outputs: [
      {
        name: "",
        internalType: "struct IPerpStorage.Position",
        type: "tuple",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "entryFundingRate", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getPositionBySubAccount",
    outputs: [
      {
        name: "_subAccountPositions",
        internalType: "struct IPerpStorage.Position[]",
        type: "tuple[]",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "entryFundingRate", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getPositionIds",
    outputs: [{ name: "_positionIds", internalType: "bytes32[]", type: "bytes32[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalState",
    outputs: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_isLong", internalType: "bool", type: "bool" },
      { name: "_size", internalType: "uint256", type: "uint256" },
    ],
    name: "increasePositionSize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      { name: "_reserve", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseReserved",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_borrowingFee", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseSubAccountBorrowingFee",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "markets",
    outputs: [
      { name: "longPositionSize", internalType: "uint256", type: "uint256" },
      { name: "longAccumSE", internalType: "uint256", type: "uint256" },
      { name: "longAccumS2E", internalType: "uint256", type: "uint256" },
      { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
      { name: "shortAccumSE", internalType: "uint256", type: "uint256" },
      { name: "shortAccumS2E", internalType: "uint256", type: "uint256" },
      { name: "currentFundingRate", internalType: "int256", type: "int256" },
      { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
      { name: "accumFundingLong", internalType: "int256", type: "int256" },
      { name: "accumFundingShort", internalType: "int256", type: "int256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "positions",
    outputs: [
      { name: "primaryAccount", internalType: "address", type: "address" },
      { name: "marketIndex", internalType: "uint256", type: "uint256" },
      { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
      { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
      { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
      { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
      { name: "positionSizeE30", internalType: "int256", type: "int256" },
      { name: "realizedPnl", internalType: "int256", type: "int256" },
      { name: "entryFundingRate", internalType: "int256", type: "int256" },
      { name: "subAccountId", internalType: "uint8", type: "uint8" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_positionId", internalType: "bytes32", type: "bytes32" },
    ],
    name: "removePositionFromSubAccount",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_positionId", internalType: "bytes32", type: "bytes32" },
      {
        name: "position",
        internalType: "struct IPerpStorage.Position",
        type: "tuple",
        components: [
          { name: "primaryAccount", internalType: "address", type: "address" },
          { name: "marketIndex", internalType: "uint256", type: "uint256" },
          { name: "avgEntryPriceE30", internalType: "uint256", type: "uint256" },
          { name: "entryBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "lastIncreaseTimestamp", internalType: "uint256", type: "uint256" },
          { name: "positionSizeE30", internalType: "int256", type: "int256" },
          { name: "realizedPnl", internalType: "int256", type: "int256" },
          { name: "entryFundingRate", internalType: "int256", type: "int256" },
          { name: "subAccountId", internalType: "uint8", type: "uint8" },
        ],
      },
    ],
    name: "savePosition",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "subAccountBorrowingFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "subAccountPositionIds",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetClassIndex", internalType: "uint8", type: "uint8" },
      {
        name: "_newAssetClass",
        internalType: "struct IPerpStorage.AssetClass",
        type: "tuple",
        components: [
          { name: "reserveValueE30", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingRate", internalType: "uint256", type: "uint256" },
          { name: "lastBorrowingTime", internalType: "uint256", type: "uint256" },
          { name: "sumBorrowingFeeE30", internalType: "uint256", type: "uint256" },
          { name: "sumSettledBorrowingFeeE30", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "updateAssetClass",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_newPositionSize", internalType: "uint256", type: "uint256" },
      { name: "_newAccumSE", internalType: "uint256", type: "uint256" },
      { name: "_newAccumS2E", internalType: "uint256", type: "uint256" },
    ],
    name: "updateGlobalLongMarketById",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      { name: "_newPositionSize", internalType: "uint256", type: "uint256" },
      { name: "_newAccumSE", internalType: "uint256", type: "uint256" },
      { name: "_newAccumS2E", internalType: "uint256", type: "uint256" },
    ],
    name: "updateGlobalShortMarketById",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_newGlobalState",
        internalType: "struct IPerpStorage.GlobalState",
        type: "tuple",
        components: [{ name: "reserveValueE30", internalType: "uint256", type: "uint256" }],
      },
    ],
    name: "updateGlobalState",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_marketIndex", internalType: "uint256", type: "uint256" },
      {
        name: "_market",
        internalType: "struct IPerpStorage.Market",
        type: "tuple",
        components: [
          { name: "longPositionSize", internalType: "uint256", type: "uint256" },
          { name: "longAccumSE", internalType: "uint256", type: "uint256" },
          { name: "longAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "shortPositionSize", internalType: "uint256", type: "uint256" },
          { name: "shortAccumSE", internalType: "uint256", type: "uint256" },
          { name: "shortAccumS2E", internalType: "uint256", type: "uint256" },
          { name: "currentFundingRate", internalType: "int256", type: "int256" },
          { name: "lastFundingTime", internalType: "uint256", type: "uint256" },
          { name: "accumFundingLong", internalType: "int256", type: "int256" },
          { name: "accumFundingShort", internalType: "int256", type: "int256" },
        ],
      },
    ],
    name: "updateMarket",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PythAdapter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pythAdapterABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "PythAdapter_BrokenPythPrice" },
  { type: "error", inputs: [], name: "PythAdapter_ConfidenceRatioTooHigh" },
  { type: "error", inputs: [], name: "PythAdapter_OnlyUpdater" },
  { type: "error", inputs: [], name: "PythAdapter_UnknownAssetId" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "_pythPriceId", internalType: "bytes32", type: "bytes32", indexed: false },
      { name: "_inverse", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "LogSetConfig",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "_oldPyth", internalType: "address", type: "address", indexed: false },
      { name: "_newPyth", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetPyth",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "configs",
    outputs: [
      { name: "pythPriceId", internalType: "bytes32", type: "bytes32" },
      { name: "inverse", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_isMax", internalType: "bool", type: "bool" },
      { name: "_confidenceThreshold", internalType: "uint32", type: "uint32" },
    ],
    name: "getLatestPrice",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_pyth", internalType: "address", type: "address" }],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pyth",
    outputs: [{ name: "", internalType: "contract IReadablePyth", type: "address" }],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_assetId", internalType: "bytes32", type: "bytes32" },
      { name: "_pythPriceId", internalType: "bytes32", type: "bytes32" },
      { name: "_inverse", internalType: "bool", type: "bool" },
    ],
    name: "setConfig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_newPyth", internalType: "address", type: "address" }],
    name: "setPyth",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VaultStorage
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vaultStorageABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  { type: "error", inputs: [], name: "IVaultStorage_Forbidden" },
  { type: "error", inputs: [], name: "IVaultStorage_NotWhiteListed" },
  { type: "error", inputs: [], name: "IVaultStorage_PLPBalanceRemaining" },
  { type: "error", inputs: [], name: "IVaultStorage_TargetNotContract" },
  { type: "error", inputs: [], name: "IVaultStorage_TraderBalanceRemaining" },
  { type: "error", inputs: [], name: "IVaultStorage_TraderTokenAlreadyExists" },
  { type: "error", inputs: [], name: "IVaultStorage_ZeroAddress" },
  {
    type: "event",
    anonymous: false,
    inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "token", internalType: "address", type: "address", indexed: true },
      { name: "strategy", internalType: "address", type: "address", indexed: false },
      { name: "prevTarget", internalType: "address", type: "address", indexed: false },
      { name: "newTarget", internalType: "address", type: "address", indexed: false },
    ],
    name: "LogSetStrategyAllowance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "trader", internalType: "address", type: "address", indexed: true },
      { name: "token", internalType: "address", type: "address", indexed: false },
      { name: "balance", internalType: "uint256", type: "uint256", indexed: false },
    ],
    name: "LogSetTraderBalance",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "previousOwner", internalType: "address", type: "address", indexed: true },
      { name: "newOwner", internalType: "address", type: "address", indexed: true },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "executorAddress", internalType: "address", type: "address", indexed: true },
      { name: "isServiceExecutor", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "SetServiceExecutor",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_borrowingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addBorrowingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addFundingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_fundingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addFundingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_lossDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addLossDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "addPLPLiquidity",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_value", internalType: "uint256", type: "uint256" }],
    name: "addPlpLiquidityDebtUSDE30",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_tradingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "addTradingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_fundingFeeValue", internalType: "uint256", type: "uint256" },
    ],
    name: "borrowFundingFeeFromPlpToTrader",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "borrowingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_convertToken", internalType: "address", type: "address" },
      { name: "_targetToken", internalType: "address", type: "address" },
      { name: "_convertAmount", internalType: "uint256", type: "uint256" },
      { name: "_targetAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "convertFundingFeeReserveWithPLP",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
      { name: "_callData", internalType: "bytes", type: "bytes" },
    ],
    name: "cook",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseTraderBalance",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "devFees",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "fundingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "fundingFeeReserve",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_subAccount", internalType: "address", type: "address" }],
    name: "getTraderTokens",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalBorrowingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalFundingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalLossDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "globalTradingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_subAccount", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseTraderBalance",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "initialize", outputs: [] },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "lossDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_devFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_plpFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payBorrowingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromFundingFeeReserveToTrader",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromPlpToTrader",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromTraderToFundingFeeReserve",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payFundingFeeFromTraderToPlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "payPlp",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_totalProfitAmount", internalType: "uint256", type: "uint256" },
      { name: "_settlementFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payTraderProfit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_devFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_protocolFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "payTradingFee",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "plpLiquidity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "plpLiquidityDebtUSDE30",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "protocolFees",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_token", internalType: "address", type: "address" }],
    name: "pullToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "pushToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "removeFundingFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "removePLPLiquidity",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_value", internalType: "uint256", type: "uint256" }],
    name: "removePlpLiquidityDebtUSDE30",
    outputs: [],
  },
  { stateMutability: "nonpayable", type: "function", inputs: [], name: "renounceOwnership", outputs: [] },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
      { name: "_fundingFeeValue", internalType: "uint256", type: "uint256" },
    ],
    name: "repayFundingFeeDebtFromTraderToPlp",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "serviceExecutors",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_executorAddress", internalType: "address", type: "address" },
      { name: "_isServiceExecutor", internalType: "bool", type: "bool" },
    ],
    name: "setServiceExecutors",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_strategy", internalType: "address", type: "address" },
      { name: "_target", internalType: "address", type: "address" },
    ],
    name: "setStrategyAllowance",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "strategyAllowances",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_borrowingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subBorrowingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_fundingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subFundingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_lossDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subLossDebt",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_tradingFeeDebt", internalType: "uint256", type: "uint256" },
    ],
    name: "subTradingFeeDebt",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "totalAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "traderBalances",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "traderTokens",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "tradingFeeDebt",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_from", internalType: "address", type: "address" },
      { name: "_to", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
    ],
    name: "validateAddTraderToken",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_trader", internalType: "address", type: "address" },
      { name: "_token", internalType: "address", type: "address" },
    ],
    name: "validateRemoveTraderToken",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_receiver", internalType: "address", type: "address" },
    ],
    name: "withdrawFee",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_token", internalType: "address", type: "address" },
      { name: "_fundingFeeAmount", internalType: "uint256", type: "uint256" },
    ],
    name: "withdrawSurplusFromFundingFeeReserveToPLP",
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link botHandlerABI}__.
 */
export function getBotHandler(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: botHandlerABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link botHandlerABI}__.
 */
export function readBotHandler<
  TAbi extends readonly unknown[] = typeof botHandlerABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: botHandlerABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link botHandlerABI}__.
 */
export function watchBotHandlerEvent<
  TAbi extends readonly unknown[] = typeof botHandlerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent({ abi: botHandlerABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link configStorageABI}__.
 */
export function getConfigStorage(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: configStorageABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link configStorageABI}__.
 */
export function readConfigStorage<
  TAbi extends readonly unknown[] = typeof configStorageABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: configStorageABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link configStorageABI}__.
 */
export function watchConfigStorageEvent<
  TAbi extends readonly unknown[] = typeof configStorageABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: configStorageABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function getCrossMarginHandler(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: crossMarginHandlerABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function readCrossMarginHandler<
  TAbi extends readonly unknown[] = typeof crossMarginHandlerABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: crossMarginHandlerABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link crossMarginHandlerABI}__.
 */
export function watchCrossMarginHandlerEvent<
  TAbi extends readonly unknown[] = typeof crossMarginHandlerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: crossMarginHandlerABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ecoPythABI}__.
 */
export function getEcoPyth(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: ecoPythABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ecoPythABI}__.
 */
export function readEcoPyth<TAbi extends readonly unknown[] = typeof ecoPythABI, TFunctionName extends string = string>(
  config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">,
) {
  return readContract({ abi: ecoPythABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link ecoPythABI}__.
 */
export function watchEcoPythEvent<
  TAbi extends readonly unknown[] = typeof ecoPythABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent({ abi: ecoPythABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iGmxGlpManagerABI}__.
 */
export function getIGmxGlpManager(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: iGmxGlpManagerABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iGmxGlpManagerABI}__.
 */
export function readIGmxGlpManager<
  TAbi extends readonly unknown[] = typeof iGmxGlpManagerABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: iGmxGlpManagerABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function getLimitTradeHandler(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: limitTradeHandlerABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function readLimitTradeHandler<
  TAbi extends readonly unknown[] = typeof limitTradeHandlerABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: limitTradeHandlerABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link limitTradeHandlerABI}__.
 */
export function watchLimitTradeHandlerEvent<
  TAbi extends readonly unknown[] = typeof limitTradeHandlerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: limitTradeHandlerABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function getLiquidityHandler(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: liquidityHandlerABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function readLiquidityHandler<
  TAbi extends readonly unknown[] = typeof liquidityHandlerABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: liquidityHandlerABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link liquidityHandlerABI}__.
 */
export function watchLiquidityHandlerEvent<
  TAbi extends readonly unknown[] = typeof liquidityHandlerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: liquidityHandlerABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link marketTradeHandlerABI}__.
 */
export function getMarketTradeHandler(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: marketTradeHandlerABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link marketTradeHandlerABI}__.
 */
export function readMarketTradeHandler<
  TAbi extends readonly unknown[] = typeof marketTradeHandlerABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: marketTradeHandlerABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link marketTradeHandlerABI}__.
 */
export function watchMarketTradeHandlerEvent<
  TAbi extends readonly unknown[] = typeof marketTradeHandlerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: marketTradeHandlerABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link oracleMiddlewareABI}__.
 */
export function getOracleMiddleware(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: oracleMiddlewareABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link oracleMiddlewareABI}__.
 */
export function readOracleMiddleware<
  TAbi extends readonly unknown[] = typeof oracleMiddlewareABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: oracleMiddlewareABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link oracleMiddlewareABI}__.
 */
export function watchOracleMiddlewareEvent<
  TAbi extends readonly unknown[] = typeof oracleMiddlewareABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: oracleMiddlewareABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function getPerpStorage(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: perpStorageABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function readPerpStorage<
  TAbi extends readonly unknown[] = typeof perpStorageABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: perpStorageABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link perpStorageABI}__.
 */
export function watchPerpStorageEvent<
  TAbi extends readonly unknown[] = typeof perpStorageABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent({ abi: perpStorageABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link pythAdapterABI}__.
 */
export function getPythAdapter(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: pythAdapterABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link pythAdapterABI}__.
 */
export function readPythAdapter<
  TAbi extends readonly unknown[] = typeof pythAdapterABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: pythAdapterABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link pythAdapterABI}__.
 */
export function watchPythAdapterEvent<
  TAbi extends readonly unknown[] = typeof pythAdapterABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent({ abi: pythAdapterABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function getVaultStorage(config: Omit<GetContractArgs, "abi">) {
  return getContract({ abi: vaultStorageABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function readVaultStorage<
  TAbi extends readonly unknown[] = typeof vaultStorageABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">) {
  return readContract({ abi: vaultStorageABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link vaultStorageABI}__.
 */
export function watchVaultStorageEvent<
  TAbi extends readonly unknown[] = typeof vaultStorageABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent({ abi: vaultStorageABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}
